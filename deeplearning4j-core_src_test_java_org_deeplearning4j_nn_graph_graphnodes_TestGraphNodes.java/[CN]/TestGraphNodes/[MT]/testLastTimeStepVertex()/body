{
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in").addVertex("lastTS",new LastTimeStepVertex("in"),"in").addLayer("out",new OutputLayer.Builder().nIn(1).nOut(1).build(),"lastTS").setOutputs("out").build();
  ComputationGraph graph=new ComputationGraph(conf);
  graph.init();
  Nd4j.getRandom().setSeed(12345);
  INDArray in=Nd4j.rand(new int[]{3,5,6});
  INDArray expOut=in.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.point(5));
  GraphVertex gv=graph.getVertex("lastTS");
  gv.setInputs(in);
  INDArray outFwd=gv.doForward(true);
  assertEquals(expOut,outFwd);
  gv.setError(0,expOut);
  Pair<Gradient,INDArray[]> pair=gv.doBackward(false);
  INDArray eps=pair.getSecond()[0];
  assertArrayEquals(in.shape(),eps.shape());
  assertEquals(Nd4j.zeros(3,5,5),eps.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(0,4,true)));
  assertEquals(expOut,eps.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.point(5)));
  INDArray inMask=Nd4j.zeros(3,6);
  inMask.putRow(0,Nd4j.create(new double[]{1,1,1,0,0,0}));
  inMask.putRow(1,Nd4j.create(new double[]{1,1,1,1,0,0}));
  inMask.putRow(2,Nd4j.create(new double[]{1,1,1,1,1,0}));
  graph.setLayerMaskArrays(new INDArray[]{inMask},null);
  expOut=Nd4j.zeros(3,5);
  expOut.putRow(0,in.get(NDArrayIndex.point(0),NDArrayIndex.all(),NDArrayIndex.point(2)));
  expOut.putRow(1,in.get(NDArrayIndex.point(1),NDArrayIndex.all(),NDArrayIndex.point(3)));
  expOut.putRow(2,in.get(NDArrayIndex.point(2),NDArrayIndex.all(),NDArrayIndex.point(4)));
  gv.setInputs(in);
  outFwd=gv.doForward(true);
  assertEquals(expOut,outFwd);
  String json=conf.toJson();
  ComputationGraphConfiguration conf2=ComputationGraphConfiguration.fromJson(json);
  assertEquals(conf,conf2);
}
