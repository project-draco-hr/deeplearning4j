{
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in2d","in3d").addVertex("duplicateTS",new DuplicateToTimeSeriesVertex("in3d"),"in2d").addLayer("out",new OutputLayer.Builder().nIn(1).nOut(1).build(),"duplicateTS").setOutputs("out").build();
  ComputationGraph graph=new ComputationGraph(conf);
  graph.init();
  INDArray in2d=Nd4j.rand(3,5);
  INDArray in3d=Nd4j.rand(new int[]{3,2,7});
  graph.setInputs(in2d,in3d);
  INDArray expOut=Nd4j.zeros(3,5,7);
  for (int i=0; i < 7; i++) {
    expOut.put(new INDArrayIndex[]{NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.point(i)},in2d);
  }
  GraphVertex gv=graph.getVertex("duplicateTS");
  gv.setInputs(in2d);
  INDArray outFwd=gv.doForward(true);
  assertEquals(expOut,outFwd);
  INDArray expOutBackward=expOut.sum(2);
  gv.setError(0,expOut);
  INDArray outBwd=gv.doBackward(false).getSecond()[0];
  assertEquals(expOutBackward,outBwd);
  String json=conf.toJson();
  ComputationGraphConfiguration conf2=ComputationGraphConfiguration.fromJson(json);
  assertEquals(conf,conf2);
}
