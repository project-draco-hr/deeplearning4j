{
  Nd4j.getRandom().setSeed(12345);
  GraphNode subset=new SubsetNode(4,7);
  INDArray in=Nd4j.rand(5,10);
  INDArray out=subset.forward(in);
  assertEquals(in.get(NDArrayIndex.all(),NDArrayIndex.interval(4,7,true)),out);
  INDArray backward=subset.backward(out)[0];
  assertEquals(Nd4j.zeros(5,4),backward.get(NDArrayIndex.all(),NDArrayIndex.interval(0,3,true)));
  assertEquals(out,backward.get(NDArrayIndex.all(),NDArrayIndex.interval(4,7,true)));
  assertEquals(Nd4j.zeros(5,2),backward.get(NDArrayIndex.all(),NDArrayIndex.interval(8,9,true)));
  in=Nd4j.rand(new int[]{5,10,3,3});
  out=subset.forward(in);
  assertEquals(in.get(NDArrayIndex.all(),NDArrayIndex.interval(4,7,true),NDArrayIndex.all(),NDArrayIndex.all()),out);
  backward=subset.backward(out)[0];
  assertEquals(Nd4j.zeros(5,4,3,3),backward.get(NDArrayIndex.all(),NDArrayIndex.interval(0,3,true),NDArrayIndex.all(),NDArrayIndex.all()));
  assertEquals(out,backward.get(NDArrayIndex.all(),NDArrayIndex.interval(4,7,true),NDArrayIndex.all(),NDArrayIndex.all()));
  assertEquals(Nd4j.zeros(5,2,3,3),backward.get(NDArrayIndex.all(),NDArrayIndex.interval(8,9,true),NDArrayIndex.all(),NDArrayIndex.all()));
}
