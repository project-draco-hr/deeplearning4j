{
  String path=new ClassPathResource("WeightedGraph.txt").getFile().getAbsolutePath();
  int numVertices=9;
  String delim=",";
  String[] ignoreLinesStartingWith=new String[]{"//"};
  IGraph<String,Double> graph=GraphLoader.loadWeightedEdgeListFile(path,numVertices,delim,true,ignoreLinesStartingWith);
  assertEquals(numVertices,graph.numVertices());
  int[] vertexOutDegrees={2,2,1,2,2,1,1,1,1};
  for (int i=0; i < numVertices; i++)   assertEquals(vertexOutDegrees[i],graph.getVertexDegree(i));
  int[][] edges=new int[][]{{1,3},{2,4},{5},{4,6},{5,7},{8},{7},{8},{0}};
  double[][] edgeWeights=new double[][]{{1,3},{12,14},{25},{34,36},{45,47},{58},{67},{78},{80}};
  double[][] edgeWeightsNormalized=new double[edgeWeights.length][0];
  for (int i=0; i < edgeWeights.length; i++) {
    double sum=0.0;
    for (int j=0; j < edgeWeights[i].length; j++)     sum+=edgeWeights[i][j];
    edgeWeightsNormalized[i]=new double[edgeWeights[i].length];
    for (int j=0; j < edgeWeights[i].length; j++)     edgeWeightsNormalized[i][j]=edgeWeights[i][j] / sum;
  }
  int walkLength=5;
  WeightedRandomWalkIterator<String> iterator=new WeightedRandomWalkIterator<String>(graph,walkLength,12345);
  int walkCount=0;
  Set<Integer> set=new HashSet<>();
  while (iterator.hasNext()) {
    IVertexSequence<String> walk=iterator.next();
    assertEquals(walkLength + 1,walk.sequenceLength());
    int thisWalkCount=0;
    boolean first=true;
    int lastVertex=-1;
    while (walk.hasNext()) {
      Vertex<String> vertex=walk.next();
      if (first) {
        assertFalse(set.contains(vertex.vertexID()));
        set.add(vertex.vertexID());
        lastVertex=vertex.vertexID();
        first=false;
      }
 else {
        int currVertex=vertex.vertexID();
        assertTrue(ArrayUtils.contains(edges[lastVertex],currVertex));
        lastVertex=currVertex;
      }
      thisWalkCount++;
    }
    assertEquals(walkLength + 1,thisWalkCount);
    walkCount++;
  }
  double[][] transitionProb=new double[numVertices][numVertices];
  int nWalks=2000;
  for (int i=0; i < nWalks; i++) {
    iterator.reset();
    while (iterator.hasNext()) {
      IVertexSequence<String> seq=iterator.next();
      int last=-1;
      while (seq.hasNext()) {
        int curr=seq.next().vertexID();
        if (last != -1) {
          transitionProb[last][curr]+=1.0;
        }
        last=curr;
      }
    }
  }
  for (int i=0; i < transitionProb.length; i++) {
    double sum=0.0;
    for (int j=0; j < transitionProb[i].length; j++)     sum+=transitionProb[i][j];
    for (int j=0; j < transitionProb[i].length; j++)     transitionProb[i][j]/=sum;
    System.out.println(Arrays.toString(transitionProb[i]));
  }
  for (int i=0; i < numVertices; i++) {
    for (int j=0; j < numVertices; j++) {
      if (!ArrayUtils.contains(edges[i],j)) {
        assertEquals(0.0,transitionProb[i][j],0.0);
      }
 else {
        int idx=ArrayUtils.indexOf(edges[i],j);
        assertEquals(edgeWeightsNormalized[i][idx],transitionProb[i][j],0.01);
      }
    }
  }
  for (int i=0; i < numVertices; i++)   assertTrue(set.contains(i));
  assertEquals(numVertices,walkCount);
}
