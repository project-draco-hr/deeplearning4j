{
  Graph<String,String> graph=new Graph<>(10,false,new VFactory());
  assertEquals(10,graph.numVertices());
  for (int i=0; i < 10; i++) {
    String str=i + "--" + (i + 1) % 10;
    Edge<String> edge=new Edge<>(i,(i + 1) % 10,str,false);
    graph.addEdge(edge);
  }
  int walkLength=4;
  RandomWalkIterator<String> iter=new RandomWalkIterator<String>(graph,walkLength,1235,NoEdgeHandling.EXCEPTION_ON_DISCONNECTED);
  int count=0;
  Set<Integer> startIdxSet=new HashSet<>();
  while (iter.hasNext()) {
    count++;
    IVertexSequence<String> sequence=iter.next();
    int seqCount=1;
    int first=sequence.next().vertexID();
    int previous=first;
    while (sequence.hasNext()) {
      int left=(previous - 1 + 10) % 10;
      int right=(previous + 1) % 10;
      int current=sequence.next().vertexID();
      assertTrue("expected: " + left + " or "+ right+ ", got "+ current,current == left || current == right);
      seqCount++;
      previous=current;
    }
    assertEquals(seqCount,walkLength + 1);
    assertFalse(startIdxSet.contains(first));
    startIdxSet.add(first);
  }
  assertEquals(10,count);
  assertEquals(10,startIdxSet.size());
}
