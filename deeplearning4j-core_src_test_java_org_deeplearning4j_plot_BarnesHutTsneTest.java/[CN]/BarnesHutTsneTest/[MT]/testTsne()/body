{
  Nd4j.ENFORCE_NUMERICAL_STABILITY=true;
  Nd4j.factory().setDType(DataBuffer.DOUBLE);
  Nd4j.getRandom().setSeed(123);
  BarnesHutTsne b=new BarnesHutTsne.Builder().stopLyingIteration(250).theta(0.5).learningRate(500).useAdaGrad(false).build();
  BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(new File("/home/agibsonccc/code/barneshut/data.dat"),false));
  DataOutputStream dos=new DataOutputStream(fos);
  ClassPathResource resource=new ClassPathResource("/mnist2500_X.txt");
  File f=resource.getFile();
  INDArray data=Nd4j.readTxt(f.getAbsolutePath(),"   ").get(NDArrayIndex.interval(0,100),NDArrayIndex.interval(0,784));
  EndianUtils.writeSwappedInteger(dos,data.rows());
  EndianUtils.writeSwappedInteger(dos,data.columns());
  EndianUtils.writeSwappedDouble(dos,0.5);
  EndianUtils.writeSwappedDouble(dos,30);
  EndianUtils.writeSwappedInteger(dos,2);
  for (int i=0; i < data.rows(); i++) {
    for (int j=0; j < data.columns(); j++)     EndianUtils.writeSwappedDouble(dos,data.getDouble(i,j));
  }
  EndianUtils.writeSwappedInteger(dos,123);
  dos.flush();
  fos.flush();
  dos.close();
  ClassPathResource labels=new ClassPathResource("mnist2500_labels.txt");
  List<String> labelsList=IOUtils.readLines(labels.getInputStream());
  b.fit(data);
}
