{
  this.counts=new ArrayList<>(this.nbCluster);
  for (int i=0; i < this.nbCluster; i++) {
    this.counts.add(0L);
  }
  Random random=new Random();
  final DoubleMatrix firstCentroid=this.initFeatures.remove(random.nextInt(this.initFeatures.size()));
  this.centroids=new DoubleMatrix(this.nbCluster,firstCentroid.columns);
  this.centroids.putRow(0,firstCentroid);
  log.info("Added initial centroid");
  DoubleMatrix dxs;
  for (int j=1; j < this.nbCluster; j++) {
    dxs=this.computeDxs();
    DoubleMatrix features;
    double r=random.nextDouble() * dxs.get(dxs.length - 1);
    for (int i=0; i < dxs.length; i++) {
      if (dxs.get(i) >= r) {
        features=this.initFeatures.remove(i);
        this.centroids.putRow(j,features);
        break;
      }
    }
  }
  this.initFeatures.clear();
}
