{
  lastHeight=height;
  lastWidth=width;
  lastOutChannels=channels;
  int numLayers=-1;
  if (conf instanceof NeuralNetConfiguration.ListBuilder) {
    NeuralNetConfiguration.ListBuilder listBuilder=(NeuralNetConfiguration.ListBuilder)conf;
    numLayers=listBuilder.getLayerwise().size();
  }
 else   numLayers=conf.getConfs().size();
  for (int i=0; i < numLayers; i++) {
    Layer curr=getLayer(i,conf);
    if (i < numLayers - 1 && getLayer(i,conf) instanceof ConvolutionLayer) {
      ConvolutionLayer convolutionLayer=(ConvolutionLayer)getLayer(i,conf);
      Layer next=getLayer(i + 1,conf);
      if (next instanceof FeedForwardLayer) {
        conf.inputPreProcessor(i,new CnnToFeedForwardPreProcessor(convolutionLayer.getKernelSize()[0],convolutionLayer.getKernelSize()[1],convolutionLayer.getNOut()));
        FeedForwardLayer o=(FeedForwardLayer)next;
        int outRows=lastHeight - convolutionLayer.getKernelSize()[0] + convolutionLayer.getPadding()[0];
        int outCols=lastWidth - convolutionLayer.getKernelSize()[1] + convolutionLayer.getPadding()[1];
        int nIn=outCols * outRows * convolutionLayer.getNOut();
        o.setNIn(nIn);
      }
 else       if (next instanceof SubsamplingLayer) {
        SubsamplingLayer subsamplingLayer=(SubsamplingLayer)next;
        subsamplingLayer.setKernelSize(convolutionLayer.getKernelSize());
        if (subsamplingLayer.getPadding() == null)         subsamplingLayer.setPadding(convolutionLayer.getPadding());
      }
 else       if (next instanceof ConvolutionLayer) {
        ConvolutionLayer nextConv=(ConvolutionLayer)next;
        nextConv.setNIn(convolutionLayer.getNOut());
      }
    }
 else     if (i < numLayers - 1 && getLayer(i,conf) instanceof SubsamplingLayer) {
      SubsamplingLayer subsamplingLayer=(SubsamplingLayer)getLayer(i,conf);
      Layer next=getLayer(i + 1,conf);
      if (next instanceof FeedForwardLayer) {
        conf.inputPreProcessor(i,new CnnToFeedForwardPreProcessor(subsamplingLayer.getKernelSize()[0],subsamplingLayer.getKernelSize()[1],lastOutChannels));
        FeedForwardLayer o=(FeedForwardLayer)next;
        int outRows=lastHeight - subsamplingLayer.getKernelSize()[0] + subsamplingLayer.getPadding()[0];
        int outCols=lastWidth - subsamplingLayer.getKernelSize()[1] + subsamplingLayer.getPadding()[1];
        int nIn=outCols * outRows * lastOutChannels;
        o.setNIn(nIn);
      }
 else       if (next instanceof ConvolutionLayer) {
        ConvolutionLayer nextConv=(ConvolutionLayer)next;
        nextConv.setNIn(lastOutChannels);
      }
    }
 else     if (i < conf.getConfs().size() - 1 && conf.getConfs().get(i).getLayer() instanceof FeedForwardLayer) {
      FeedForwardLayer d=(FeedForwardLayer)conf.getConfs().get(i).getLayer();
      setFourDtoTwoD(i,conf,d);
    }
    if (curr instanceof ConvolutionLayer) {
      ConvolutionLayer convolutionLayer=(ConvolutionLayer)curr;
      lastHeight-=convolutionLayer.getKernelSize()[0] + convolutionLayer.getPadding()[0];
      lastWidth-=convolutionLayer.getKernelSize()[1] + convolutionLayer.getPadding()[1];
      lastOutChannels=convolutionLayer.getNOut();
    }
 else     if (curr instanceof SubsamplingLayer) {
      SubsamplingLayer subsamplingLayer=(SubsamplingLayer)curr;
      lastHeight/=subsamplingLayer.getStride()[0];
      lastWidth/=subsamplingLayer.getStride()[1];
    }
  }
  if (conf instanceof NeuralNetConfiguration.ListBuilder) {
    NeuralNetConfiguration.ListBuilder l=(NeuralNetConfiguration.ListBuilder)conf;
    if (l.getLayerwise().get(0).getLayer() instanceof ConvolutionLayer || l.getLayerwise().get(0).getLayer() instanceof SubsamplingLayer) {
      conf.inputPreProcessor(0,new FeedForwardToCnnPreProcessor(height,width,channels));
    }
  }
 else {
    if (conf.getConfs().get(0).getLayer() instanceof ConvolutionLayer || conf.getConfs().get(0).getLayer() instanceof SubsamplingLayer) {
      conf.inputPreProcessor(0,new FeedForwardToCnnPreProcessor(height,width,channels));
    }
  }
}
