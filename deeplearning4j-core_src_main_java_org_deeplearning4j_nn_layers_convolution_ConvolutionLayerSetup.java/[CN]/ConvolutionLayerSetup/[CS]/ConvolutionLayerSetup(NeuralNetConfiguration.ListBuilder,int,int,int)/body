{
  int lastHeight=height;
  int lastWidth=width;
  int lastOutChannels=channels;
  for (int i=0; i < conf.getLayerwise().size(); i++) {
    Layer curr=conf.getLayerwise().get(i).getLayer();
    if (i < conf.getLayerwise().size() - 1 && conf.getLayerwise().get(i).getLayer() instanceof ConvolutionLayer) {
      ConvolutionLayer convolutionLayer=(ConvolutionLayer)conf.getLayerwise().get(i).getLayer();
      Layer next=conf.getLayerwise().get(i + 1).getLayer();
      if (next instanceof DenseLayer || next instanceof OutputLayer) {
        conf.inputPreProcessor(i,new CnnToFeedForwardPreProcessor(convolutionLayer.getKernelSize()[0],convolutionLayer.getKernelSize()[1],convolutionLayer.getNOut()));
        if (next instanceof DenseLayer) {
          DenseLayer d=(DenseLayer)next;
          int outRows=lastHeight - convolutionLayer.getKernelSize()[0] + convolutionLayer.getPadding()[0];
          int outCols=lastWidth - convolutionLayer.getKernelSize()[1] + convolutionLayer.getPadding()[1];
          int nIn=outCols * outRows * convolutionLayer.getNOut();
          d.setNIn(nIn);
        }
        if (next instanceof OutputLayer) {
          OutputLayer o=(OutputLayer)next;
          int outRows=lastHeight - convolutionLayer.getKernelSize()[0] + convolutionLayer.getPadding()[0];
          int outCols=lastWidth - convolutionLayer.getKernelSize()[1] + convolutionLayer.getPadding()[1];
          int nIn=outCols * outRows * convolutionLayer.getNOut();
          o.setNIn(nIn);
        }
      }
 else       if (next instanceof SubsamplingLayer) {
        SubsamplingLayer subsamplingLayer=(SubsamplingLayer)next;
        subsamplingLayer.setKernelSize(convolutionLayer.getKernelSize());
        if (subsamplingLayer.getPadding() == null)         subsamplingLayer.setPadding(convolutionLayer.getPadding());
      }
 else       if (next instanceof ConvolutionLayer) {
        ConvolutionLayer nextConv=(ConvolutionLayer)next;
        nextConv.setNIn(convolutionLayer.getNOut());
      }
    }
 else     if (i < conf.getLayerwise().size() - 1 && conf.getLayerwise().get(i).getLayer() instanceof OutputLayer) {
      OutputLayer o=(OutputLayer)conf.getLayerwise().get(i).getLayer();
      Layer next=conf.getLayerwise().get(i + 1).getLayer();
      if (next instanceof ConvolutionLayer || next instanceof SubsamplingLayer) {
        ConvolutionLayer convolutionLayer=(ConvolutionLayer)next;
      }
    }
 else     if (i < conf.getLayerwise().size() - 1 && conf.getLayerwise().get(i).getLayer() instanceof DenseLayer) {
      DenseLayer d=(DenseLayer)conf.getLayerwise().get(i).getLayer();
      Layer next=conf.getLayerwise().get(i + 1).getLayer();
      if (next instanceof ConvolutionLayer || next instanceof SubsamplingLayer) {
        if (next instanceof ConvolutionLayer) {
          ConvolutionLayer convolutionLayer=(ConvolutionLayer)next;
          int inputHeight=lastHeight - convolutionLayer.getKernelSize()[0] + convolutionLayer.getPadding()[0];
          int inputWidth=lastWidth - convolutionLayer.getKernelSize()[1] + convolutionLayer.getPadding()[1];
          if (convolutionLayer.getKernelSize() != null) {
            d.setNOut(inputHeight * inputWidth * convolutionLayer.getNOut());
          }
 else           throw new IllegalStateException("Unable to infer width and height without convolution layer kernel size");
          conf.inputPreProcessor(i + 1,new CnnToFeedForwardPreProcessor(inputHeight,inputWidth,lastOutChannels));
        }
 else         if (next instanceof SubsamplingLayer) {
          SubsamplingLayer convolutionLayer=(SubsamplingLayer)next;
          int inputHeight=lastHeight - convolutionLayer.getKernelSize()[0] + convolutionLayer.getPadding()[0];
          int inputWidth=lastWidth - convolutionLayer.getKernelSize()[1] + convolutionLayer.getPadding()[1];
          if (convolutionLayer.getKernelSize() != null) {
            d.setNOut(inputHeight * inputWidth * lastOutChannels);
          }
 else           throw new IllegalStateException("Unable to infer width and height without convolution layer kernel size");
          conf.inputPreProcessor(i + 1,new CnnToFeedForwardPreProcessor(inputHeight,inputWidth,lastOutChannels));
        }
      }
    }
    if (curr instanceof ConvolutionLayer) {
      ConvolutionLayer convolutionLayer=(ConvolutionLayer)curr;
      lastHeight-=convolutionLayer.getKernelSize()[0] + convolutionLayer.getPadding()[0];
      lastWidth-=convolutionLayer.getKernelSize()[1] + convolutionLayer.getPadding()[1];
      lastOutChannels=convolutionLayer.getNOut();
    }
 else     if (curr instanceof SubsamplingLayer) {
      SubsamplingLayer subsamplingLayer=(SubsamplingLayer)curr;
      lastHeight/=subsamplingLayer.getStride()[0];
      lastWidth/=subsamplingLayer.getStride()[1];
    }
  }
  if (conf.getLayerwise().get(0).getLayer() instanceof ConvolutionLayer || conf.getLayerwise().get(0).getLayer() instanceof SubsamplingLayer) {
    conf.inputPreProcessor(0,new FeedForwardToCnnPreProcessor(height,width,channels));
  }
}
