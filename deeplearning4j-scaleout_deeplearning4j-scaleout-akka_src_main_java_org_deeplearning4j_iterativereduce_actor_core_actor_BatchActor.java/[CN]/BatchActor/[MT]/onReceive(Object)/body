{
  if (message instanceof DistributedPubSubMediator.SubscribeAck || message instanceof DistributedPubSubMediator.UnsubscribeAck) {
    log.info("Susbcribed batch actor");
    mediator.tell(new DistributedPubSubMediator.Publish(ClusterListener.TOPICS,message),getSelf());
  }
 else   if (message instanceof ResetMessage) {
    iter.reset();
    if (iter.hasNext()) {
      log.info("Propagating new work to master");
      mediator.tell(new DistributedPubSubMediator.Publish(MasterActor.MASTER,iter.next()),mediator);
    }
 else     if (!iter.hasNext()) {
      mediator.tell(new DistributedPubSubMediator.Publish(MasterActor.MASTER,DoneMessage.getInstance()),mediator);
    }
  }
 else   if (message instanceof MoreWorkMessage) {
    MoreWorkMessage m=(MoreWorkMessage)message;
    UpdateableImpl result=(UpdateableImpl)m.getUpdateable();
    UpdateableImpl save=SerializationUtils.clone(result);
    log.info("Saving model");
    mediator.tell(new DistributedPubSubMediator.Publish(ModelSavingActor.SAVE,save),mediator);
    if (iter.hasNext()) {
      log.info("Propagating new work to master");
      numDataSets++;
      log.info("Iterating over next dataset " + numDataSets);
      List<String> workers2=stateTracker.workers();
      for (      String s : workers2)       log.info("Worker " + s);
      int numWorkers=stateTracker.workers().size();
      int miniBatchSize=conf.getSplit();
      if (numWorkers == 0)       numWorkers=Runtime.getRuntime().availableProcessors();
      log.info("Number of workers " + numWorkers + " and batch size is "+ miniBatchSize);
      int batch=numWorkers * miniBatchSize;
      log.info("Batch size for worker is " + batch);
      DataSet next=iter.next(batch);
      List<DataSet> list=next.asList();
      mediator.tell(new DistributedPubSubMediator.Publish(MasterActor.MASTER,list),mediator);
    }
 else     if (!iter.hasNext()) {
      int iterations=stateTracker.runPreTrainIterations();
      if (iterations < conf.getNumPasses()) {
        stateTracker.incrementNumTimesPreTrainRan();
        iter.reset();
        log.info("Next pretrain iteration " + stateTracker.numTimesPreTrainRun() + " out of "+ stateTracker.runPreTrainIterations());
      }
 else       mediator.tell(new DistributedPubSubMediator.Publish(MasterActor.MASTER,DoneMessage.getInstance()),mediator);
    }
 else     unhandled(message);
  }
}
