{
  ZipOutputStream zipfile=new ZipOutputStream(stream);
  String json="";
  if (model instanceof MultiLayerNetwork) {
    json=((MultiLayerNetwork)model).getLayerWiseConfigurations().toJson();
  }
 else   if (model instanceof ComputationGraph) {
    json=((ComputationGraph)model).getConfiguration().toJson();
  }
  ZipEntry config=new ZipEntry("configuration.json");
  zipfile.putNextEntry(config);
  writeEntry(new ByteArrayInputStream(json.getBytes()),zipfile);
  ZipEntry coefficients=new ZipEntry("coefficients.bin");
  zipfile.putNextEntry(coefficients);
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(bos);
  Nd4j.write(model.params(),dos);
  dos.flush();
  dos.close();
  InputStream inputStream=new ByteArrayInputStream(bos.toByteArray());
  writeEntry(inputStream,zipfile);
  if (saveUpdater) {
    INDArray updaterState=null;
    if (model instanceof MultiLayerNetwork) {
      updaterState=((MultiLayerNetwork)model).getUpdater().getStateViewArray();
    }
 else     if (model instanceof ComputationGraph) {
      updaterState=((ComputationGraph)model).getUpdater().getStateViewArray();
    }
    if (updaterState != null && updaterState.length() > 0) {
      ZipEntry updater=new ZipEntry(UPDATER_BIN);
      zipfile.putNextEntry(updater);
      bos=new ByteArrayOutputStream();
      dos=new DataOutputStream(bos);
      Nd4j.write(updaterState,dos);
      dos.flush();
      dos.close();
    }
  }
  zipfile.flush();
  zipfile.close();
}
