{
  ZipFile zipFile=new ZipFile(file);
  boolean gotConfig=false;
  boolean gotCoefficients=false;
  boolean gotUpdater=false;
  String json="";
  INDArray params=null;
  ComputationGraphUpdater updater=null;
  ZipEntry config=zipFile.getEntry("configuration.json");
  if (config != null) {
    InputStream stream=zipFile.getInputStream(config);
    BufferedReader reader=new BufferedReader(new InputStreamReader(stream));
    String line="";
    StringBuilder js=new StringBuilder();
    while ((line=reader.readLine()) != null) {
      js.append(line).append("\n");
    }
    json=js.toString();
    reader.close();
    stream.close();
    gotConfig=true;
  }
  ZipEntry coefficients=zipFile.getEntry("coefficients.bin");
  if (coefficients != null) {
    InputStream stream=zipFile.getInputStream(coefficients);
    DataInputStream dis=new DataInputStream(stream);
    params=Nd4j.read(dis);
    dis.close();
    gotCoefficients=true;
  }
  ZipEntry updaters=zipFile.getEntry("updater.bin");
  if (updaters != null) {
    InputStream stream=zipFile.getInputStream(updaters);
    ObjectInputStream ois=new ObjectInputStream(stream);
    try {
      updater=(ComputationGraphUpdater)ois.readObject();
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
    gotUpdater=true;
  }
  zipFile.close();
  if (gotConfig && gotCoefficients) {
    ComputationGraphConfiguration confFromJson=ComputationGraphConfiguration.fromJson(json);
    ComputationGraph cg=new ComputationGraph(confFromJson);
    cg.init();
    cg.setParams(params);
    if (gotUpdater && updater != null) {
      cg.setUpdater(updater);
    }
    return cg;
  }
 else   throw new IllegalStateException("Model wasnt found within file: gotConfig: [" + gotConfig + "], gotCoefficients: ["+ gotCoefficients+ "], gotUpdater: ["+ gotUpdater+ "]");
}
