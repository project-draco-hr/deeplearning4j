{
  RandomGenerator gen=new MersenneTwister(123);
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().momentum(9e-1f).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createNormal(1e-1,1)).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).iterations(10).learningRate(1e-1f).nIn(4).nOut(3).list(2).hiddenLayerSizes(new int[]{3}).override(new ConfOverride(){
    @Override public void overrideLayer(    int i,    NeuralNetConfiguration.Builder builder){
      if (i == 1) {
        builder.weightInit(WeightInit.ZERO);
        builder.activationFunction("softmax");
        builder.lossFunction(LossFunctions.LossFunction.MCXENT);
      }
    }
  }
).build();
  String json=conf.toJson();
  Configuration conf2=new Configuration();
  conf2.set(DeepLearningConfigurable.MULTI_LAYER_CONF,json);
  WorkerPerformer performer=new BaseMultiLayerNetworkWorkPerformer();
  performer.setup(conf2);
  IrisDataFetcher fetcher=new IrisDataFetcher();
  fetcher.fetch(10);
  DataSet d=fetcher.next();
  Job j=new Job(d,"1");
  assumeJobResultNotNull(performer,j);
  performer.update(j.getResult());
}
