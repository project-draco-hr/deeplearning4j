{
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().momentum(9e-1f).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).iterations(10).learningRate(1e-1f).nIn(4).nOut(3).layer(new org.deeplearning4j.nn.conf.layers.RBM.Builder().weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(1e-1,1)).build()).list(2).layer(1,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation("softmax").weightInit(WeightInit.ZERO).build()).hiddenLayerSizes(new int[]{3}).build();
  String json=conf.toJson();
  Configuration conf2=new Configuration();
  conf2.set(DeepLearningConfigurable.MULTI_LAYER_CONF,json);
  WorkerPerformer performer=new BaseMultiLayerNetworkWorkPerformer();
  performer.setup(conf2);
  IrisDataFetcher fetcher=new IrisDataFetcher();
  fetcher.fetch(10);
  DataSet d=fetcher.next();
  Job j=new Job(d,"1");
  assumeJobResultNotNull(performer,j);
  performer.update(j.getResult());
}
