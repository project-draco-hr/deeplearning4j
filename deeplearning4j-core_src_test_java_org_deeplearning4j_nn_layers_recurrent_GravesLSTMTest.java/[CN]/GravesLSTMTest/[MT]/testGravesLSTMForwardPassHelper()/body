{
  Nd4j.getRandom().setSeed(12345);
  int nIn=10;
  int layerSize=15;
  int miniBatchSize=4;
  int timeSeriesLength=7;
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().layer(new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(nIn).nOut(layerSize).weightInit(WeightInit.DISTRIBUTION).dist(new UniformDistribution(0,1)).activation("tanh").build()).build();
  int numParams=LayerFactories.getFactory(conf).initializer().numParams(conf,true);
  INDArray params=Nd4j.create(1,numParams);
  GravesLSTM lstm=LayerFactories.getFactory(conf.getLayer()).create(conf,null,0,params);
  INDArray input=Nd4j.rand(new int[]{miniBatchSize,nIn,timeSeriesLength});
  lstm.setInput(input);
  Method actHelper=GravesLSTM.class.getDeclaredMethod("activateHelper",boolean.class,INDArray.class,INDArray.class,boolean.class);
  actHelper.setAccessible(true);
  Class<?> innerClass=Class.forName("org.deeplearning4j.nn.layers.recurrent.FwdPassReturn");
  Object oFalse=actHelper.invoke(lstm,false,null,null,false);
  Object oTrue=actHelper.invoke(lstm,false,null,null,true);
  Field fwdPassOutput=innerClass.getDeclaredField("fwdPassOutput");
  fwdPassOutput.setAccessible(true);
  Field fwdPassOutputAsArrays=innerClass.getDeclaredField("fwdPassOutputAsArrays");
  fwdPassOutputAsArrays.setAccessible(true);
  INDArray fwdPassFalse=(INDArray)fwdPassOutput.get(oFalse);
  INDArray[] fwdPassTrue=(INDArray[])fwdPassOutputAsArrays.get(oTrue);
  for (int i=0; i < timeSeriesLength; i++) {
    INDArray sliceFalse=fwdPassFalse.tensorAlongDimension(i,1,0);
    INDArray sliceTrue=fwdPassTrue[i];
    assertTrue(sliceFalse.equals(sliceTrue));
  }
}
