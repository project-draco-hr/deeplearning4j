{
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).updater(Updater.NONE).learningRate(1.0).graphBuilder().addInputs("input").addLayer("firstLayer",new DenseLayer.Builder().nIn(4).nOut(5).activation("tanh").build(),"input").addLayer("outputLayer",new OutputLayer.Builder().lossFunction(LossFunctions.LossFunction.MCXENT).activation("softmax").nIn(5).nOut(3).build(),"firstLayer").setOutputs("outputLayer").pretrain(false).backprop(true).build();
  String json=conf.toJson();
  ComputationGraphConfiguration conf2=ComputationGraphConfiguration.fromJson(json);
  assertEquals(json,conf2.toJson());
  assertEquals(conf,conf2);
}
