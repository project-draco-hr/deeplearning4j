{
  double lr=1e-2;
  double rho=0.85;
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().learningRate(lr).rho(rho).layer(new DenseLayer.Builder().nIn(nIn).nOut(nOut).updater(org.deeplearning4j.nn.conf.Updater.ADADELTA).build()).build();
  Layer layer=LayerFactories.getFactory(conf).create(conf,null,0);
  Updater updater=UpdaterCreator.getUpdater(layer);
  updater.update(layer,gradient,-1);
  INDArray msgW, msdxW, dxSquaredW, weightGradExpected, weightGradExpected2, msgB, msdxB, dxSquaredB, biasGradExpected, biasGradExpected2;
  msgW=Nd4j.zeros(weightGradient.shape());
  msdxW=Nd4j.zeros(weightGradient.shape());
  msgW.muli(rho);
  msgW.addi(1 - rho).muli(weightGradient.mul(weightGradient));
  weightGradExpected=Transforms.sqrt(msdxW.add(Nd4j.EPS_THRESHOLD)).divi(Transforms.sqrt(msgW.add(Nd4j.EPS_THRESHOLD))).muli(weightGradient);
  msgB=Nd4j.zeros(biasGradient.shape());
  msdxB=Nd4j.zeros(biasGradient.shape());
  msgB.muli(rho);
  msgB.addi(1 - rho).muli(biasGradient.mul(biasGradient));
  biasGradExpected=Transforms.sqrt(msdxB.add(Nd4j.EPS_THRESHOLD)).divi(Transforms.sqrt(msgB.add(Nd4j.EPS_THRESHOLD))).muli(weightGradient);
  INDArray weightGradActual=gradient.getGradientFor(DefaultParamInitializer.WEIGHT_KEY);
  INDArray biasGradActual=gradient.getGradientFor(DefaultParamInitializer.BIAS_KEY);
  assertEquals(weightGradExpected,weightGradActual);
  assertEquals(biasGradExpected,biasGradActual);
  assertEquals(rho,layer.conf().getRho(),1e-4);
  Gradient gradient2=new DefaultGradient();
  gradient2.setGradientFor(DefaultParamInitializer.WEIGHT_KEY,weightGradExpected);
  gradient2.setGradientFor(DefaultParamInitializer.BIAS_KEY,biasGradExpected);
  updater.update(layer,gradient2,-1);
  msdxW.muli(rho);
  dxSquaredW=weightGradExpected.mul(weightGradExpected);
  msdxW.addi(dxSquaredW.muli(1 - rho));
  msgW.muli(rho);
  msgW.addi(1 - rho).muli(weightGradExpected.mul(weightGradExpected));
  weightGradExpected2=Transforms.sqrt(msdxW.add(Nd4j.EPS_THRESHOLD)).divi(Transforms.sqrt(msgW.add(Nd4j.EPS_THRESHOLD))).muli(weightGradExpected);
  msdxB.muli(rho);
  dxSquaredB=biasGradExpected.mul(biasGradExpected);
  msdxB.addi(dxSquaredB.muli(1 - rho));
  msgB.muli(rho);
  msgB.addi(1 - rho).muli(biasGradExpected.mul(biasGradExpected));
  biasGradExpected2=Transforms.sqrt(msdxB.add(Nd4j.EPS_THRESHOLD)).divi(Transforms.sqrt(msgB.add(Nd4j.EPS_THRESHOLD))).muli(biasGradExpected);
  INDArray weightGradActual2=gradient2.getGradientFor(DefaultParamInitializer.WEIGHT_KEY);
  INDArray biasGradActual2=gradient2.getGradientFor(DefaultParamInitializer.BIAS_KEY);
  assertEquals(weightGradExpected2,weightGradActual2);
  assertEquals(biasGradExpected2,biasGradActual2);
  assertEquals(rho,layer.conf().getRho(),1e-4);
}
