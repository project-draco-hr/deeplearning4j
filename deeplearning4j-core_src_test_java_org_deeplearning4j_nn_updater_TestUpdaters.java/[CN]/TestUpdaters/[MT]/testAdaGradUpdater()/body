{
  double lr=1e-2;
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().learningRate(lr).layer(new DenseLayer.Builder().nIn(nIn).nOut(nOut).updater(org.deeplearning4j.nn.conf.Updater.ADAGRAD).build()).build();
  Layer layer=LayerFactories.getFactory(conf).create(conf,null,0);
  Updater updater=UpdaterCreator.getUpdater(layer);
  updater.update(layer,gradient,-1);
  INDArray weightGradExpected=Transforms.sqrt(weightGradient.mul(weightGradient).add(1e-8)).rdiv(lr).mul(weightGradient);
  INDArray biasGradExpected=Transforms.sqrt(biasGradient.mul(biasGradient).add(1e-8)).rdiv(lr).mul(biasGradient);
  INDArray weightGradActual=gradient.getGradientFor(DefaultParamInitializer.WEIGHT_KEY);
  INDArray biasGradActual=gradient.getGradientFor(DefaultParamInitializer.BIAS_KEY);
  assertEquals(weightGradExpected,weightGradActual);
  assertEquals(biasGradExpected,biasGradActual);
  assertEquals(lr,layer.conf().getLr(),1e-4);
}
