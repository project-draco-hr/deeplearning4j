{
  double lr=0.05;
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().learningRate(lr).layer(new DenseLayer.Builder().nIn(nIn).nOut(nOut).updater(org.deeplearning4j.nn.conf.Updater.SGD).build()).build();
  int numParams=LayerFactories.getFactory(conf).initializer().numParams(conf,true);
  INDArray params=Nd4j.create(1,numParams);
  Layer layer=LayerFactories.getFactory(conf).create(conf,null,0,params);
  Updater updater=UpdaterCreator.getUpdater(layer);
  updater.update(layer,gradient,-1,1);
  Gradient gradientDup=new DefaultGradient();
  gradientDup.setGradientFor(DefaultParamInitializer.WEIGHT_KEY,weightGradient);
  gradientDup.setGradientFor(DefaultParamInitializer.BIAS_KEY,biasGradient);
  for (  Map.Entry<String,INDArray> entry : gradientDup.gradientForVariable().entrySet()) {
    val=entry.getValue();
    gradExpected=val.mul(lr);
    assertEquals(gradExpected,gradient.getGradientFor(entry.getKey()));
  }
  assertEquals(lr,layer.conf().getLayer().getLearningRate(),1e-4);
}
