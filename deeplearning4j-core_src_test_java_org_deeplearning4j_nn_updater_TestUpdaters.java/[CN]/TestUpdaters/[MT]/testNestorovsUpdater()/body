{
  double lr=1e-2;
  double mu=0.6;
  INDArray v, vPrev;
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().learningRate(lr).momentum(mu).layer(new DenseLayer.Builder().nIn(nIn).nOut(nOut).updater(org.deeplearning4j.nn.conf.Updater.NESTEROVS).build()).build();
  int numParams=conf.getLayer().initializer().numParams(conf,true);
  INDArray params=Nd4j.create(1,numParams);
  Layer layer=conf.getLayer().instantiate(conf,null,0,params,true);
  Updater updater=UpdaterCreator.getUpdater(layer);
  int updaterStateSize=updater.stateSizeForLayer(layer);
  INDArray updaterState=Nd4j.create(1,updaterStateSize);
  updater.setStateViewArray(layer,updaterState,true);
  updater.update(layer,gradient,-1,1);
  Gradient gradientDup=new DefaultGradient();
  gradientDup.setGradientFor(DefaultParamInitializer.WEIGHT_KEY,weightGradient.dup());
  gradientDup.setGradientFor(DefaultParamInitializer.BIAS_KEY,biasGradient.dup());
  for (  Map.Entry<String,INDArray> entry : gradientDup.gradientForVariable().entrySet()) {
    val=entry.getValue();
    v=Nd4j.zeros(val.shape());
    vPrev=v;
    v=vPrev.mul(mu).subi(val.mul(lr));
    gradExpected=vPrev.muli(mu).addi(v.mul(-mu - 1));
    assertEquals(gradExpected,gradient.getGradientFor(entry.getKey()));
  }
  assertEquals(mu,layer.conf().getLayer().getMomentum(),1e-4);
}
