{
  DataSet ds=new IrisDataSetIterator(150,150).next();
  ds.normalizeZeroMeanZeroUnitVariance();
  Nd4j.getRandom().setSeed(12345);
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().regularization(false).optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).learningRate(1.0).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).updater(org.deeplearning4j.nn.conf.Updater.SGD).seed(12345L).list().layer(0,new DenseLayer.Builder().nIn(4).nOut(3).activation("sigmoid").build()).layer(1,new OutputLayer.Builder(LossFunctions.LossFunction.MSE).activation("tanh").nIn(3).nOut(3).build()).pretrain(false).backprop(true).build();
  MultiLayerNetwork mln=new MultiLayerNetwork(conf);
  mln.init();
  mln.setInput(ds.getFeatureMatrix());
  mln.setLabels(ds.getLabels());
  mln.computeGradientAndScore();
  for (int j=0; j < 1; j++)   mln.fit(ds);
  mln.computeGradientAndScore();
  double lr0=mln.getLayer(0).conf().getLayer().getLearningRate();
  double lr1=mln.getLayer(1).conf().getLayer().getLearningRate();
  assertEquals(1.0,lr0,0.0);
  assertEquals(1.0,lr1,0.0);
}
