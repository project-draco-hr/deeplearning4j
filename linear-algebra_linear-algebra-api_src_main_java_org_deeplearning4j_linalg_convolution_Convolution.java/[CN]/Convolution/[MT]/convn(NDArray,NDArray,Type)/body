{
  if (kernel.isScalar() && input.isScalar())   return kernel.mul(input);
  DoubleMatrix shape=MatrixUtil.toMatrix(input.shape()).add(MatrixUtil.toMatrix(kernel.shape())).subi(1);
  int[] intShape=MatrixUtil.toInts(shape);
  int[] axes=ArrayUtil.range(0,intShape.length);
  ComplexNDArray fftedInput=FFT.rawfftn(new ComplexNDArray(input),intShape,axes);
  ComplexNDArray fftedKernel=FFT.rawfftn(new ComplexNDArray(kernel),intShape,axes);
  ComplexNDArray inputTimesKernel=fftedInput.muli(fftedKernel);
  ComplexNDArray convolution=FFT.ifftn(inputTimesKernel);
switch (type) {
case FULL:
    return convolution.getReal();
case SAME:
  return ComplexNDArrayUtil.center(convolution,input.shape()).getReal();
case VALID:
return ComplexNDArrayUtil.center(convolution,MatrixUtil.toInts(MatrixUtil.toMatrix(input.shape()).sub(MatrixUtil.toMatrix(kernel.shape())).addi(1))).getReal();
}
return convolution.getReal();
}
