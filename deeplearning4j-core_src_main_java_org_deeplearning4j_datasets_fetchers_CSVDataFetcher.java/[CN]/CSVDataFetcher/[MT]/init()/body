{
  final Set<Integer> labels=new HashSet<>();
  final List<Integer> rowLabels=new ArrayList<>();
  final List<DoubleMatrix> features=new ArrayList<>();
  final AtomicInteger i1=new AtomicInteger(-1);
  csv.read(is,new CSVReadProc(){
    @Override public void procRow(    int rowIndex,    String... values){
      if (values.length < 1)       return;
      if (i1.get() < 1) {
        i1.set(values.length - 1);
        CSVDataFetcher.this.inputColumns=values.length - 1;
      }
 else       if (values.length - 1 != i1.get())       return;
      Pair<DoubleMatrix,Integer> row=processRow(values);
      rowLabels.add(row.getSecond());
      labels.add(row.getSecond());
      features.add(row.getFirst());
    }
  }
);
  List<DataSet> l=new ArrayList<>();
  for (int i=0; i < rowLabels.size(); i++) {
    l.add(new DataSet(features.get(i),MatrixUtil.toOutcomeVector(rowLabels.get(i),rowLabels.size())));
  }
  this.numOutcomes=rowLabels.size();
  all=DataSet.merge(l);
}
