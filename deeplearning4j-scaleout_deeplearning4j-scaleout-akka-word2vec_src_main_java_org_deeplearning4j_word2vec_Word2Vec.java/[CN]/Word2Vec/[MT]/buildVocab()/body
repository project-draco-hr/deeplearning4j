{
  readStopWords();
  if (trainingSystem == null)   trainingSystem=ActorSystem.create();
  final Counter<String> rawVocab=Util.parallelCounter();
  final AtomicLong semaphore=new AtomicLong(System.currentTimeMillis());
  int queued=0;
  final ActorRef vocabActor=trainingSystem.actorOf(new RoundRobinPool(Runtime.getRuntime().availableProcessors()).props(Props.create(VocabActor.class,tokenizerFactory,wordIndex,minWordFrequency,vocab,layerSize,stopWords,rawVocab,semaphore)));
  while (getSentenceIter().hasNext()) {
    String sentence=getSentenceIter().nextSentence();
    if (sentence == null)     continue;
    vocabActor.tell(sentence,vocabActor);
    log.info("Sent " + queued);
    queued++;
  }
  boolean done=false;
  long fiveMinutes=TimeUnit.MINUTES.toMillis(1);
  while (!done) {
    long curr=System.currentTimeMillis();
    long lastChanged=semaphore.get();
    long diff=Math.abs(curr - lastChanged);
    log.info("Waiting on setup...");
    if (diff >= fiveMinutes) {
      done=true;
    }
 else     try {
      Thread.sleep(15000);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
  setup();
}
