{
  if (trainingSystem == null) {
    trainingSystem=ActorSystem.create();
    sentenceReport=trainingSystem.scheduler().schedule(Duration.create(0,TimeUnit.SECONDS),Duration.create(30,TimeUnit.SECONDS),new Runnable(){
      @Override public void run(){
        log.info("Num sentences so far  " + totalWords.totalCount());
      }
    }
,trainingSystem.dispatcher());
  }
  if (stopWords == null)   readStopWords();
  log.info("Training word2vec multithreaded");
  getSentenceIter().reset();
  final AtomicLong changed=new AtomicLong(System.currentTimeMillis());
  trainingSystem.actorOf(new RoundRobinPool(Runtime.getRuntime().availableProcessors() * 3).props(Props.create(new SentenceActor.SentenceActorCreator(this)).withDispatcher("akka.actor.worker-dispatcher")));
  if (syn0.rows != this.vocab.size())   throw new IllegalStateException("We appear to be missing vectors here. Unable to train. Please ensure vectors were loaded properly.");
  while (getSentenceIter().hasNext()) {
    final String sentence=sentenceIter.nextSentence();
    if (sentence != null && !sentence.isEmpty()) {
      Future<Void> f=Futures.future(new Callable<Void>(){
        @Override public Void call() throws Exception {
          processSentence(sentence,totalWords);
          return null;
        }
      }
,trainingSystem.dispatcher());
      f.onComplete(new OnComplete<Void>(){
        @Override public void onComplete(        Throwable arg0,        Void arg1) throws Throwable {
          if (arg0 != null)           throw arg0;
          numSentencesProcessed.incrementAndGet();
          changed.set(System.currentTimeMillis());
        }
      }
,trainingSystem.dispatcher());
    }
  }
  boolean done=false;
  long fiveMinutes=TimeUnit.MINUTES.toMillis(1);
  while (!done) {
    long curr=System.currentTimeMillis();
    long lastChanged=changed.get();
    long diff=Math.abs(curr - lastChanged);
    if (diff >= fiveMinutes) {
      done=true;
    }
 else     try {
      Thread.sleep(15000);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
  log.info("Shutting down system; done training");
  if (sentenceReport != null)   sentenceReport.cancel();
  if (trainingSystem != null)   trainingSystem.shutdown();
}
