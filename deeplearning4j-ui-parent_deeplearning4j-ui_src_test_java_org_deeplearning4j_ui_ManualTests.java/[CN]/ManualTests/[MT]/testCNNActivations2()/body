{
  int nChannels=1;
  int outputNum=10;
  int batchSize=64;
  int nEpochs=10;
  int iterations=1;
  int seed=123;
  log.info("Load data....");
  DataSetIterator mnistTrain=new MnistDataSetIterator(batchSize,true,12345);
  DataSetIterator mnistTest=new MnistDataSetIterator(batchSize,false,12345);
  log.info("Build model....");
  MultiLayerConfiguration.Builder builder=new NeuralNetConfiguration.Builder().seed(seed).iterations(iterations).regularization(true).l2(0.0005).learningRate(0.01).weightInit(WeightInit.XAVIER).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(Updater.NESTEROVS).momentum(0.9).list().layer(0,new ConvolutionLayer.Builder(5,5).nIn(nChannels).stride(1,1).nOut(20).activation("identity").build()).layer(1,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).stride(2,2).build()).layer(2,new ConvolutionLayer.Builder(5,5).stride(1,1).nOut(50).activation("identity").build()).layer(3,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).stride(2,2).build()).layer(4,new DenseLayer.Builder().activation("relu").nOut(500).build()).layer(5,new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nOut(outputNum).activation("softmax").build()).backprop(true).pretrain(false);
  new ConvolutionLayerSetup(builder,28,28,1);
  MultiLayerConfiguration conf=builder.build();
  MultiLayerNetwork model=new MultiLayerNetwork(conf);
  model.init();
  log.info("Train model....");
  model.setListeners(new ConvolutionalIterationListener(1));
  long timeX=System.currentTimeMillis();
  for (int i=0; i < nEpochs; i++) {
    long time1=System.currentTimeMillis();
    model.fit(mnistTrain);
    long time2=System.currentTimeMillis();
    log.info("*** Completed epoch {}, Time elapsed: {} ***",i,(time2 - time1));
  }
  long timeY=System.currentTimeMillis();
  log.info("Evaluate model....");
  Evaluation eval=new Evaluation(outputNum);
  while (mnistTest.hasNext()) {
    DataSet ds=mnistTest.next();
    INDArray output=model.output(ds.getFeatureMatrix(),false);
    eval.eval(ds.getLabels(),output);
  }
  log.info(eval.stats());
  mnistTest.reset();
  log.info("****************Example finished********************");
}
