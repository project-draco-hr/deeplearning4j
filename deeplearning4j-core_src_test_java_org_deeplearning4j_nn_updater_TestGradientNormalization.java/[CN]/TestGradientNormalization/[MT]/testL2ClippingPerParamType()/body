{
  Nd4j.getRandom().setSeed(12345);
  double threshold=3;
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().layer(new DenseLayer.Builder().nIn(10).nOut(20).updater(org.deeplearning4j.nn.conf.Updater.NONE).gradientNormalization(GradientNormalization.ClipL2PerParamType).gradientNormalizationThreshold(threshold).build()).build();
  int numParams=LayerFactories.getFactory(conf).initializer().numParams(conf,true);
  INDArray params=Nd4j.create(1,numParams);
  Layer layer=LayerFactories.getFactory(conf).create(conf,null,0,params);
  Updater updater=UpdaterCreator.getUpdater(layer);
  INDArray weightGrad=Nd4j.rand(10,20).muli(0.05);
  INDArray biasGrad=Nd4j.rand(1,10).muli(10);
  INDArray weightGradCopy=weightGrad.dup();
  INDArray biasGradCopy=biasGrad.dup();
  Gradient gradient=new DefaultGradient();
  gradient.setGradientFor(DefaultParamInitializer.WEIGHT_KEY,weightGrad);
  gradient.setGradientFor(DefaultParamInitializer.BIAS_KEY,biasGrad);
  double weightL2=weightGrad.norm2Number().doubleValue();
  double biasL2=biasGrad.norm2Number().doubleValue();
  assertTrue(weightL2 < threshold);
  assertTrue(biasL2 > threshold);
  updater.update(layer,gradient,0,1);
  assertEquals(weightGradCopy,weightGrad);
  assertNotEquals(biasGradCopy,biasGrad);
  double biasScalingFactor=threshold / biasL2;
  INDArray expectedBiasGrad=biasGradCopy.mul(biasScalingFactor);
  assertEquals(expectedBiasGrad,gradient.getGradientFor(DefaultParamInitializer.BIAS_KEY));
}
