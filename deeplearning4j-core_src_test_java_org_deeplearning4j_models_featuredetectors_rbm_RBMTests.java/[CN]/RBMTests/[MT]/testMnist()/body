{
  MnistDataFetcher fetcher=new MnistDataFetcher(true);
  RandomGenerator gen=new MersenneTwister(123);
  Nd4j.ENFORCE_NUMERICAL_STABILITY=true;
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().iterations(20).constrainGradientToUnitNorm(true).optimizationAlgo(OptimizationAlgorithm.GRADIENT_DESCENT).iterationListener(new ComposableIterationListener(new NeuralNetPlotterIterationListener(10),new ScoreIterationListener(5))).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).rng(gen).learningRate(1e-1f).nIn(784).nOut(600).build();
  fetcher.fetch(1000);
  DataSet d2=fetcher.next();
  INDArray input=d2.getFeatureMatrix();
  LayerFactory layerFactory=LayerFactories.getFactory(RBM.class);
  RBM rbm=layerFactory.create(conf);
  rbm.fit(input);
}
