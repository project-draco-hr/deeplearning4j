{
  MnistDataFetcher fetcher=new MnistDataFetcher(true);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().iterations(100).optimizationAlgo(OptimizationAlgorithm.ITERATION_GRADIENT_DESCENT).iterationListener(new IterationListener(){
    @Override public void iterationDone(    Model model,    int i){
      if (i > 0 && i % 1000 == 0) {
        NeuralNetPlotter plotter=new NeuralNetPlotter();
        Layer l=(Layer)model;
        plotter.plotNetworkGradient(l,l.getGradient(),10);
      }
    }
  }
).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).rng(new MersenneTwister(123)).learningRate(1e-1f).nIn(784).nOut(600).build();
  fetcher.fetch(10);
  DataSet d2=fetcher.next();
  INDArray input=d2.getFeatureMatrix();
  LayerFactory layerFactory=LayerFactories.getFactory(RBM.class);
  RBM rbm=layerFactory.create(conf);
  rbm.fit(input);
}
