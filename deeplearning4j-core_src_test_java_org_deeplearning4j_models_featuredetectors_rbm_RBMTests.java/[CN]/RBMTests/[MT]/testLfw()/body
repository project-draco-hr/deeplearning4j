{
  LFWDataSetIterator iter=new LFWDataSetIterator(10,10,28,28);
  DataSet d=iter.next();
  d.normalizeZeroMeanZeroUnitVariance();
  int nOut=600;
  RandomGenerator rng=new MersenneTwister(123);
  LayerFactory layerFactory=LayerFactories.getFactory(RBM.class);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().hiddenUnit(RBM.HiddenUnit.RECTIFIED).weightInit(WeightInit.VI).constrainGradientToUnitNorm(true).visibleUnit(RBM.VisibleUnit.GAUSSIAN).layerFactory(layerFactory).optimizationAlgo(OptimizationAlgorithm.GRADIENT_DESCENT).lossFunction(LossFunctions.LossFunction.XENT).rng(rng).iterationListener(new IterationListener(){
    @Override public void iterationDone(    Model model,    int iteration){
      if (iteration > 0 && iteration % 100 == 0) {
        NeuralNetPlotter plotter=new NeuralNetPlotter();
        Layer l=(Layer)model;
        plotter.plotNetworkGradient(l,l.getGradient(),10);
      }
    }
  }
).learningRate(1e-1f).nIn(d.numInputs()).nOut(nOut).build();
  RBM rbm=layerFactory.create(conf);
  rbm.fit(d.getFeatureMatrix());
}
