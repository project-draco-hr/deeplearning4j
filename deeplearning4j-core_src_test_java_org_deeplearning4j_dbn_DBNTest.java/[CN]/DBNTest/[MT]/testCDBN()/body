{
  DoubleMatrix x=new DoubleMatrix(new double[][]{{0.4,0.5,0.5,0.,0.,0.},{0.5,0.3,0.5,0.,0.,0.},{0.4,0.5,0.5,0.,0.,0.},{0.,0.,0.5,0.3,0.5,0.},{0.,0.,0.5,0.4,0.5,0.},{0.,0.,0.5,0.5,0.5,0.}});
  x=MatrixUtil.normalizeByRowSums(x);
  DoubleMatrix y=new DoubleMatrix(new double[][]{{1,0},{1,0},{1,0},{0,1},{0,1},{0,1}});
  RandomGenerator rng=new MersenneTwister(123);
  double preTrainLr=0.0001;
  int preTrainEpochs=10000;
  int k=1;
  int nIns=6, nOuts=2;
  int[] hiddenLayerSizes=new int[]{5,4,3};
  double fineTuneLr=0.001;
  int fineTuneEpochs=1000;
  CDBN dbn=new CDBN.Builder().useAdGrad(true).numberOfInputs(nIns).numberOfOutPuts(nOuts).hiddenLayerSizes(hiddenLayerSizes).useRegularization(false).withRng(rng).build();
  dbn.pretrain(x,k,preTrainLr,preTrainEpochs);
  dbn.finetune(y,fineTuneLr,fineTuneEpochs);
  DoubleMatrix testX=new DoubleMatrix(new double[][]{{0.5,0.5,0.,0.,0.,0.},{0.,0.,0.,0.5,0.5,0.},{0.5,0.5,0.5,0.5,0.5,0.}});
  Evaluation eval=new Evaluation();
  eval.eval(y,dbn.predict(x));
  log.info(eval.stats());
}
