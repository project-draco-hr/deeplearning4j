{
  RandomGenerator rng=new MersenneTwister(123);
  double preTrainLr=0.1;
  int preTrainEpochs=10000;
  int k=1;
  int nIns=4, nOuts=3;
  int[] hiddenLayerSizes=new int[]{3};
  double fineTuneLr=0.1;
  int fineTuneEpochs=10000;
  CDBN dbn=new CDBN.Builder().useAdGrad(true).numberOfInputs(nIns).numberOfOutPuts(nOuts).withActivation(new Sigmoid()).hiddenLayerSizes(hiddenLayerSizes).useRegularization(false).withRng(rng).build();
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  DataSet next=iter.next(150);
  next.shuffle();
  List<DataSet> finetuneBatches=next.dataSetBatches(10);
  DataSetIterator sampling=new SamplingDataSetIterator(next,150,3000);
  List<DataSet> miniBatches=new ArrayList<DataSet>();
  while (sampling.hasNext()) {
    next=sampling.next();
    miniBatches.add(next.copy());
  }
  log.info("Training on " + miniBatches.size() + " minibatches");
  dbn.pretrain(next.getFirst(),k,preTrainLr,preTrainEpochs);
  dbn.finetune(next.getSecond(),fineTuneLr,fineTuneEpochs);
  sampling=new SamplingDataSetIterator(next,10,3000);
  miniBatches.clear();
  while (sampling.hasNext()) {
    next=sampling.next();
    miniBatches.add(next.copy());
  }
  Evaluation eval=new Evaluation();
  for (int i=0; i < miniBatches.size(); i++) {
    DataSet test=miniBatches.get(i);
    DoubleMatrix predicted=dbn.predict(test.getFirst());
    DoubleMatrix real=test.getSecond();
    eval.eval(real,predicted);
  }
  log.info("Evaled " + eval.stats());
}
