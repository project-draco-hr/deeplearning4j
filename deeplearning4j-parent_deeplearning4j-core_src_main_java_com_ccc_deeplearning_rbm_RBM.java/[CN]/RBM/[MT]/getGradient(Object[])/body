{
  int k=(int)params[0];
  double learningRate=(double)params[1];
  Pair<DoubleMatrix,DoubleMatrix> probHidden=sampleHiddenGivenVisible(input);
  DoubleMatrix chainStart=probHidden.getSecond();
  Pair<Pair<DoubleMatrix,DoubleMatrix>,Pair<DoubleMatrix,DoubleMatrix>> matrices=null;
  DoubleMatrix nvMeans=null;
  DoubleMatrix nvSamples=null;
  DoubleMatrix nhMeans=null;
  DoubleMatrix nhSamples=null;
  for (int i=0; i < k; i++) {
    if (i == 0)     matrices=gibbhVh(chainStart);
 else     matrices=gibbhVh(nhSamples);
    nvMeans=matrices.getFirst().getFirst();
    nvSamples=matrices.getFirst().getSecond();
    nhMeans=matrices.getSecond().getFirst();
    nhSamples=matrices.getSecond().getSecond();
  }
  DoubleMatrix wGradient=input.transpose().mmul(probHidden.getSecond()).sub(nvSamples.transpose().mmul(nhMeans)).mul(learningRate).mul(momentum);
  if (useRegularization)   wGradient.subi(W.muli(l2));
  wGradient.divi(input.rows);
  DoubleMatrix vBiasGradient=mean(input.sub(nvSamples),0).mul(learningRate);
  DoubleMatrix hBiasGradient=mean(probHidden.getSecond().sub(nhMeans),0).mul(learningRate);
  return new NeuralNetworkGradient(wGradient,vBiasGradient,hBiasGradient);
}
