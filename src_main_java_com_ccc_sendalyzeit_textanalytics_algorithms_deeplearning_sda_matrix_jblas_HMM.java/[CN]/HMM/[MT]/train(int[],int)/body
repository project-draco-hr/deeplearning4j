{
  int T=o.length;
  double[][] fwd;
  double[][] bwd;
  double pi1[]=new double[numStates];
  double a1[][]=new double[numStates][numStates];
  double b1[][]=new double[numStates][sigmaSize];
  for (int s=0; s < steps; s++) {
    fwd=forwardProc(o);
    bwd=backwardProc(o);
    for (int i=0; i < numStates; i++)     pi1[i]=gamma(i,0,o,fwd,bwd);
    for (int i=0; i < numStates; i++) {
      for (int j=0; j < numStates; j++) {
        double num=0;
        double denom=0;
        for (int t=0; t <= T - 1; t++) {
          num+=p(t,i,j,o,fwd,bwd);
          denom+=gamma(i,t,o,fwd,bwd);
        }
        a1[i][j]=divide(num,denom);
      }
    }
    for (int i=0; i < numStates; i++) {
      for (int k=0; k < sigmaSize; k++) {
        double num=0;
        double denom=0;
        for (int t=0; t <= T - 1; t++) {
          double g=gamma(i,t,o,fwd,bwd);
          num+=g * (k == o[t] ? 1 : 0);
          denom+=g;
        }
        b1[i][k]=divide(num,denom);
      }
    }
    pi=pi1;
    a=a1;
    b=b1;
  }
}
