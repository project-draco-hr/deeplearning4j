{
  GraphHuffman gh=new GraphHuffman(7);
  int[] vertexDegrees={10,15,12,3,4,13,1};
  gh.buildTree(vertexDegrees);
  for (int i=0; i < 7; i++)   System.out.println(i + "\t" + gh.getCodeLength(i)+ "\t"+ gh.getCodeString(i)+ "\t\t"+ gh.getCode(i)+ "\t\t"+ Arrays.toString(gh.getPathInnerNodes(i)));
  int[] expectedLengths={3,2,2,5,4,2,5};
  for (int i=0; i < vertexDegrees.length; i++) {
    assertEquals(expectedLengths[i],gh.getCodeLength(i));
  }
  Set<String> codeSet=new HashSet<>();
  for (int i=0; i < 7; i++) {
    String code=gh.getCodeString(i);
    assertFalse(codeSet.contains(code));
    codeSet.add(code);
  }
  for (int i=0; i < 7; i++) {
    String code=gh.getCodeString(i);
    for (int j=i + 1; j < 7; j++) {
      String codeOther=gh.getCodeString(j);
      if (code.length() == codeOther.length()) {
        assertNotEquals(code,codeOther);
      }
 else       if (code.length() < codeOther.length()) {
        assertNotEquals(code,codeOther.substring(0,code.length()));
      }
 else {
        assertNotEquals(codeOther,code.substring(0,codeOther.length()));
      }
    }
  }
}
