{
  int nCols=input.columns();
  int rows=input.rows();
  Tensor ret=Tensor.zeros(rows,nCols,input.slices());
  for (int i=0; i < Math.ceil(nCols / stride[0]); i++) {
    int rowsMin=i * stride[0] + 1;
    int rowsMax=(i + 1) * stride[0];
    for (int j=0; j < Math.ceil(nCols / stride[1]); j++) {
      int cols=j * stride[1] + 1;
      int colsMax=(j + 1) * stride[1];
      double blockVal=input.columnsSums().sum();
      int rowLength=rowsMax - rowsMin;
      int colLength=colsMax - cols;
      DoubleMatrix block=new DoubleMatrix(rowLength,colLength);
      MatrixUtil.assign(block,blockVal);
      ret.put(RangeUtils.interval(rowsMin,rowsMax),RangeUtils.interval(cols,colsMax),block);
    }
  }
  return ret;
}
