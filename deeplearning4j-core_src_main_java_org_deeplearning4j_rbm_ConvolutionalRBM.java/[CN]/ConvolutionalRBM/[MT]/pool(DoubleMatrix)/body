{
  DoubleMatrix active=exp(hidden.transpose());
  DoubleMatrix pool=zeros(active.rows,active.columns);
  int maxColumn=(int)Math.ceil(poolColumns / hidden.columns);
  for (int j=0; j < maxColumn; j++) {
    int beginColumnSlice=j * poolColumns;
    int endColumnSlice=(j + 1) * poolColumns;
    int maxRow=(int)Math.ceil(poolRows / hidden.rows);
    for (int i=0; i < maxRow; i++) {
      int beginRowSlice=i * poolRows;
      int endRowSlice=(i + 1) * poolRows;
      DoubleMatrix subSlice=active.get(new int[]{beginRowSlice,endRowSlice},new int[]{beginColumnSlice,endColumnSlice}).rowSums().rowSums();
      pool.put(new int[]{beginRowSlice,endRowSlice},new int[]{beginColumnSlice,endColumnSlice},subSlice);
    }
  }
  return pool.transpose();
}
