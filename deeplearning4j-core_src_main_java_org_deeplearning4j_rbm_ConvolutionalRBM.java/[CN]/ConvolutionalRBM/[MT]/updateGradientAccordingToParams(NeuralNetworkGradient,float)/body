{
  INDArray wGradient=gradient.getwGradient();
  INDArray hBiasGradient=gradient.gethBiasGradient();
  INDArray vBiasGradient=gradient.getvBiasGradient();
  INDArray wLearningRates=wAdaGrad.getLearningRates(wGradient);
  if (useAdaGrad)   wGradient.muli(wLearningRates);
 else   wGradient.muli(learningRate);
  if (useAdaGrad)   hBiasGradient=hBiasGradient.mul(hBiasAdaGrad.getLearningRates(hBiasGradient)).add(hBiasGradient.mul(momentum));
 else   hBiasGradient=hBiasGradient.mul(learningRate).add(hBiasGradient.mul(momentum));
  if (useAdaGrad)   vBiasGradient=vBiasGradient.mul(vBiasAdaGrad.getLearningRates(vBiasGradient)).add(vBiasGradient.mul(momentum));
 else   vBiasGradient=vBiasGradient.mul(learningRate).add(vBiasGradient.mul(momentum));
  if (applySparsity && this.hBiasGradient != null)   applySparsity(hBiasGradient,learningRate);
  if (momentum != 0 && this.wGradient != null)   wGradient.addi(this.wGradient.mul(momentum).add(wGradient.mul(1 - momentum)));
  if (momentum != 0 && this.vBiasGradient != null)   vBiasGradient.addi(this.vBiasGradient.mul(momentum).add(vBiasGradient.mul(1 - momentum)));
  if (momentum != 0 && this.hBiasGradient != null)   hBiasGradient.addi(this.hBiasGradient.mul(momentum).add(hBiasGradient.mul(1 - momentum)));
  if (useRegularization) {
    if (l2 > 0) {
      INDArray penalized=W.mul(l2);
      if (useAdaGrad)       penalized.muli(wAdaGrad.getLearningRates(wGradient));
 else       penalized.muli(learningRate);
      wGradient.subi(penalized);
    }
  }
  if (normalizeByInputRows) {
    wGradient.divi(lastMiniBatchSize);
    vBiasGradient.divi(lastMiniBatchSize);
    hBiasGradient.divi(lastMiniBatchSize);
  }
  this.wGradient=wGradient;
  this.vBiasGradient=vBiasGradient;
  this.hBiasGradient=hBiasGradient;
}
