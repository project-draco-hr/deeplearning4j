{
  FourDTensor eHid=propUp(input);
  FourDTensor I=new FourDTensor(eHid.rows(),eHid.columns(),eHid.slices(),eHid.getNumTensor());
  for (int i=0; i < W.slices(); i++) {
    for (int j=0; j < W.getNumTensor(); j++) {
      I.setSlice(i,Convolution.conv2d(input,reverse(W.getSlice(i)),VALID).add(hBias.get(i)));
      I.put(j,i,Convolution.conv2d(input,reverse(W.getSlice(i)),VALID).add(hBias.get(i)));
    }
  }
  FourDTensor ret=FourDTensor.ones(I.rows(),I.columns(),I.slices(),I.numTensors());
  FourDTensor poolExpI=pool(MatrixUtil.exp(I)).add(1);
  FourDTensor sub=ret.div((DoubleMatrix)poolExpI);
  ret.subi(sub);
  return ret;
}
