{
  if (training && conf.getLayer().getDropOut() > 0) {
    Dropout.applyDropout(input,conf.getLayer().getDropOut());
  }
  int miniBatch=input.size(0);
  int inDepth=input.size(1);
  int inH=input.size(2);
  int inW=input.size(3);
  int[] kernel=layerConf().getKernelSize();
  int[] strides=layerConf().getStride();
  int[] pad=layerConf().getPadding();
  int outH=Convolution.outSize(inH,kernel[0],strides[0],pad[0],false);
  int outW=Convolution.outSize(inW,kernel[1],strides[1],pad[1],false);
  INDArray col=Nd4j.create(new int[]{miniBatch,inDepth,outH,outW,kernel[0],kernel[1]},'c');
  INDArray col2=col.permute(0,1,4,5,2,3);
  Convolution.im2col(input,kernel[0],kernel[1],strides[0],strides[1],pad[0],pad[1],false,col2);
  INDArray col2d=col.reshape('c',miniBatch * inDepth * outH* outW,kernel[0] * kernel[1]);
  INDArray reduced;
switch (layerConf().getPoolingType()) {
case AVG:
    reduced=col2d.mean(1);
  break;
case MAX:
reduced=col2d.max(1);
break;
case NONE:
return input;
default :
throw new IllegalStateException("Unknown/not supported pooling type: " + layerConf().getPoolingType());
}
return reduced.reshape('c',miniBatch,inDepth,outH,outW);
}
