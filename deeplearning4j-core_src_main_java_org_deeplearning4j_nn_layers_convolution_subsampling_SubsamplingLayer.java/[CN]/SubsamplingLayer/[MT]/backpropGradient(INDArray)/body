{
  int inputHeight=input().size(-2);
  int inputWidth=input().size(-1);
  INDArray reshapeEpsilon, retE, reshaped;
  Gradient retGradient=new DefaultGradient();
switch (layerConf().getPoolingType()) {
case MAX:
    INDArray im2col=Convolution.im2col(input,layerConf().getKernelSize(),layerConf().getStride(),layerConf().getPadding());
  int[] s6d=im2col.shape();
INDArray im2col5d=im2col.reshape(im2col.ordering(),s6d[0],s6d[1],s6d[2] * s6d[3],s6d[4],s6d[5]);
Nd4j.getExecutioner().exec(new IsMax(im2col5d,2));
Nd4j.getExecutioner().exec(new BroadcastMulOp(im2col5d,epsilon,im2col5d,0,1,3,4));
INDArray outEpsilon=Convolution.col2im(im2col,layerConf().getStride(),layerConf().getPadding(),inputHeight,inputWidth);
return new Pair<>(retGradient,outEpsilon);
case AVG:
retE=epsilon.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.newAxis(),NDArrayIndex.newAxis());
reshapeEpsilon=Nd4j.tile(retE,1,1,layerConf().getKernelSize()[0],layerConf().getKernelSize()[1],1,1);
reshapeEpsilon=Convolution.col2im(reshapeEpsilon,layerConf().getStride(),layerConf().getPadding(),inputHeight,inputWidth);
reshapeEpsilon.divi(ArrayUtil.prod(layerConf().getKernelSize()));
return new Pair<>(retGradient,reshapeEpsilon);
case NONE:
return new Pair<>(retGradient,epsilon);
default :
throw new IllegalStateException("Unsupported pooling type");
}
}
