{
  Gradient ret=new DefaultGradient();
  int height=epsilon.size(-2);
  int width=epsilon.size(-1);
switch (conf.getPoolingType()) {
case MAX:
    int n=epsilon.size(0);
  int c=epsilon.size(1);
int outH=epsilon.size(2);
int outW=epsilon.size(3);
INDArray ret2=Nd4j.zeros(n,c,conf.getKernelSize()[0],conf.getKernelSize()[1],outH,outW);
INDArray reverse=Nd4j.rollAxis(ret2.reshape(n,c,-1,outH,outW),2);
Iterator<int[]> iter=new NdIndexIterator(n,c,outH,outW);
while (iter.hasNext()) {
int[] next=iter.next();
INDArrayIndex[] indexes=NDArrayIndex.indexesFor(next);
reverse.get(indexes).put(indexes,epsilon.get(indexes));
}
INDArray finalRet=Convolution.col2im(ret2,conf.getStride(),conf.getPadding(),height,width);
ret.gradientForVariable().put(ConvolutionParamInitializer.WEIGHT_KEY,finalRet);
return new Pair<>(ret,finalRet);
case AVG:
INDArray subError=epsilon.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.newAxis(),NDArrayIndex.newAxis(),NDArrayIndex.newAxis());
INDArray tiled=Nd4j.tile(subError,1,1,conf.getKernelSize()[0],conf.getKernelSize()[1],1,1);
INDArray convolution=Convolution.col2im(tiled,conf.getStride(),conf.getPadding(),height,width);
convolution.divi(ArrayUtil.prod(conf.getKernelSize()));
if (convolution.rank() < 4) convolution=convolution.reshape(Ints.concat(new int[]{1},convolution.shape()));
ret.gradientForVariable().put(ConvolutionParamInitializer.WEIGHT_KEY,convolution);
return new Pair<>(ret,convolution);
case NONE:
return new Pair<>(gradient,epsilon);
default :
throw new IllegalStateException("Un supported pooling type");
}
}
