{
  DataSetIterator iterator;
  if (prefetchSize > 0 && (!(source instanceof AsyncDataSetIterator) && !(source instanceof ListDataSetIterator))) {
    iterator=new AsyncDataSetIterator(source,prefetchSize);
  }
 else   iterator=source;
  AtomicInteger locker=new AtomicInteger(0);
  iterator.reset();
  while (iterator.hasNext()) {
    DataSet dataSet=iterator.next();
    int pos=locker.getAndIncrement();
    zoo[pos].feedDataSet(dataSet);
    if (pos + 1 == workers || !iterator.hasNext()) {
      iterationsCounter.incrementAndGet();
      for (int cnt=0; cnt < workers && cnt < locker.get(); cnt++) {
        try {
          zoo[cnt].waitTillRunning();
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
      if (iterationsCounter.get() % averagingFrequency == 0 || !iterator.hasNext()) {
        double score=0.0;
        List<INDArray> params=new ArrayList<>();
        for (int cnt=0; cnt < workers && cnt < locker.get(); cnt++) {
          params.add(zoo[cnt].getModel().params());
          score+=zoo[cnt].getModel().score();
        }
        Nd4j.averageAndPropagate(model.params(),params);
        score/=Math.min(workers,locker.get());
        if (reportScore)         logger.info("Averaged score: " + score);
        if (model instanceof MultiLayerNetwork) {
          if (averageUpdaters) {
            Updater updater=((MultiLayerNetwork)zoo[0].getModel()).getUpdater();
            if (updater != null && updater.getStateViewArray() != null) {
              List<INDArray> updaters=new ArrayList<>();
              for (int cnt=0; cnt < workers && cnt < locker.get(); cnt++) {
                updaters.add(((MultiLayerNetwork)zoo[cnt].getModel()).getUpdater().getStateViewArray());
              }
              Nd4j.averageAndPropagate(updater.getStateViewArray(),updaters);
            }
          }
          ((MultiLayerNetwork)model).setScore(score);
        }
 else         if (model instanceof ComputationGraph) {
          if (averageUpdaters) {
            ComputationGraphUpdater updater=((ComputationGraph)zoo[0].getModel()).getUpdater();
            if (updater != null && updater.getStateViewArray() != null) {
              List<INDArray> updaters=new ArrayList<>();
              for (int cnt=0; cnt < workers && cnt < locker.get(); cnt++) {
                updaters.add(((ComputationGraph)zoo[cnt].getModel()).getUpdater().getStateViewArray());
              }
              Nd4j.averageAndPropagate(updater.getStateViewArray(),updaters);
            }
          }
          ((ComputationGraph)model).setScore(score);
        }
      }
      locker.set(0);
    }
  }
}
