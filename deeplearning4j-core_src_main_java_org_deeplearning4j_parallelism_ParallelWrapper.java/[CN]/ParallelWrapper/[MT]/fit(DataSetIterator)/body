{
  DataSetIterator iterator;
  if (prefetchSize > 0 && (!(source instanceof AsyncDataSetIterator) && !(source instanceof ListDataSetIterator))) {
    iterator=new AsyncDataSetIterator(source,prefetchSize);
  }
 else   iterator=source;
  AtomicInteger locker=new AtomicInteger(0);
  iterator.reset();
  while (iterator.hasNext()) {
    DataSet dataSet=iterator.next();
    int pos=locker.getAndIncrement();
    zoo[pos].feedDataSet(dataSet);
    if (pos + 1 == workers || !iterator.hasNext()) {
      iterationsCounter.incrementAndGet();
      for (int cnt=0; cnt < workers && cnt < locker.get(); cnt++) {
        try {
          zoo[cnt].waitTillRunning();
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
      if (iterationsCounter.get() % averagingFrequency == 0 || !iterator.hasNext()) {
        double score=0.0;
        List<INDArray> params=new ArrayList<>();
        for (int cnt=0; cnt < workers && cnt < locker.get(); cnt++) {
          params.add(zoo[cnt].getModel().params());
          score+=zoo[cnt].getModel().score();
        }
        Nd4j.averageAndPropagate(model.params(),params);
        score/=Math.min(workers,locker.get());
        if (reportScore)         logger.info("Averaged score: " + score);
        if (model instanceof MultiLayerNetwork) {
          Updater updater=((MultiLayerNetwork)zoo[0].getModel()).getUpdater();
          INDArray updaterState=Nd4j.zeros(updater.getStateViewArray().shape());
          for (int cnt=0; cnt < workers && cnt < locker.get(); cnt++) {
            Updater u=((MultiLayerNetwork)zoo[cnt].getModel()).getUpdater();
            INDArray updaterView=u.getStateViewArray();
            updaterState.addi(updaterView);
          }
          updaterState.divi(Math.min(workers,locker.get()));
          ((MultiLayerNetwork)model).getUpdater().setStateViewArray((Layer)model,updaterState,false);
          ((MultiLayerNetwork)model).setScore(score);
        }
 else         if (model instanceof ComputationGraph) {
          ComputationGraphUpdater updater=((ComputationGraph)zoo[0].getModel()).getUpdater();
          INDArray updaterState=Nd4j.zeros(updater.getStateViewArray().shape());
          for (int cnt=0; cnt < workers && cnt < locker.get(); cnt++) {
            ComputationGraphUpdater u=((ComputationGraph)zoo[cnt].getModel()).getUpdater();
            INDArray updaterView=u.getStateViewArray();
            updaterState.addi(updaterView);
          }
          updaterState.divi(Math.min(workers,locker.get()));
          ((ComputationGraph)model).getUpdater().setStateViewArray(updaterState);
          ((ComputationGraph)model).setScore(score);
        }
        for (int i=0; i < workers; i++) {
          zoo[i].updateModel(model);
        }
      }
      locker.set(0);
    }
  }
}
