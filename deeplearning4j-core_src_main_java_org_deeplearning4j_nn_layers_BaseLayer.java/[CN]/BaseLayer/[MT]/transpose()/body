{
  if (!(conf.getLayer() instanceof org.deeplearning4j.nn.conf.layers.FeedForwardLayer))   throw new UnsupportedOperationException("unsupported layer type: " + conf.getLayer().getClass().getName());
  INDArray w=getParam(DefaultParamInitializer.WEIGHT_KEY);
  INDArray b=getParam(DefaultParamInitializer.BIAS_KEY);
  Layer layer;
  try {
    NeuralNetConfiguration clone=conf.clone();
    org.deeplearning4j.nn.conf.layers.FeedForwardLayer clonedLayerConf=(org.deeplearning4j.nn.conf.layers.FeedForwardLayer)clone.getLayer();
    int nIn=clonedLayerConf.getNOut();
    int nOut=clonedLayerConf.getNIn();
    clonedLayerConf.setNIn(nIn);
    clonedLayerConf.setNOut(nOut);
    layer=LayerFactories.getFactory(clone).create(clone,iterationListeners,this.index,paramsFlattened.dup());
    layer.setParam(DefaultParamInitializer.WEIGHT_KEY,w.transpose().dup());
    layer.setParam(DefaultParamInitializer.BIAS_KEY,b.dup());
  }
 catch (  Exception e) {
    throw new RuntimeException("unable to construct transposed layer",e);
  }
  return layer;
}
