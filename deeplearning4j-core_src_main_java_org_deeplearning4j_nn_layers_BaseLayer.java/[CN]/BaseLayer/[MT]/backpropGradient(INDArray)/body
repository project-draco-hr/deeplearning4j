{
  INDArray z=preOutput(true);
  INDArray activationDerivative=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf().getLayer().getActivationFunction(),z).derivative());
  INDArray delta=epsilon.muli(activationDerivative);
  if (maskArray != null) {
    delta.muliColumnVector(maskArray);
  }
  Gradient ret=new DefaultGradient();
  INDArray weightGrad=gradientViews.get(DefaultParamInitializer.WEIGHT_KEY);
  Nd4j.gemm(input,delta,weightGrad,true,false,1.0,0.0);
  INDArray biasGrad=gradientViews.get(DefaultParamInitializer.BIAS_KEY);
  biasGrad.assign(delta.sum(0));
  ret.gradientForVariable().put(DefaultParamInitializer.WEIGHT_KEY,weightGrad);
  ret.gradientForVariable().put(DefaultParamInitializer.BIAS_KEY,biasGrad);
  INDArray epsilonNext=params.get(DefaultParamInitializer.WEIGHT_KEY).mmul(delta.transpose()).transpose();
  return new Pair<>(ret,epsilonNext);
}
