{
  if (lookupTable instanceof InMemoryLookupTable) {
    InMemoryLookupTable l=(InMemoryLookupTable)lookupTable;
    INDArray syn0=l.getSyn0();
    if (!normalized) {
      syn0.diviColumnVector(syn0.norm2(1));
      normalized=true;
    }
    INDArray similarity=Transforms.unitVec(words).mmul(syn0.transpose());
    List<Double> highToLowSimList=getTopN(similarity,top + 20);
    List<String> ret=new ArrayList<>();
    for (int i=0; i < highToLowSimList.size(); i++) {
      String word=vocabCache.wordAtIndex(highToLowSimList.get(i).intValue());
      if (word != null && !word.equals("UNK") && !word.equals("STOP")) {
        ret.add(word);
        if (ret.size() >= top) {
          break;
        }
      }
    }
    return ret;
  }
  Counter<String> distances=new Counter<>();
  for (  String s : vocabCache.words()) {
    INDArray otherVec=lookupTable.vector(s);
    double sim=Transforms.cosineSim(words,otherVec);
    distances.incrementCount(s,sim);
  }
  distances.keepTopNKeys(top);
  return distances.keySet();
}
