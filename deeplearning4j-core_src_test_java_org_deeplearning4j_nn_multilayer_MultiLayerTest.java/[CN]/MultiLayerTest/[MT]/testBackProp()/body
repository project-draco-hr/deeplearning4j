{
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).iterations(10).weightInit(WeightInit.NORMALIZED).activationFunction("sigmoid").nIn(4).nOut(3).layer(new org.deeplearning4j.nn.conf.layers.RBM()).list(3).backward(true).pretrain(false).hiddenLayerSizes(new int[]{3,2}).override(2,new ConfOverride(){
    @Override public void overrideLayer(    int i,    NeuralNetConfiguration.Builder builder){
      builder.activationFunction("softmax");
      builder.layer(new org.deeplearning4j.nn.conf.layers.OutputLayer());
      builder.lossFunction(LossFunctions.LossFunction.MCXENT);
    }
  }
).build();
  MultiLayerNetwork network=new MultiLayerNetwork(conf);
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  DataSet next=iter.next();
  next.normalizeZeroMeanZeroUnitVariance();
  SplitTestAndTrain trainTest=next.splitTestAndTrain(110);
  network.setInput(trainTest.getTrain().getFeatureMatrix());
  network.setLabels(trainTest.getTrain().getLabels());
  network.fit(trainTest.getTrain());
  DataSet test=trainTest.getTest();
  Evaluation eval=new Evaluation();
  INDArray output=network.output(test.getFeatureMatrix());
  eval.eval(test.getLabels(),output);
  log.info("Score " + eval.stats());
}
