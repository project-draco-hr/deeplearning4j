{
  int miniBatch=3;
  int depth=2;
  int width=3;
  int height=3;
  int nOut=2;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().regularization(false).learningRate(1.0).seed(12345L).list().layer(0,new ConvolutionLayer.Builder(2,2).nOut(1).build()).layer(1,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation("softmax").nOut(2).build()).setInputType(InputType.convolutionalFlat(height,width,depth)).pretrain(false).backprop(true).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  Nd4j.getRandom().setSeed(12345);
  Random r=new Random(12345);
  INDArray input=Nd4j.rand(miniBatch,depth * width * height);
  INDArray labels=Nd4j.create(miniBatch,nOut);
  for (int i=0; i < miniBatch; i++) {
    labels.putScalar(new int[]{i,r.nextInt(nOut)},1.0);
  }
  double score=net.score(new DataSet(input,labels));
}
