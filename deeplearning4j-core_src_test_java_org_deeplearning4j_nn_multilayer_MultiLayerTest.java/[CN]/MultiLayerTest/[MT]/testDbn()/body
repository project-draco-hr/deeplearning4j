{
  LayerFactory layerFactory=LayerFactories.getFactory(RBM.class);
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.LBFGS).nIn(4).nOut(3).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layerFactory(layerFactory).list(3).hiddenLayerSizes(new int[]{3,2}).override(new NeuralNetConfiguration.ConfOverride(){
    @Override public void override(    int i,    NeuralNetConfiguration.Builder builder){
      if (i == 2) {
        builder.layerFactory(new DefaultLayerFactory(OutputLayer.class));
        builder.activationFunction(Activations.softMaxRows());
        builder.lossFunction(LossFunctions.LossFunction.MCXENT);
      }
    }
  }
).build();
  MultiLayerNetwork network=new MultiLayerNetwork(conf);
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  DataSet next=iter.next();
  SplitTestAndTrain trainTest=next.splitTestAndTrain(110);
  trainTest.getTrain().normalizeZeroMeanZeroUnitVariance();
  network.fit(trainTest.getTrain());
  DataSet test=trainTest.getTest();
  test.normalizeZeroMeanZeroUnitVariance();
  Evaluation eval=new Evaluation();
  INDArray output=network.output(test.getFeatureMatrix());
  eval.eval(test.getLabels(),output);
  log.info("Score " + eval.stats());
}
