{
  int nIn=10;
  int nOut=40;
  List<String> layerNameList=new ArrayList<>();
  layerNameList.add("dnn1");
  layerNameList.add("dnn2");
  layerNameList.add("dnn3");
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().updater(org.deeplearning4j.nn.conf.Updater.SGD).learningRate(0.1).list().layer(0,new DenseLayer.Builder().name("dnn1").nIn(nIn).nOut(20).activation("relu").weightInit(WeightInit.XAVIER).build()).layer(1,new DenseLayer.Builder().name("dnn2").nIn(20).nOut(30).activation("relu").weightInit(WeightInit.XAVIER).build()).layer(2,new DenseLayer.Builder().name("dnn3").nIn(30).nOut(nOut).activation("softmax").weightInit(WeightInit.XAVIER).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  assertEquals(layerNameList.get(0),net.getLayer(0).conf().getLayer().getLayerName());
  assertEquals(layerNameList,net.getLayerNames());
  assertEquals("softmax",net.getLayer(layerNameList.get(2)).conf().getLayer().getActivationFunction());
}
