{
  DataSetIterator iter=new LFWDataSetIterator(28,28);
  DataSet next=iter.next();
  next.normalizeZeroMeanZeroUnitVariance();
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).constrainGradientToUnitNorm(true).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1e-5)).iterations(10).learningRate(1e-3).lossFunction(LossFunctions.LossFunction.RMSE_XENT).nIn(next.numInputs()).nOut(next.numOutcomes()).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layer(new RBM()).list(4).hiddenLayerSizes(600,250,100).override(3,new ClassifierOverride()).build();
  MultiLayerNetwork network=new MultiLayerNetwork(conf);
  network.init();
  network.setListeners(Arrays.<IterationListener>asList(new ScoreIterationListener(10)));
  network.fit(next);
}
