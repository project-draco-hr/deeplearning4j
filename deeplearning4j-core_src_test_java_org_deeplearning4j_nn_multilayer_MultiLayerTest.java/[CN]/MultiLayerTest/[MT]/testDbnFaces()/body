{
  Nd4j.dtype=DataBuffer.DOUBLE;
  LayerFactory layerFactory=LayerFactories.getFactory(RBM.class);
  DataSetIterator iter=new LFWDataSetIterator(28,28);
  DataSet next=iter.next();
  next.normalizeZeroMeanZeroUnitVariance();
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).constrainGradientToUnitNorm(true).weightInit(WeightInit.DISTRIBUTION).dist(Distributions.normal(new MersenneTwister(123),1e-5)).iterations(100).learningRate(1e-3).iterationListener(new ScoreIterationListener(10)).nIn(next.numInputs()).nOut(next.numOutcomes()).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layerFactory(layerFactory).list(4).hiddenLayerSizes(600,250,100).override(new NeuralNetConfiguration.ConfOverride(){
    @Override public void override(    int i,    NeuralNetConfiguration.Builder builder){
      if (i == 3) {
        builder.layerFactory(new DefaultLayerFactory(OutputLayer.class));
        builder.activationFunction(Activations.softMaxRows());
        builder.lossFunction(LossFunctions.LossFunction.MCXENT);
      }
    }
  }
).build();
  MultiLayerNetwork network=new MultiLayerNetwork(conf);
  network.fit(next);
}
