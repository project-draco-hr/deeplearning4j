{
  IrisDataFetcher fetcher=new IrisDataFetcher();
  fetcher.fetch(150);
  DataSet d=fetcher.next();
  d.normalizeZeroMeanZeroUnitVariance();
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().lossFunction(LossFunctions.LossFunction.RMSE_XENT).visibleUnit(org.deeplearning4j.nn.conf.layers.RBM.VisibleUnit.GAUSSIAN).hiddenUnit(org.deeplearning4j.nn.conf.layers.RBM.HiddenUnit.RECTIFIED).learningRate(1e-1f).nIn(d.numInputs()).nOut(3).iterations(2).layer(new org.deeplearning4j.nn.conf.layers.RBM()).list(3).hiddenLayerSizes(10,5).override(2,new ConfOverride(){
    @Override public void overrideLayer(    int i,    NeuralNetConfiguration.Builder builder){
      builder.activationFunction("softmax");
      builder.layer(new org.deeplearning4j.nn.conf.layers.OutputLayer());
      builder.lossFunction(LossFunctions.LossFunction.MCXENT);
      builder.optimizationAlgo(OptimizationAlgorithm.ITERATION_GRADIENT_DESCENT);
    }
  }
).build();
  MultiLayerNetwork model=new MultiLayerNetwork(conf);
  model.init();
  model.setListeners(Arrays.asList(new NeuralNetPlotterIterationListener(1),new ScorePlotterIterationListener(1)));
  model.fit(d.getFeatureMatrix(),d.getLabels());
}
