{
  MatrixUtil.ensureValidOutcomeMatrix(labels);
  DoubleMatrix layerInput=network.sigmoidLayers[network.sigmoidLayers.length - 1].sample_h_given_v();
  network.logLayer.input=layerInput;
  network.logLayer.labels=labels;
  network.logLayer.train(layerInput,labels,lr);
  lr*=network.learningRateUpdate;
  opt=new cc.mallet.optimize.LimitedMemoryBFGS(this);
  boolean done=false;
  for (int i=0; i < epochs; i++)   while (!done) {
    try {
      done=opt.optimize();
    }
 catch (    InvalidOptimizableException e) {
      network.logLayer.input=layerInput;
      network.logLayer.labels=labels;
      network.logLayer.train(layerInput,labels,lr);
      lr*=network.learningRateUpdate;
      log.warn("Invalid step taken; trying again. Error was ",e);
    }
catch (    OptimizationException e2) {
      network.logLayer.input=layerInput;
      network.logLayer.labels=labels;
      network.logLayer.train(layerInput,labels,lr);
      lr*=network.learningRateUpdate;
      log.warn("Invalid step taken; trying again. Error was ",e2);
    }
  }
}
