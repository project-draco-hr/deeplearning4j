{
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().activationFunction("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).regularization(false).seed(12345L).list(2).layer(0,new DenseLayer.Builder().nIn(4).nOut(10).build()).layer(1,new OutputLayer.Builder(LossFunction.MCXENT).activation("softmax").nIn(10).nOut(3).build()).build();
  MultiLayerNetwork mln=new MultiLayerNetwork(conf);
  mln.init();
  for (int i=0; i < mln.getnLayers(); i++) {
    System.out.println("Layer " + i + " # params: "+ mln.getLayer(i).numParams());
  }
  DataSet ds=new IrisDataSetIterator(150,150).next();
  ds.normalizeZeroMeanZeroUnitVariance();
  INDArray input=ds.getFeatureMatrix();
  INDArray labels=ds.getLabels();
  boolean gradOK=GradientCheckUtil.checkGradients(mln,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels,false);
  assertTrue(gradOK);
}
