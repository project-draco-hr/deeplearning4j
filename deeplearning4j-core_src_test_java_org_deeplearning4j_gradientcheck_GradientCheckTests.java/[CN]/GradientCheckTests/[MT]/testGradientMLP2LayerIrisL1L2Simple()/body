{
  String[] activFns={"sigmoid","tanh","relu","hardtanh"};
  for (  String afn : activFns) {
    MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().activationFunction(afn).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).regularization(true).l2(0.3).l1(0.0).dropOut(0.0).updater(Updater.NONE).seed(12345L).list(2).layer(0,new DenseLayer.Builder().nIn(4).nOut(3).build()).layer(1,new OutputLayer.Builder(LossFunction.MCXENT).activation("softmax").nIn(3).nOut(3).build()).build();
    MultiLayerNetwork mln=new MultiLayerNetwork(conf);
    mln.init();
    if (PRINT_RESULTS) {
      System.out.println("testGradientMLP2LayerIrisL2Random() - " + afn);
      for (int i=0; i < mln.getnLayers(); i++)       System.out.println("Layer " + i + " # params: "+ mln.getLayer(i).numParams());
    }
    DataSet ds=new IrisDataSetIterator(150,150).next();
    ds.normalizeZeroMeanZeroUnitVariance();
    INDArray input=ds.getFeatureMatrix();
    INDArray labels=ds.getLabels();
    boolean gradOK=GradientCheckUtil.checkGradients(mln,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels,false);
    assertTrue(gradOK);
  }
}
