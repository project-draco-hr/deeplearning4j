{
  system=ActorSystem.create(systemName);
  ActorRefUtils.addShutDownForSystem(system);
  mediator=DistributedPubSubExtension.get(system).mediator();
  if (type.equals("master")) {
    if (iter == null)     throw new IllegalStateException("Unable to initialize no dataset to iterate");
    log.info("Starting master");
    try {
      if (stateTracker == null) {
        if (stateTrackerPort > 0)         stateTracker=new HazelCastStateTracker(stateTrackerPort);
 else         stateTracker=new HazelCastStateTracker();
      }
      if (stateTracker.jobAggregator() == null) {
        Class<? extends JobAggregator> clazz=(Class<? extends JobAggregator>)Class.forName(conf.get(JobAggregator.AGGREGATOR,INDArrayAggregator.class.getName()));
        JobAggregator agg=clazz.newInstance();
        stateTracker.setJobAggregator(agg);
      }
      log.info("Started state tracker with connection string " + stateTracker.connectionString());
      masterAddress=startBackend(null,conf,iter,stateTracker);
    }
 catch (    Exception e1) {
      Thread.currentThread().interrupt();
      throw new RuntimeException(e1);
    }
    log.info("Starting Save saver");
    if (modelSaver == null)     system.actorOf(Props.create(ModelSavingActor.class,"model-saver",stateTracker));
 else     system.actorOf(Props.create(ModelSavingActor.class,modelSaver,stateTracker));
    conf.set(MASTER_URL,getMasterAddress().toString());
    conf.set(MASTER_PATH,ActorRefUtils.absPath(masterActor,system));
    conf.set(STATE_TRACKER_CONNECTION_STRING,stateTracker.connectionString());
    ActorRefUtils.registerConfWithZooKeeper(conf,system);
    system.scheduler().schedule(Duration.create(1,TimeUnit.MINUTES),Duration.create(1,TimeUnit.MINUTES),new Runnable(){
      @Override public void run(){
        if (!system.isTerminated()) {
          try {
            log.info("Current cluster members " + Cluster.get(system).readView().members());
          }
 catch (          Exception e) {
            log.warn("Tried reading cluster members during shutdown");
          }
        }
      }
    }
,system.dispatcher());
  }
 else {
    log.info("Starting worker node");
    Address a=AddressFromURIString.parse(conf.get(MASTER_URL));
    Configuration c=conf.copy();
    Cluster cluster=Cluster.get(system);
    cluster.join(a);
    try {
      String host=a.host().get();
      if (host == null)       throw new IllegalArgumentException("No host applyTransformToDestination for worker");
      String connectionString=conf.get(STATE_TRACKER_CONNECTION_STRING);
      if (connectionString.contains("0.0.0.0")) {
        if (masterHost == null)         throw new IllegalStateException("No master host specified and host discovery was lost due to" + " improper setup on the master (related to hostname resolution) Please run the following" + " command on your host: sudo hostname YOUR_HOST_NAME."+ " This will make your hostname resolution work correctly on master.");
        connectionString=connectionString.replace("0.0.0.0",masterHost);
      }
      log.info("Creating state tracker with connection string " + connectionString);
      if (stateTracker == null)       stateTracker=new HazelCastStateTracker(connectionString);
    }
 catch (    Exception e1) {
      Thread.currentThread().interrupt();
      throw new RuntimeException(e1);
    }
    startWorker(c);
    system.scheduler().schedule(Duration.create(1,TimeUnit.MINUTES),Duration.create(1,TimeUnit.MINUTES),new Runnable(){
      @Override public void run(){
        log.info("Current cluster members " + Cluster.get(system).readView().members());
      }
    }
,system.dispatcher());
    log.info("Setup worker nodes");
  }
  if (type.equals("master")) {
    stateTracker.startRestApi();
  }
 else   if (stateTracker instanceof HazelCastStateTracker)   log.info("Not starting drop wizard; worker state detected");
}
