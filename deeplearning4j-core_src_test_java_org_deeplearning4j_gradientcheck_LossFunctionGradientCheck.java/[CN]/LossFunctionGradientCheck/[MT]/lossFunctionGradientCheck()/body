{
  ILossFunction[] lossFunctions=new ILossFunction[]{new LossBinaryXENT(),new LossCosineProximity(),new LossHinge(),new LossKLD(),new LossMAE(),new LossMAPE(),new LossMCXENT(),new LossMSE(),new LossMSLE(),new LossNegativeLogLikelihood(),new LossPoisson(),new LossSquaredHinge()};
  String[] outputActivationFn=new String[]{"sigmoid","tanh","","softmax","identity","identity","softmax","identity","identity","softmax","",""};
  int[] nOut=new int[]{1,5,-1,-1,3,3,3,3,3,3,-1,-1};
  for (int i=0; i < lossFunctions.length; i++) {
    MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().iterations(1).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(Updater.NONE).regularization(false).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,2)).list().layer(0,new DenseLayer.Builder().nIn(4).nOut(4).activation("tanh").build()).layer(1,new OutputLayer.Builder().lossFunction(lossFunctions[i]).activation(outputActivationFn[i]).nIn(4).nOut(nOut[i]).build()).pretrain(false).backprop(true).build();
    MultiLayerNetwork net=new MultiLayerNetwork(conf);
    net.init();
  }
}
