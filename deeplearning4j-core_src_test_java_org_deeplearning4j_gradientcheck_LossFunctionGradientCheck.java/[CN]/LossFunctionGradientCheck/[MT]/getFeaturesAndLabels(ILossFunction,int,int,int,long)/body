{
  Nd4j.getRandom().setSeed(seed);
  Random r=new Random(seed);
  INDArray[] ret=new INDArray[2];
  ret[0]=Nd4j.rand(minibatch,nIn);
switch (l.getClass().getSimpleName()) {
case "LossBinaryXENT":
    ret[1]=Nd4j.rand(minibatch,nOut);
  BooleanIndexing.replaceWhere(ret[1],0,Conditions.lessThanOrEqual(0.5));
BooleanIndexing.replaceWhere(ret[1],1,Conditions.greaterThanOEqual(0.5));
break;
case "LossCosineProximity":
ret[1]=Nd4j.rand(minibatch,nOut).subi(0.5);
break;
case "LossKLD":
ret[1]=Nd4j.rand(minibatch,nOut);
Nd4j.getExecutioner().exec(new SoftMax(ret[1]),1);
break;
case "LossMCXENT":
case "LossNegativeLogLikelihood":
case "LossHinge":
case "LossSquaredHinge":
ret[1]=Nd4j.zeros(minibatch,nOut);
for (int i=0; i < minibatch; i++) {
ret[1].putScalar(i,r.nextInt(nOut),1.0);
}
break;
case "LossMAPE":
ret[1]=Nd4j.rand(minibatch,nOut).addi(1.0);
break;
case "LossMAE":
case "LossMSE":
ret[1]=Nd4j.rand(minibatch,nOut).muli(2).subi(1);
break;
case "LossMSLE":
ret[1]=Nd4j.rand(minibatch,nOut);
break;
case "LossPoisson":
ret[1]=Nd4j.rand(minibatch,nOut);
BooleanIndexing.replaceWhere(ret[1],0,Conditions.lessThanOrEqual(0.5));
BooleanIndexing.replaceWhere(ret[1],1,Conditions.greaterThanOEqual(0.5));
break;
default :
throw new IllegalArgumentException("Unknown class: " + l.getClass().getSimpleName());
}
return ret;
}
