{
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).graphBuilder().addInputs("input").addLayer("cnn1",new ConvolutionLayer.Builder(2,2).stride(2,2).nIn(1).nOut(3).build(),"input").addLayer("cnn2",new ConvolutionLayer.Builder(4,4).stride(2,2).padding(1,1).nIn(1).nOut(3).build(),"input").addLayer("max1",new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).build(),"cnn1","cnn2").addLayer("output",new OutputLayer.Builder().nIn(7 * 7 * 6).nOut(10).build(),"max1").setOutputs("output").inputPreProcessor("cnn1",new FeedForwardToCnnPreProcessor(28,28,1)).inputPreProcessor("cnn2",new FeedForwardToCnnPreProcessor(28,28,1)).inputPreProcessor("output",new CnnToFeedForwardPreProcessor(7,7,6)).pretrain(false).backprop(true).build();
  ComputationGraph graph=new ComputationGraph(conf);
  graph.init();
  graph.setListeners(new HistogramIterationListener(1),new ScoreIterationListener(1));
  DataSetIterator mnist=new MnistDataSetIterator(32,640,false,true,false,12345);
  graph.fit(mnist);
}
