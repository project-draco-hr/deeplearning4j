{
  INDArray gamma, beta;
  INDArray activations=null;
  trainingMode=training;
  org.deeplearning4j.nn.conf.layers.BatchNormalization layerConf=layerConf();
  int batchSize=x.size(0);
  shape=getShape(x);
  INDArray mean, var;
  if (trainingMode == TrainingMode.TRAIN && layerConf.isUseBatchMean()) {
switch (x.rank()) {
case 2:
      mean=x.mean(0);
    var=x.var(false,0);
  break;
case 4:
mean=x.mean(0,2,3);
var=x.var(false,0,2,3);
break;
default :
throw new IllegalStateException("Batch normalization on activations of rank " + x.rank() + " not supported");
}
var.addi(layerConf.getEps());
}
 else {
mean=this.mean;
var=this.var;
}
std=Transforms.sqrt(var,true);
if (layerConf.isLockGammaBeta()) {
gamma=Nd4j.ones(shape);
beta=Nd4j.zeros(shape);
}
 else {
gamma=getParam(BatchNormalizationParamInitializer.GAMMA);
beta=getParam(BatchNormalizationParamInitializer.BETA);
}
if (helper != null) {
double decay=setMeanVar ? 1 : layerConf.getDecay();
if (setMeanVar) {
this.mean=this.mean == null ? Nd4j.zeros(mean.shape()) : this.mean;
this.var=this.var == null ? Nd4j.valueArrayOf(var.shape(),layerConf.getEps()) : this.var;
setMeanVar=false;
}
INDArray ret=helper.preOutput(x,training == TrainingMode.TRAIN && layerConf.isUseBatchMean(),shape,gamma,beta,this.mean,this.var,decay,layerConf.getEps());
if (ret != null) {
return ret;
}
}
if (x.rank() == 2) {
xMu=x.subRowVector(mean);
xHat=xMu.divRowVector(std);
activations=xHat.mulRowVector(gamma).addiRowVector(beta);
}
 else if (x.rank() == 4) {
xMu=Nd4j.getExecutioner().execAndReturn(new BroadcastSubOp(x,mean,Nd4j.createUninitialized(x.shape(),x.ordering()),1));
xHat=Nd4j.getExecutioner().execAndReturn(new BroadcastDivOp(xMu,std,Nd4j.createUninitialized(x.shape(),x.ordering()),1));
activations=Nd4j.getExecutioner().execAndReturn(new BroadcastMulOp(xHat,gamma,Nd4j.createUninitialized(x.shape(),x.ordering()),1));
activations=Nd4j.getExecutioner().execAndReturn(new BroadcastAddOp(activations,beta,activations,1));
}
 else {
throw new IllegalStateException("The layer prior to BatchNorm in the configuration is not currently supported.");
}
double decay;
if (training == TrainingMode.TRAIN && layerConf.isUseBatchMean()) {
if (setMeanVar) {
this.mean=this.mean == null ? Nd4j.zeros(mean.shape()) : this.mean;
this.var=this.var == null ? Nd4j.valueArrayOf(var.shape(),layerConf.getEps()) : this.var;
setMeanVar=false;
}
decay=layerConf.getDecay();
double adjust=batchSize / Math.max(batchSize - 1.,1.);
this.mean=mean.mul(decay).add(this.mean.mul(1 - decay));
this.var=var.mul(decay).add(this.var.mul((1 - decay) * adjust));
}
return activations;
}
