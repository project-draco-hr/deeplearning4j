{
  IComplexNDArray n=new ComplexNDArray(new NDArray(new double[]{1,2,3},new int[]{3,1}));
  IComplexNDArray swapped=n.swapAxes(1,0);
  assertEquals(n.transpose(),swapped);
  assertEquals(swapped.getScalar(0),n.getScalar(0));
  assertEquals(swapped.getScalar(1),n.getScalar(1));
  assertEquals(swapped.getScalar(2),n.getScalar(2));
  IComplexNDArray n2=new ComplexNDArray(new NDArray(DoubleMatrix.linspace(0,7,8).data,new int[]{2,2,2}));
  IComplexNDArray assertion=n2.permute(new int[]{2,1,0});
  IComplexNDArray validate=new ComplexNDArray(new NDArray(new double[]{0,4,2,6,1,5,3,7},new int[]{2,2,2}));
  assertEquals(validate,assertion);
  IComplexNDArray v1=new ComplexNDArray(new NDArray(DoubleMatrix.linspace(1,8,8).data,new int[]{8,1}));
  IComplexNDArray swap=v1.swapAxes(1,0);
  IComplexNDArray transposed=v1.transpose();
  assertEquals(swap,transposed);
  transposed.put(1,NDArrays.scalar(9));
  swap.put(1,NDArrays.scalar(9));
  assertEquals(transposed,swap);
  assertEquals(transposed.getScalar(1).element(),swap.getScalar(1).element());
  IComplexNDArray row=n2.slice(0).getRow(1);
  row.put(1,NDArrays.scalar(9));
  IComplexNumber n3=(IComplexNumber)row.getScalar(1).element();
  assertEquals(9,n3.realComponent().doubleValue(),1e-1);
}
