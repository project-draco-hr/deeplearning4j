{
  IComplexNDArray n1=ComplexNDArray.scalar(1);
  IComplexNDArray n2=ComplexNDArray.scalar(2);
  assertEquals(ComplexNDArray.scalar(3),n1.add(n2));
  assertFalse(n1.add(n2).equals(n1));
  IComplexNDArray n3=ComplexNDArray.scalar(3);
  IComplexNDArray n4=ComplexNDArray.scalar(4);
  IComplexNDArray subbed=n4.sub(n3);
  IComplexNDArray mulled=n4.mul(n3);
  IComplexNDArray div=n4.div(n3);
  assertFalse(subbed.equals(n4));
  assertFalse(mulled.equals(n4));
  assertEquals(ComplexNDArray.scalar(1),subbed);
  assertEquals(ComplexNDArray.scalar(12),mulled);
  assertEquals(ComplexNDArray.scalar((org.deeplearning4j.linalg.jblas.complex.ComplexDouble)new ComplexDouble(1.3333333333333333)),div);
  IComplexNDArray multiDimensionElementWise=new ComplexNDArray(new NDArray(DoubleMatrix.linspace(1,24,24).data,new int[]{4,3,2}));
  ComplexDouble sum2=(ComplexDouble)multiDimensionElementWise.sum(multiDimensionElementWise.shape().length - 1).element();
  assertEquals(sum2,new ComplexDouble(300));
  IComplexNDArray added=multiDimensionElementWise.add(NDArrays.scalar(1));
  ComplexDouble sum3=(ComplexDouble)added.sum(added.shape().length - 1);
  assertEquals(sum3,new ComplexDouble(324));
}
