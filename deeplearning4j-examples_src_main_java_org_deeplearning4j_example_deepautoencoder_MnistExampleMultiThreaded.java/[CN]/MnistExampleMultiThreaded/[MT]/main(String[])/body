{
  DataSetIterator iter=new MnistDataSetIterator(80,60000,false);
  int codeLayer=3;
  Conf c=new Conf();
  c.setFinetuneEpochs(10000);
  c.setPretrainEpochs(100);
  c.setFinetuneLearningRate(1e-1f);
  c.setPretrainLearningRate(1e-1f);
  c.setActivationFunctionForLayer(Collections.singletonMap(codeLayer,Activations.linear()));
  c.setSampleHiddenActivations(true);
  c.setLearningRateForLayer(Collections.singletonMap(codeLayer,1e-2f));
  c.setLayerSizes(new int[]{1000,500,250,30});
  c.setnIn(784);
  c.setUseRegularization(true);
  c.setL2(2e-4f);
  c.setSampleHiddenActivationsByLayer(Collections.singletonMap(codeLayer,false));
  c.setNormalizeZeroMeanAndUnitVariance(false);
  c.setScale(false);
  c.setMomentum(9e-1f);
  c.setDropOut(0);
  Map<Integer,RBM.HiddenUnit> hiddenUnitMap=new HashMap<>();
  hiddenUnitMap.put(codeLayer,RBM.HiddenUnit.GAUSSIAN);
  c.setHiddenUnitByLayer(Collections.singletonMap(codeLayer,RBM.HiddenUnit.GAUSSIAN));
  c.setSplit(100);
  c.setLearningRateForLayer(Collections.singletonMap(codeLayer,1e-1f));
  c.setSparsity(0);
  c.setnOut(10);
  c.setMultiLayerClazz(DBN.class);
  c.setDeepLearningParams(new Object[]{1,1e-1,100});
  ActorNetworkRunner runner=args.length < 1 ? new ActorNetworkRunner("master",iter) : new ActorNetworkRunner("master",iter,(DBN)SerializationUtils.readObject(new File(args[0])));
  runner.setModelSaver(new DefaultModelSaver(new File("mnist-example-deepautoencoder.ser")));
  runner.setup(c);
  runner.train();
}
