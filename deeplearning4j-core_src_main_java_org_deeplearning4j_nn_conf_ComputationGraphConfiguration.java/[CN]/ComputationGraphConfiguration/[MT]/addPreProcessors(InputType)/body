{
  if (inputTypes == null || inputTypes.length != networkInputs.size()) {
    throw new IllegalArgumentException("Invalid number of InputTypes: cannot add preprocessors if number of InputType " + "objects differs from number of network inputs");
  }
  Map<String,List<String>> verticesOutputTo=new HashMap<>();
  for (  Map.Entry<String,GraphVertex> entry : vertices.entrySet()) {
    String vertexName=entry.getKey();
    List<String> vertexInputNames;
    vertexInputNames=vertexInputs.get(vertexName);
    if (vertexInputNames == null)     continue;
    for (    String s : vertexInputNames) {
      List<String> list=verticesOutputTo.get(s);
      if (list == null) {
        list=new ArrayList<>();
        verticesOutputTo.put(s,list);
      }
      list.add(vertexName);
    }
  }
  LinkedList<String> noIncomingEdges=new LinkedList<>(networkInputs);
  List<String> topologicalOrdering=new ArrayList<>();
  Map<String,Set<String>> inputEdges=new HashMap<>();
  for (  Map.Entry<String,List<String>> entry : vertexInputs.entrySet()) {
    inputEdges.put(entry.getKey(),new HashSet<>(entry.getValue()));
  }
  while (!noIncomingEdges.isEmpty()) {
    String next=noIncomingEdges.removeFirst();
    topologicalOrdering.add(next);
    List<String> nextEdges=verticesOutputTo.get(next);
    if (nextEdges != null && !nextEdges.isEmpty()) {
      for (      String s : nextEdges) {
        Set<String> set=inputEdges.get(s);
        set.remove(next);
        if (set.isEmpty()) {
          noIncomingEdges.add(s);
        }
      }
    }
  }
  for (  Map.Entry<String,Set<String>> entry : inputEdges.entrySet()) {
    Set<String> set=entry.getValue();
    if (set == null)     continue;
    if (!set.isEmpty())     throw new IllegalStateException("Invalid configuration: cycle detected in graph. Cannot calculate topological ordering with graph cycle (" + "cycle includes vertex \"" + entry.getKey() + "\")");
  }
  Map<String,InputType> vertexOutputs=new HashMap<>();
  for (  String s : topologicalOrdering) {
    int inputIdx=networkInputs.indexOf(s);
    if (inputIdx != -1) {
      vertexOutputs.put(s,inputTypes[inputIdx]);
      continue;
    }
    GraphVertex gv=vertices.get(s);
    List<InputType> inputTypeList=new ArrayList<>();
    if (gv instanceof LayerVertex) {
      String in=vertexInputs.get(s).get(0);
      InputType layerInput=vertexOutputs.get(in);
      inputTypeList.add(layerInput);
      LayerVertex lv=(LayerVertex)gv;
      Layer l=lv.getLayerConf().getLayer();
      if (lv.getPreProcessor() == null) {
        InputPreProcessor preproc=l.getPreProcessorForInputType(layerInput);
        lv.setPreProcessor(preproc);
      }
      InputType afterPreproc=layerInput;
      if (lv.getPreProcessor() != null) {
        InputPreProcessor ip=lv.getPreProcessor();
        afterPreproc=ip.getOutputType(layerInput);
      }
      l.setNIn(afterPreproc,false);
    }
 else {
      List<String> inputs=vertexInputs.get(s);
      if (inputs != null) {
        for (        String inputVertexName : inputs) {
          inputTypeList.add(vertexOutputs.get(inputVertexName));
        }
      }
    }
    InputType outputFromVertex=gv.getOutputType(inputTypeList.toArray(new InputType[inputTypeList.size()]));
    vertexOutputs.put(s,outputFromVertex);
  }
}
