{
  Model testModelFlag=new Model();
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().layer(new RBM.Builder().activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new UniformDistribution(0,1)).build()).nIn(4).nOut(3).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).iterations(100).k(1).batchSize(10).lossFunction(LossFunctions.LossFunction.RMSE_XENT).learningRate(1e-1f).momentum(0.9).regularization(true).l2(2e-4).optimizationAlgo(OptimizationAlgorithm.LBFGS).constrainGradientToUnitNorm(true).list(2).layer(1,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation("softmax").weightInit(WeightInit.ZERO).dist(new UniformDistribution(0,1)).build()).hiddenLayerSizes(3).build();
  String json=conf.toJson();
  FileUtils.writeStringToFile(new File("model_multi.json"),json);
  MultiLayerConfiguration from=testModelFlag.value("model_multi.json");
  assertEquals(conf,from);
  CommandLineInterfaceDriver driver=new CommandLineInterfaceDriver();
  String[] cmd={"train","-conf",new ClassPathResource("confs/cli_train_unit_test_conf.txt").getFile().getAbsolutePath(),"-input",new ClassPathResource("iris.txt").getFile().getAbsolutePath(),"-model","model_multi.json","-output","model_results.txt","-verbose"};
  driver.doMain(cmd);
}
