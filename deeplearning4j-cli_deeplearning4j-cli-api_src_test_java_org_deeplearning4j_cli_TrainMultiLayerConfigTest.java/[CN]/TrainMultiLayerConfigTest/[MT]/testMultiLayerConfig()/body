{
  Model testModelFlag=new Model();
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().iterations(100).learningRate(1e-1f).momentum(0.9).regularization(true).l2(2e-4).optimizationAlgo(OptimizationAlgorithm.LBFGS).constrainGradientToUnitNorm(true).list(2).layer(0,new RBM.Builder(RBM.HiddenUnit.RECTIFIED,RBM.VisibleUnit.GAUSSIAN).nIn(4).nOut(3).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new UniformDistribution(0,1)).lossFunction(LossFunctions.LossFunction.RMSE_XENT).build()).layer(1,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(3).nOut(3).activation("softmax").weightInit(WeightInit.ZERO).dist(new UniformDistribution(0,1)).build()).build();
  String json=conf.toJson();
  FileUtils.writeStringToFile(new File("model_multi.json"),json);
  MultiLayerConfiguration from=testModelFlag.value("model_multi.json");
  assertEquals(conf,from);
  File parent=new File(System.getProperty("java.io.tmpdir"),"data");
  FileUtils.copyFile(new ClassPathResource("data/irisSvmLight.txt").getFile(),new File(parent,"irisSvmLight.txt"));
  CommandLineInterfaceDriver driver=new CommandLineInterfaceDriver();
  String[] cmd={"train","-conf",new ClassPathResource("confs/cli_train_unit_test_conf.txt").getFile().getAbsolutePath(),"-input",new ClassPathResource("iris.txt").getFile().getAbsolutePath(),"-model","model_multi.json","-output","model_results.txt","-verbose"};
  driver.doMain(cmd);
  FileUtils.deleteDirectory(parent);
}
