{
  final int numRows=28;
  final int numColumns=28;
  int nChannels=1;
  int outputNum=10;
  int iterations=10;
  int seed=123;
  MultiLayerConfiguration.Builder builder=new NeuralNetConfiguration.Builder().seed(seed).iterations(iterations).optimizationAlgo(OptimizationAlgorithm.LINE_GRADIENT_DESCENT).list().layer(0,new org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder(new int[]{10,10},new int[]{2,2}).nIn(nChannels).nOut(6).build()).layer(1,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX,new int[]{2,2}).weightInit(WeightInit.XAVIER).activation("relu").build()).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nIn(5 * 5 * 1* 6).nOut(outputNum).weightInit(WeightInit.XAVIER).activation("softmax").build()).inputPreProcessor(0,new FeedForwardToCnnPreProcessor(numRows,numColumns,1)).inputPreProcessor(2,new CnnToFeedForwardPreProcessor(5,5,6)).backprop(true).pretrain(false);
  return builder;
}
