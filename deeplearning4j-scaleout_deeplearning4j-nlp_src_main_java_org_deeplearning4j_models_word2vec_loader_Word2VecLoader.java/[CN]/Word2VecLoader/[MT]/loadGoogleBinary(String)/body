{
  DataInputStream dis=null;
  BufferedInputStream bis=null;
  double len=0;
  float vector=0;
  int words, size=0;
  InMemoryLookupCache cache;
  try {
    bis=new BufferedInputStream(new FileInputStream(path));
    dis=new DataInputStream(bis);
    words=Integer.parseInt(readString(dis));
    size=Integer.parseInt(readString(dis));
    cache=new InMemoryLookupCache(size,words);
    String word;
    float[] vectors=null;
    for (int i=0; i < words; i++) {
      word=readString(dis);
      vectors=new float[size];
      len=0;
      for (int j=0; j < size; j++) {
        vector=readFloat(dis);
        len+=vector * vector;
        vectors[j]=vector;
      }
      len=Math.sqrt(len);
      for (int j=0; j < size; j++)       vectors[j]/=len;
      INDArray row=Nd4j.create(vectors);
      if (word == null || word.isEmpty())       continue;
      cache.addWordToIndex(cache.numWords(),word);
      cache.putVector(word,row);
      cache.putVocabWord(word,new VocabWord(1,word));
      dis.read();
    }
  }
  finally {
    bis.close();
    dis.close();
  }
  Word2Vec ret=new Word2Vec();
  ret.setCache(cache);
  ret.setLayerSize(size);
  return ret;
}
