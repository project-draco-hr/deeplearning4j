def render_filter(data_path, filename, filter_width=10, filter_height=10):
    print 'Rendering filter image...'
    weight_data = load_file(data_path)
    n_rows = weight_data.shape[0]
    n_cols = weight_data.shape[1]
    padding = 1
    filter_frame = (np.ones((((filter_width + padding) * filter_width), ((filter_height + padding) * filter_height)), dtype='uint8') * 51)
    for row in xrange(n_rows):
        for col in xrange(n_cols):
            patch = weight_data[((row * n_cols) + col)].reshape((filter_width, filter_height))
            norm_patch = ((patch - patch.min()) / ((patch.max() - patch.min()) + 1e-06))
            filter_frame[(row * (filter_height + padding)):((row * (filter_height + padding)) + filter_height), (col * (filter_width + padding)):((col * (filter_width + padding)) + filter_width)] = (norm_patch * 255)
            filter_frame[(row * (filter_height + padding)):((row * (filter_height + padding)) + filter_height), (col * (filter_width + padding)):((col * (filter_width + padding)) + filter_width)]
        img = Image.fromarray(filter_frame)
    if (img.mode != 'RGB'):
        img = img.convert('RGB')
    img.savefig(filename)
