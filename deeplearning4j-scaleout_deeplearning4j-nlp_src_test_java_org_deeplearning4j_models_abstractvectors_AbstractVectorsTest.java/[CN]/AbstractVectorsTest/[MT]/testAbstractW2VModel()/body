{
  ClassPathResource resource=new ClassPathResource("big/raw_sentences.txt");
  File file=resource.getFile();
  AbstractCache<VocabWord> vocabCache=new AbstractCache.Builder<VocabWord>().build();
  BasicLineIterator underlyingIterator=new BasicLineIterator(file);
  TokenizerFactory t=new DefaultTokenizerFactory();
  t.setTokenPreProcessor(new CommonPreprocessor());
  SentenceTransformer transformer=new SentenceTransformer.Builder().iterator(underlyingIterator).tokenizerFactory(t).build();
  AbstractSequenceIterator<VocabWord> sequenceIterator=new AbstractSequenceIterator.Builder<VocabWord>(transformer).build();
  VocabConstructor<VocabWord> constructor=new VocabConstructor.Builder<VocabWord>().addSource(sequenceIterator,5).useAdaGrad(false).setTargetVocabCache(vocabCache).build();
  constructor.buildJointVocabulary(false,true);
  assertEquals(242,vocabCache.numWords());
  assertEquals(634303,vocabCache.totalWordOccurrences());
  WeightLookupTable<VocabWord> lookupTable=new InMemoryLookupTable.Builder<VocabWord>().lr(0.025).vectorLength(150).useAdaGrad(false).cache(vocabCache).build();
  lookupTable.resetWeights(true);
  AbstractVectors<VocabWord> vectors=new AbstractVectors.Builder<VocabWord>(new VectorsConfiguration()).minWordFrequency(3).setLookupTable(lookupTable).iterate(sequenceIterator).setVocabCache(vocabCache).resetModel(false).build();
  vectors.fit();
  double sim=vectors.similarity("day","night");
  logger.info("Day/night similarity: " + sim);
  assertTrue(sim > 0.6d);
}
