{
  if (activations.length == 1) {
    int[] shape=activations[0].shape();
    forwardPassShapes=new int[][]{Arrays.copyOf(shape,shape.length)};
    return activations[0];
  }
  forwardPassShapes=new int[activations.length][0];
  int nExamples=activations[0].size(0);
  int nOut=0;
  for (int i=0; i < activations.length; i++) {
    int[] currShape=activations[i].shape();
    forwardPassShapes[i]=Arrays.copyOf(currShape,currShape.length);
    if (currShape[0] != nExamples) {
      throw new IllegalStateException("Cannot merge activations with different number of examples (activations[0] shape: " + Arrays.toString(activations[0].shape()) + ", activations["+ i+ "] shape: "+ Arrays.toString(activations[i].shape()));
    }
    nOut+=currShape[1];
  }
  INDArray out;
  if (activations[0].rank() == 2) {
    fwdPassRank=2;
    out=Nd4j.create(nExamples,nOut);
    int nOutCumulative=0;
    for (    INDArray activation : activations) {
      int[] currShape=activation.shape();
      out.get(NDArrayIndex.all(),NDArrayIndex.interval(nOutCumulative,nOutCumulative + currShape[1])).assign(activation);
      nOutCumulative+=currShape[1];
    }
  }
 else   if (activations[0].rank() == 3) {
    fwdPassRank=3;
    int tsLength=activations[0].size(2);
    out=Nd4j.create(nExamples,nOut,tsLength);
    int nOutCumulative=0;
    for (    INDArray activation : activations) {
      int[] currShape=activation.shape();
      out.get(NDArrayIndex.all(),NDArrayIndex.interval(nOutCumulative,nOutCumulative + currShape[1]),NDArrayIndex.all()).assign(activation);
      nOutCumulative+=currShape[1];
    }
  }
 else {
    throw new UnsupportedOperationException("Cannot merge activations with rank 4 or more");
  }
  return out;
}
