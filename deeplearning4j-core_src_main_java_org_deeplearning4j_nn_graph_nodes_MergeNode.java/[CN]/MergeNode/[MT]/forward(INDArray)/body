{
  if (activations.length == 1) {
    int[] shape=activations[0].shape();
    forwardPassShapes=new int[][]{Arrays.copyOf(shape,shape.length)};
    return activations[0];
  }
  forwardPassShapes=new int[activations.length][0];
  int nExamples=activations[0].size(0);
  int nOut=0;
  fwdPassRank=activations[0].rank();
  for (int i=0; i < activations.length; i++) {
    int[] currShape=activations[i].shape();
    if (fwdPassRank != currShape.length) {
      throw new IllegalStateException("Cannot merge activations with different ranks: first activations have rank " + fwdPassRank + ", activations["+ i+ "] have rank "+ currShape.length+ " (shape="+ Arrays.toString(currShape)+ ")");
    }
    forwardPassShapes[i]=Arrays.copyOf(currShape,currShape.length);
    if (currShape[0] != nExamples) {
      throw new IllegalStateException("Cannot merge activations with different number of examples (activations[0] shape: " + Arrays.toString(activations[0].shape()) + ", activations["+ i+ "] shape: "+ Arrays.toString(activations[i].shape()));
    }
    nOut+=currShape[1];
  }
  int nOutCumulative=0;
  INDArray out;
switch (activations[0].rank()) {
case 2:
    out=Nd4j.create(nExamples,nOut);
  for (  INDArray activation : activations) {
    int[] currShape=activation.shape();
    out.get(NDArrayIndex.all(),NDArrayIndex.interval(nOutCumulative,nOutCumulative + currShape[1])).assign(activation);
    nOutCumulative+=currShape[1];
  }
break;
case 3:
int tsLength=activations[0].size(2);
out=Nd4j.create(nExamples,nOut,tsLength);
for (INDArray activation : activations) {
int[] currShape=activation.shape();
out.get(NDArrayIndex.all(),NDArrayIndex.interval(nOutCumulative,nOutCumulative + currShape[1]),NDArrayIndex.all()).assign(activation);
nOutCumulative+=currShape[1];
}
break;
case 4:
fwdPassRank=4;
int[] outShape=Arrays.copyOf(activations[0].shape(),4);
outShape[1]=nOut;
out=Nd4j.create(outShape);
for (INDArray activation : activations) {
out.get(NDArrayIndex.all(),NDArrayIndex.interval(nOutCumulative,nOutCumulative + activation.size(1)),NDArrayIndex.all(),NDArrayIndex.all()).assign(activation);
nOutCumulative+=activation.size(1);
}
break;
default :
throw new UnsupportedOperationException("Cannot merge activations with rank 4 or more");
}
return out;
}
