{
  this.labels=labels;
  OutputLayerOptimizer opt=new OutputLayerOptimizer(this,learningRate);
  adaGrad.setMasterStepSize(learningRate);
  biasAdaGrad.setMasterStepSize(learningRate);
  if (optimizationAlgorithm == OptimizationAlgorithm.CONJUGATE_GRADIENT) {
    VectorizedNonZeroStoppingConjugateGradient g=new VectorizedNonZeroStoppingConjugateGradient(opt);
    g.setTolerance(1e-3);
    g.setTrainingEvaluator(eval);
    g.setMaxIterations(numEpochs);
    g.optimize(numEpochs);
  }
 else   if (optimizationAlgorithm == OptimizationAlgorithm.HESSIAN_FREE) {
    StochasticHessianFree o=new StochasticHessianFree(opt,null);
    o.setTolerance(1e-3);
    o.setTrainingEvaluator(eval);
    o.optimize(numEpochs);
  }
 else {
    VectorizedDeepLearningGradientAscent g=new VectorizedDeepLearningGradientAscent(opt);
    g.setTolerance(1e-3);
    g.setTrainingEvaluator(eval);
    g.optimize(numEpochs);
  }
}
