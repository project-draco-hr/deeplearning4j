{
  MatrixUtil.complainAboutMissMatchedMatrices(input,labels);
  if (adaGrad.historicalGradient.rows != W.rows || adaGrad.historicalGradient.columns != W.columns)   adaGrad=new AdaGrad(W.rows,W.columns);
  if (biasAdaGrad.historicalGradient.rows != b.rows || biasAdaGrad.historicalGradient.columns != b.columns)   biasAdaGrad=new AdaGrad(b.rows,b.columns);
  adaGrad.setMasterStepSize(lr);
  biasAdaGrad.setMasterStepSize(lr);
  DoubleMatrix netOut=output(input);
  DoubleMatrix dy=labels.sub(netOut);
  if (normalizeByInputRows)   dy.divi(input.rows);
  DoubleMatrix wGradient=getWeightGradient();
  if (useAdaGrad)   wGradient.muli(adaGrad.getLearningRates(wGradient));
 else   wGradient.muli(lr);
  if (useAdaGrad)   dy.muliRowVector(biasAdaGrad.getLearningRates(dy.columnMeans()));
 else   dy.muli(lr);
  if (normalizeByInputRows)   dy.divi(input.rows);
  DoubleMatrix bGradient=dy;
  return new OutputLayerGradient(wGradient,bGradient);
}
