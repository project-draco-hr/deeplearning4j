{
  Index vocab=new Index();
  calcWordFrequencies();
  for (  String topic : words.keySet()) {
    for (    String word : words.getCounter(topic).keySet()) {
      double tfVal=tf.getCount(topic,word);
      double idfVal=idf.getCount(topic,word);
      double tfidfVal=MathUtils.tdidf(tfVal,idfVal);
      if (!stopWords.contains(word))       tfidf.setCount(topic,word,tfidfVal);
    }
  }
  log.info("Tfidf keys " + tfidf + " got rid of "+ (Math.abs(tfidf.size() - words.size()))+ " words");
  Set<String> remove=new HashSet<String>();
  Counter<String> aggregate=new Counter<String>();
  for (  String topic : tfidf.keySet()) {
    for (    String word : tfidf.getCounter(topic).keySet()) {
      aggregate.setCount(word,tfidf.getCount(topic,word));
    }
  }
  for (  String s : remove)   aggregate.removeKey(s);
  aggregate.keepTopNKeys(2000);
  log.info(tf.toString());
  String[] vocab2=new String[]{"funding","venture","round","accept","accepting","investor","investors","partners","partnering","raising","capital"};
  for (  String s : vocab2)   vocab.add(s);
  return vocab;
}
