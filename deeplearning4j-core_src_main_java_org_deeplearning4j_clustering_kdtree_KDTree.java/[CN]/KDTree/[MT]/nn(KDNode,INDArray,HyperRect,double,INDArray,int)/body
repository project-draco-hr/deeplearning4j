{
  if (node == null || rect.minDistance(point) > dist)   return new Pair<>(Double.POSITIVE_INFINITY,null);
  int _discNext=(_disc + 1) % dims;
  double dist2=Nd4j.getExecutioner().execAndReturn(new EuclideanDistance(point)).currentResult().doubleValue();
  if (dist2 < dist) {
    best=node.getPoint();
  }
  HyperRect lower=rect.getLower(node.point,_disc);
  HyperRect upper=rect.getUpper(node.point,_disc);
  if (point.getDouble(_disc) < node.point.getDouble(_disc)) {
    Pair<Double,INDArray> left=nn(node.getLeft(),point,lower,dist,best,_discNext);
    Pair<Double,INDArray> right=nn(node.getRight(),point,upper,dist,best,_discNext);
    if (left.getFirst() < dist)     return left;
 else     if (right.getFirst() < dist)     return right;
  }
 else {
    Pair<Double,INDArray> left=nn(node.getRight(),point,upper,dist,best,_discNext);
    Pair<Double,INDArray> right=nn(node.getLeft(),point,lower,dist,best,_discNext);
    if (left.getFirst() < dist)     return left;
 else     if (right.getFirst() < dist)     return right;
  }
  return new Pair<>(dist,best);
}
