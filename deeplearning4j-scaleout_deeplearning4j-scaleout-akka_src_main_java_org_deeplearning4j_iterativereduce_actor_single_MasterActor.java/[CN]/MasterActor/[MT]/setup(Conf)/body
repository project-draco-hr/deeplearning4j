{
  RandomGenerator rng=new SynchronizedRandomGenerator(new MersenneTwister(conf.getSeed()));
  @SuppressWarnings("unchecked") BaseNeuralNetwork network=new BaseNeuralNetwork.Builder<>().withClazz((Class<? extends BaseNeuralNetwork>)conf.getNeuralNetworkClazz()).withRandom(rng).withL2(conf.getL2()).renderWeights(conf.getRenderWeightEpochs()).withMomentum(conf.getMomentum()).useRegularization(conf.isUseRegularization()).numberOfVisible(conf.getnIn()).withSparsity(conf.getSparsity()).numHidden(conf.getnOut()).build();
  context().system().actorOf(Props.create(ModelSavingActor.class,"nn-model.bin"),",model-saver");
  Address masterAddress=Cluster.get(context().system()).selfAddress();
  ActorNetworkRunner.startWorker(masterAddress,conf);
  mediator.tell(new DistributedPubSubMediator.Publish(MasterActor.MASTER,conf.getPretrainEpochs()),mediator);
  log.info("Setup master with epochs " + conf.getPretrainEpochs());
  masterResults=new UpdateableSingleImpl(network);
  log.info("Broadcasting initial master network");
  mediator.tell(new DistributedPubSubMediator.Publish(BROADCAST,masterResults),getSelf());
}
