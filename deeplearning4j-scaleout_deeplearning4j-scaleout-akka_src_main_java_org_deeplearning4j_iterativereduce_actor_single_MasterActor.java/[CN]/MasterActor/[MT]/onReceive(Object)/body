{
  if (message instanceof DistributedPubSubMediator.SubscribeAck) {
    DistributedPubSubMediator.SubscribeAck ack=(DistributedPubSubMediator.SubscribeAck)message;
    log.info("Subscribed " + ack.toString());
  }
 else   if (message instanceof EpochDoneListener) {
    listener=(EpochDoneListener<UpdateableSingleImpl>)message;
    log.info("Set listener");
  }
 else   if (message instanceof UpdateableSingleImpl) {
    UpdateableSingleImpl up=(UpdateableSingleImpl)message;
    updates.add(up);
    if (updates.size() == partition) {
      masterResults=this.compute(updates,updates);
      if (listener != null)       listener.epochComplete(masterResults);
      if (epochsComplete == conf.getPretrainEpochs()) {
        isDone=true;
        batchActor.tell(up,getSelf());
        updates.clear();
        Cluster.get(this.getContext().system()).down(Cluster.get(getContext().system()).selfAddress());
        context().system().shutdown();
        log.info("Last iteration; left cluster");
      }
 else {
        batchActor.tell(new ResetMessage(),getSelf());
        epochsComplete++;
        batchActor.tell(up,getSelf());
        updates.clear();
      }
    }
  }
 else   if (message instanceof Updateable) {
    mediator.tell(new DistributedPubSubMediator.Publish(BROADCAST,message),getSelf());
  }
 else   if (message instanceof List || message instanceof Pair) {
    if (message instanceof List) {
      List<DataSet> list=(List<DataSet>)message;
      splitListIntoRows(list);
      sendToWorkers(list);
    }
 else     if (message instanceof Pair) {
      DataSet pair=(DataSet)message;
      List<DoubleMatrix> inputs=pair.getFirst().rowsAsList();
      List<DoubleMatrix> labels=pair.getSecond().rowsAsList();
      List<DataSet> pairs=new ArrayList<>();
      for (int i=0; i < inputs.size(); i++) {
        pairs.add(new DataSet(inputs.get(i),labels.get(i)));
      }
      sendToWorkers(pairs);
    }
  }
 else   unhandled(message);
}
