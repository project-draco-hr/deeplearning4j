{
  INDArray layerInput;
  for (int i=0; i < getnLayers(); i++) {
    if (i == 0) {
      while (iter.hasNext()) {
        DataSet next=iter.next();
        this.input=next.getFeatureMatrix();
        if (this.getInput() == null || this.getLayers() == null || this.getLayers()[0] == null || this.getSigmoidLayers() == null || this.getSigmoidLayers()[0] == null) {
          setInput(input);
          initializeLayers(input);
        }
 else         setInput(input);
        float realLearningRate=layerLearningRates.get(i) != null ? layerLearningRates.get(i) : lr;
        if (isForceNumEpochs()) {
          for (int iteration=0; iteration < iterations; iteration++) {
            log.info("Error on iteration " + iteration + " for layer "+ (i + 1)+ " is "+ getLayers()[i].getReConstructionCrossEntropy());
            getLayers()[i].train(next.getFeatureMatrix(),realLearningRate,new Object[]{corruptionLevel,lr});
            getLayers()[i].iterationDone(iteration);
          }
        }
 else         getLayers()[i].trainTillConvergence(next.getFeatureMatrix(),realLearningRate,new Object[]{corruptionLevel,realLearningRate,iterations});
      }
      iter.reset();
    }
 else {
      boolean activateOnly=getSampleOrActivate() != null && getSampleOrActivate().get(i) != null ? getSampleOrActivate().get(i) : !sampleFromHiddenActivations;
      while (iter.hasNext()) {
        DataSet next=iter.next();
        layerInput=next.getFeatureMatrix();
        for (int j=1; j <= i; j++) {
          if (activateOnly)           layerInput=getSigmoidLayers()[j - 1].activate(layerInput);
 else           if (isSampleFromHiddenActivations())           layerInput=getLayers()[j - 1].sampleHiddenGivenVisible(getSigmoidLayers()[j - 1].getActivationFunction().apply(layerInput)).getSecond();
 else           layerInput=getLayers()[j - 1].sampleHiddenGivenVisible(layerInput).getSecond();
        }
        log.info("Training on layer " + (i + 1));
        float realLearningRate=layerLearningRates.get(i) != null ? layerLearningRates.get(i) : lr;
        if (isForceNumEpochs()) {
          for (int iteration=0; iteration < iterations; iteration++) {
            log.info("Error on iteration " + iteration + " for layer "+ (i + 1)+ " is "+ getLayers()[i].getReConstructionCrossEntropy());
            getLayers()[i].train(layerInput,realLearningRate,new Object[]{corruptionLevel,lr});
            getLayers()[i].iterationDone(iteration);
          }
        }
 else         getLayers()[i].trainTillConvergence(layerInput,realLearningRate,new Object[]{corruptionLevel,realLearningRate,iterations});
      }
      iter.reset();
    }
  }
}
