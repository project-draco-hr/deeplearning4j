{
  if (cnnInputSize != null) {
    new ConvolutionLayerSetup(this,cnnInputSize[0],cnnInputSize[1],cnnInputSize[2]);
  }
  int nLayers=this.confs.size();
  for (int i=1; i < nLayers; i++) {
    if (inputPreProcessors.containsKey(i))     continue;
    Layer currLayer=this.confs.get(i).getLayer();
    if (currLayer instanceof ConvolutionLayer || currLayer instanceof SubsamplingLayer)     continue;
    Layer lastLayer=this.confs.get(i - 1).getLayer();
    if (lastLayer instanceof ConvolutionLayer || lastLayer instanceof SubsamplingLayer)     continue;
    if (currLayer instanceof DenseLayer || currLayer instanceof BasePretrainNetwork || currLayer instanceof OutputLayer) {
      if (lastLayer instanceof BaseRecurrentLayer) {
        inputPreProcessors.put(i,new RnnToFeedForwardPreProcessor());
      }
    }
 else     if (currLayer instanceof BaseRecurrentLayer || currLayer instanceof RnnOutputLayer) {
      if (lastLayer instanceof DenseLayer || lastLayer instanceof BasePretrainNetwork) {
        inputPreProcessors.put(i,new FeedForwardToRnnPreProcessor());
      }
    }
  }
  MultiLayerConfiguration conf=new MultiLayerConfiguration();
  conf.confs=this.confs;
  conf.pretrain=pretrain;
  conf.dampingFactor=dampingFactor;
  conf.backprop=backprop;
  conf.inputPreProcessors=inputPreProcessors;
  conf.backpropType=backpropType;
  conf.tbpttFwdLength=tbpttFwdLength;
  conf.tbpttBackLength=tbpttBackLength;
  conf.redistributeParams=redistributeParams;
  Nd4j.getRandom().setSeed(conf.getConf(0).getSeed());
  return conf;
}
