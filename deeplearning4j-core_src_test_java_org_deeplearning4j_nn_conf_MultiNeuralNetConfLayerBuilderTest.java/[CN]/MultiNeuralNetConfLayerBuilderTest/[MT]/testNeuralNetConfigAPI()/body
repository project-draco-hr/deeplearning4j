{
  LossFunction newLoss=LossFunction.SQUARED_LOSS;
  int newNumIn=numIn + 1;
  int newNumOut=numOut + 1;
  WeightInit newWeight=WeightInit.UNIFORM;
  double newDrop=0.5;
  int[] newFS=new int[]{3,3};
  int newFD=7;
  int[] newStride=new int[]{3,3};
  Convolution.Type newConvType=Convolution.Type.SAME;
  PoolingType newPoolType=PoolingType.AVG;
  double newCorrupt=0.5;
  double newSparsity=0.5;
  HiddenUnit newHidden=HiddenUnit.BINARY;
  VisibleUnit newVisible=VisibleUnit.BINARY;
  MultiLayerConfiguration multiConf1=new NeuralNetConfiguration.Builder().lossFunction(loss).list(2).layer(0,new DenseLayer.Builder().nIn(newNumIn).nOut(newNumOut).activation(act).build()).layer(1,new DenseLayer.Builder().nIn(newNumIn + 1).nOut(newNumOut + 1).activation(act).build()).build();
  NeuralNetConfiguration firstLayer=multiConf1.getConf(0);
  NeuralNetConfiguration secondLayer=multiConf1.getConf(1);
  assertFalse(firstLayer.equals(secondLayer));
}
