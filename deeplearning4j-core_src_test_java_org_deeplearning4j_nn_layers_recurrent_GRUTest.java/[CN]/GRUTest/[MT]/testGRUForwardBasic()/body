{
  int nIn=13;
  int nHiddenUnits=17;
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().layer(new org.deeplearning4j.nn.conf.layers.GRU.Builder().nIn(nIn).nOut(nHiddenUnits).activation("tanh").build()).build();
  int numParams=conf.getLayer().initializer().numParams(conf,true);
  INDArray params=Nd4j.create(1,numParams);
  GRU layer=(GRU)conf.getLayer().instantiate(conf,null,0,params,true);
  INDArray dataSingleExampleTimeLength1=Nd4j.ones(1,nIn,1);
  INDArray activations1=layer.activate(dataSingleExampleTimeLength1);
  assertArrayEquals(activations1.shape(),new int[]{1,nHiddenUnits,1});
  INDArray dataMultiExampleLength1=Nd4j.ones(10,nIn,1);
  INDArray activations2=layer.activate(dataMultiExampleLength1);
  assertArrayEquals(activations2.shape(),new int[]{10,nHiddenUnits,1});
  INDArray dataSingleExampleLength12=Nd4j.ones(1,nIn,12);
  INDArray activations3=layer.activate(dataSingleExampleLength12);
  assertArrayEquals(activations3.shape(),new int[]{1,nHiddenUnits,12});
  INDArray dataMultiExampleLength15=Nd4j.ones(10,nIn,15);
  INDArray activations4=layer.activate(dataMultiExampleLength15);
  assertArrayEquals(activations4.shape(),new int[]{10,nHiddenUnits,15});
}
