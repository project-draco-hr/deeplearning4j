{
  JavaSparkContext sc=new JavaSparkContext(sparkConf);
  try {
    ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in").addLayer("0",new OutputLayer.Builder().nIn(10).nOut(10).build(),"in").setOutputs("0").pretrain(false).backprop(true).build();
    TrainingMaster tm=new ParameterAveragingTrainingMaster.Builder(1).build();
    SparkComputationGraph scg=new SparkComputationGraph(sc,conf,tm);
  }
  finally {
    sc.stop();
  }
}
