{
  for (  String p : SetUtils.union(new HashSet<>(positive),new HashSet<>(negative))) {
    if (!vocab().containsWord(p)) {
      return new ArrayList<>();
    }
  }
  INDArray words=Nd4j.create(positive.size() + negative.size(),lookupTable().layerSize());
  int row=0;
  Set<String> union=SetUtils.union(new HashSet<>(positive),new HashSet<>(negative));
  for (  String s : positive) {
    words.putRow(row++,lookupTable().vector(s));
  }
  for (  String s : negative) {
    words.putRow(row++,lookupTable().vector(s).mul(-1));
  }
  INDArray mean=words.isMatrix() ? words.mean(0) : words;
  if (lookupTable() instanceof InMemoryLookupTable) {
    InMemoryLookupTable l=(InMemoryLookupTable)lookupTable();
    INDArray syn0=l.getSyn0();
    INDArray weights=mean;
    INDArray distances=syn0.mmul(weights.transpose());
    distances.diviRowVector(distances.norm2(1));
    INDArray[] sorted=Nd4j.sortWithIndices(distances,0,false);
    INDArray sort=sorted[0];
    List<String> ret=new ArrayList<>();
    if (top > sort.length())     top=sort.length();
    int end=top + 1;
    for (int i=0; i < end; i++) {
      String word=vocab().wordAtIndex(sort.getInt(i));
      if (union.contains(word)) {
        end++;
        if (end >= sort.length())         break;
        continue;
      }
      String add=vocab().wordAtIndex(sort.getInt(i));
      if (add == null || add.equals("UNK") || add.equals("STOP")) {
        end++;
        if (end >= sort.length())         break;
        continue;
      }
      ret.add(vocab().wordAtIndex(sort.getInt(i)));
    }
    return ret;
  }
  Counter<String> distances=new Counter<>();
  for (  String s : vocab().words()) {
    INDArray otherVec=getWordVectorMatrix(s);
    double sim=Transforms.cosineSim(mean,otherVec);
    distances.incrementCount(s,sim);
  }
  distances.keepTopNKeys(top);
  return distances.keySet();
}
