{
  if (layerWiseConfigurations == null || layers == null)   intializeConfigurations();
  INDArray layerInput=input();
  int inputSize;
  if (getnLayers() < 1)   throw new IllegalStateException("Unable to createComplex network neuralNets; number specified is less than 1");
  int[] hiddenLayerSizes=layerWiseConfigurations.getHiddenLayerSizes();
  int numHiddenLayersSizesUsed=0;
  if (this.layers == null || this.layers[0] == null) {
    this.layers=new Layer[hiddenLayerSizes.length + 1];
    for (int i=0; i < getnLayers(); i++) {
      if (i == 0) {
        inputSize=layerWiseConfigurations.getConf(0).getnIn();
        numHiddenLayersSizesUsed++;
        if (input == null) {
          input=Nd4j.ones(inputSize);
          layerInput=input;
        }
      }
 else       inputSize=hiddenLayerSizes[numHiddenLayersSizesUsed - 1];
      if (i == 0) {
        layerWiseConfigurations.getConf(i).setnIn(inputSize);
        layerWiseConfigurations.getConf(i).setnOut(hiddenLayerSizes[i]);
        LayerFactory conf2=layerWiseConfigurations.getConf(i).getLayerFactory();
        NeuralNetConfiguration currConf=layerWiseConfigurations.getConf(i);
        layers[i]=conf2.create(currConf);
      }
 else       if (i < getLayers().length - 1) {
        if (input != null)         layerInput=activationFromPrevLayer(i - 1,layerInput);
        if (layerInput.columns() == hiddenLayerSizes[i])         numHiddenLayersSizesUsed++;
        layerWiseConfigurations.getConf(i).setnIn(layerInput.columns());
        layerWiseConfigurations.getConf(i).setnOut(hiddenLayerSizes[i]);
        layers[i]=layerWiseConfigurations.getConf(i).getLayerFactory().create(layerWiseConfigurations.getConf(i));
      }
    }
    NeuralNetConfiguration last=layerWiseConfigurations.getConf(layerWiseConfigurations.getConfs().size() - 1);
    NeuralNetConfiguration secondToLast=layerWiseConfigurations.getConf(layerWiseConfigurations.getConfs().size() - 2);
    last.setnIn(secondToLast.getnOut());
    this.layers[layers.length - 1]=last.getLayerFactory().create(last);
    initCalled=true;
    initMask();
  }
}
