{
  if (layerWiseConfigurations == null || layers == null)   intializeConfigurations();
  INDArray layerInput=input();
  int inputSize=0;
  if (getnLayers() < 1)   throw new IllegalStateException("Unable to createComplex network neuralNets; number specified is less than 1");
  int[] hiddenLayerSizes=layerWiseConfigurations.getHiddenLayerSizes();
  int numHiddenLayersSizesUsed=1;
  if (this.layers == null || this.layers[0] == null) {
    if (this.layers == null)     this.layers=new Layer[getnLayers()];
    for (int i=0; i < getnLayers(); i++) {
      if (i == 0) {
        inputSize=layerWiseConfigurations.getConf(0).getNOut();
        if (input == null) {
          input=Nd4j.ones(inputSize);
          layerInput=input;
        }
      }
 else       if (LayerFactories.typeForFactory(layerWiseConfigurations.getConf(i)) == Layer.Type.FEED_FORWARD)       inputSize=hiddenLayerSizes[numHiddenLayersSizesUsed - 1];
      if (i == 0) {
        Layer.Type type=LayerFactories.typeForFactory(layerWiseConfigurations.getConf(i));
        if (type == Layer.Type.FEED_FORWARD) {
          layerWiseConfigurations.getConf(i).setNIn(inputSize);
          layerWiseConfigurations.getConf(i).setNOut(hiddenLayerSizes[i]);
        }
        layerWiseConfigurations.getConf(i).setNIn(inputSize);
        layerWiseConfigurations.getConf(i).setNOut(hiddenLayerSizes[i]);
        layers[i]=LayerFactories.getFactory(layerWiseConfigurations.getConf(i)).create(layerWiseConfigurations.getConf(i));
      }
 else       if (i < getLayers().length - 1) {
        if (input != null)         layerInput=activationFromPrevLayer(i - 1,layerInput);
        Layer.Type type=LayerFactories.typeForFactory(layerWiseConfigurations.getConf(i));
        if (type == Layer.Type.FEED_FORWARD) {
          numHiddenLayersSizesUsed++;
          layerWiseConfigurations.getConf(i).setNIn(layerInput.columns());
          layerWiseConfigurations.getConf(i).setNOut(hiddenLayerSizes[i]);
        }
        layers[i]=LayerFactories.getFactory(layerWiseConfigurations.getConf(i)).create(layerWiseConfigurations.getConf(i),listeners);
      }
    }
    NeuralNetConfiguration last=layerWiseConfigurations.getConf(layerWiseConfigurations.getConfs().size() - 1);
    Layer.Type type=LayerFactories.typeForFactory(layerWiseConfigurations.getConf(layerWiseConfigurations.getConfs().size() - 1));
    if (type == Layer.Type.FEED_FORWARD) {
      last.setNIn(hiddenLayerSizes[hiddenLayerSizes.length - 1]);
    }
    this.layers[layers.length - 1]=LayerFactories.getFactory(last).create(last);
    initCalled=true;
    initMask();
  }
}
