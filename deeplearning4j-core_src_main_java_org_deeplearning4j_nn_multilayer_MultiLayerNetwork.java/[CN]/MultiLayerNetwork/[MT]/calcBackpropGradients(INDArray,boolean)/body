{
  String multiGradientKey;
  Gradient gradient=new DefaultGradient(flattenedGradients);
  Layer currLayer;
  int numLayers=getnLayers();
  LinkedList<Triple<String,INDArray,Character>> gradientList=new LinkedList<>();
  int layerFrom;
  Pair<Gradient,INDArray> currPair;
  if (withOutputLayer) {
    if (!(getOutputLayer() instanceof BaseOutputLayer)) {
      log.warn("Warning: final layer isn't output layer. You cannot use backprop without an output layer.");
      return null;
    }
    BaseOutputLayer<?> outputLayer=(BaseOutputLayer<?>)getOutputLayer();
    if (labels == null)     throw new IllegalStateException("No labels found");
    outputLayer.setLabels(labels);
    currPair=outputLayer.backpropGradient(null);
    for (    Map.Entry<String,INDArray> entry : currPair.getFirst().gradientForVariable().entrySet()) {
      String origName=entry.getKey();
      multiGradientKey=String.valueOf(numLayers - 1) + "_" + origName;
      gradientList.addLast(new Triple<>(multiGradientKey,entry.getValue(),currPair.getFirst().flatteningOrderForVariable(origName)));
    }
    if (getLayerWiseConfigurations().getInputPreProcess(numLayers - 1) != null)     currPair=new Pair<>(currPair.getFirst(),this.layerWiseConfigurations.getInputPreProcess(numLayers - 1).backprop(currPair.getSecond(),getInputMiniBatchSize()));
    layerFrom=numLayers - 2;
  }
 else {
    currPair=new Pair<>(null,epsilon);
    layerFrom=numLayers - 1;
  }
  for (int j=layerFrom; j >= 0; j--) {
    currLayer=getLayer(j);
    currPair=currLayer.backpropGradient(currPair.getSecond());
    LinkedList<Triple<String,INDArray,Character>> tempList=new LinkedList<>();
    for (    Map.Entry<String,INDArray> entry : currPair.getFirst().gradientForVariable().entrySet()) {
      String origName=entry.getKey();
      multiGradientKey=String.valueOf(j) + "_" + origName;
      tempList.addFirst(new Triple<>(multiGradientKey,entry.getValue(),currPair.getFirst().flatteningOrderForVariable(origName)));
    }
    for (    Triple<String,INDArray,Character> triple : tempList)     gradientList.addFirst(triple);
    if (getLayerWiseConfigurations().getInputPreProcess(j) != null)     currPair=new Pair<>(currPair.getFirst(),getLayerWiseConfigurations().getInputPreProcess(j).backprop(currPair.getSecond(),getInputMiniBatchSize()));
  }
  for (  Triple<String,INDArray,Character> triple : gradientList) {
    gradient.setGradientFor(triple.getFirst(),triple.getSecond(),triple.getThird());
  }
  return new Pair<>(gradient,currPair.getSecond());
}
