{
  if (!initDone) {
    initDone=true;
    Heartbeat heartbeat=Heartbeat.getInstance();
    task.setNetworkType(Task.NetworkType.MultilayerNetwork);
    task.setArchitectureType(Task.ArchitectureType.RECURRENT);
    try {
      if (this.getLayers() != null && this.getLayers().length > 0) {
        for (        Layer layer : this.getLayers()) {
          if (layer instanceof RBM || layer instanceof org.deeplearning4j.nn.layers.feedforward.rbm.RBM) {
            task.setArchitectureType(Task.ArchitectureType.RBM);
            break;
          }
          if (layer.type().equals(Type.CONVOLUTIONAL)) {
            task.setArchitectureType(Task.ArchitectureType.CONVOLUTION);
            break;
          }
 else           if (layer.type().equals(Type.RECURRENT) || layer.type().equals(Type.RECURSIVE)) {
            task.setArchitectureType(Task.ArchitectureType.RECURRENT);
            break;
          }
        }
      }
 else       task.setArchitectureType(Task.ArchitectureType.UNKNOWN);
    }
 catch (    Exception e) {
      ;
    }
    Environment env=EnvironmentUtils.buildEnvironment();
    heartbeat.reportEvent(Event.STANDALONE,env,task);
  }
}
