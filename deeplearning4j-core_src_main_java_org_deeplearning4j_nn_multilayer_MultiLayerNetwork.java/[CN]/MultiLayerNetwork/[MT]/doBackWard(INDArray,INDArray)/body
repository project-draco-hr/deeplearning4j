{
  setInput(input);
  this.labels=labels;
  if (!(getOutputLayer() instanceof OutputLayer)) {
    log.warn("Warning: final layer isn't output layer. You can ignore this message if you just intend on using a a deep neural network with no output layer.");
    return;
  }
  OutputLayer output=(OutputLayer)getOutputLayer();
  if (labels == null)   throw new IllegalStateException("No labels found");
  if (output.conf().getWeightInit() == WeightInit.ZERO) {
    throw new IllegalStateException("Output layer weights cannot be initialized to zero when using backprop.");
  }
  ;
  output.setLabels(labels);
  Gradient nextGradients;
  for (int i=0; i < getLayerWiseConfigurations().getConf(getLayerWiseConfigurations().getConfs().size() - 1).getNumIterations(); i++) {
    int numLayers=getnLayers();
    List<Gradient> gradientUpdates=new ArrayList<>();
    Pair<List<INDArray>,List<INDArray>> activationsAndDeriv=feedForwardActivationsAndDerivatives(true);
    List<INDArray> activations=activationsAndDeriv.getFirst();
    INDArray outputActivation=activations.get(activations.size() - 1);
    List<INDArray> derivatives=activationsAndDeriv.getSecond();
    INDArray activationDeriv=derivatives.get(derivatives.size() - 1);
    nextGradients=output.backwardGradient(activationDeriv,null,null,outputActivation);
    gradientUpdates.add(nextGradients);
    for (int j=numLayers - 2; j >= 0; j--) {
      INDArray currActivation=activations.get(j);
      INDArray currDerivative=derivatives.get(j);
      Layer nextLayer=getLayers()[j + 1];
      nextGradients=getLayers()[j].backwardGradient(currDerivative,nextLayer,nextGradients,currActivation);
      gradientUpdates.add(nextGradients);
    }
    Collections.reverse(gradientUpdates);
    for (int k=0; k < numLayers; k++) {
      Layer currLayer=getLayers()[k];
      currLayer.getOptimizer().updateGradientAccordingToParams(gradientUpdates.get(k),currLayer,input.size(0),i);
      currLayer.update(gradientUpdates.get(k));
    }
    getOutputLayer().computeGradientAndScore();
    for (    IterationListener listener : listeners)     listener.iterationDone(getOutputLayer(),i);
  }
}
