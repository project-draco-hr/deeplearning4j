{
  String multiGradientKey;
  gradient=new DefaultGradient();
  Layer currLayer, prevLayer;
  if (!(getOutputLayer() instanceof OutputLayer)) {
    log.warn("Warning: final layer isn't output layer. You cannot use backprop without an output layer.");
    return;
  }
  feedForward();
  OutputLayer outputLayer=(OutputLayer)getOutputLayer();
  if (labels == null)   throw new IllegalStateException("No labels found");
  if (outputLayer.conf().getWeightInit() == WeightInit.ZERO) {
    throw new IllegalStateException("Output layer weights cannot be initialized to zero when using backprop.");
  }
  outputLayer.setLabels(labels);
  int numLayers=getnLayers();
  Pair<Gradient,INDArray> currPair=outputLayer.backpropGradient(null,null,null);
  for (  Map.Entry<String,INDArray> entry : currPair.getFirst().gradientForVariable().entrySet()) {
    multiGradientKey=String.valueOf(numLayers - 1) + "_" + entry.getKey();
    gradient.setGradientFor(multiGradientKey,entry.getValue());
  }
  if (getLayerWiseConfigurations().getInputPreProcess(numLayers - 1) != null)   currPair=new Pair<>(currPair.getFirst(),this.layerWiseConfigurations.getInputPreProcess(numLayers - 1).backprop(currPair.getSecond()));
  prevLayer=outputLayer;
  for (int j=numLayers - 2; j >= 0; j--) {
    currLayer=getLayer(j);
    currPair=currLayer.backpropGradient(currPair.getSecond(),currPair.getFirst(),prevLayer);
    for (    Map.Entry<String,INDArray> entry : currPair.getFirst().gradientForVariable().entrySet()) {
      multiGradientKey=String.valueOf(j) + "_" + entry.getKey();
      gradient.setGradientFor(multiGradientKey,entry.getValue());
    }
    if (getLayerWiseConfigurations().getInputPreProcess(j) != null)     currPair=new Pair<>(currPair.getFirst(),this.layerWiseConfigurations.getInputPreProcess(numLayers - 1).backprop(currPair.getSecond()));
    prevLayer=currLayer;
  }
  feedForward();
  score=outputLayer.score();
}
