{
  String multiGradientKey;
  gradient=new DefaultGradient();
  Layer currLayer;
  if (!(getOutputLayer() instanceof BaseOutputLayer)) {
    log.warn("Warning: final layer isn't output layer. You cannot use backprop without an output layer.");
    return;
  }
  BaseOutputLayer<?> outputLayer=(BaseOutputLayer<?>)getOutputLayer();
  if (labels == null)   throw new IllegalStateException("No labels found");
  outputLayer.setLabels(labels);
  int numLayers=getnLayers();
  LinkedList<Pair<String,INDArray>> gradientList=new LinkedList<>();
  Pair<Gradient,INDArray> currPair=outputLayer.backpropGradient(null);
  for (  Map.Entry<String,INDArray> entry : currPair.getFirst().gradientForVariable().entrySet()) {
    multiGradientKey=String.valueOf(numLayers - 1) + "_" + entry.getKey();
    gradientList.addLast(new Pair<>(multiGradientKey,entry.getValue()));
  }
  if (getLayerWiseConfigurations().getInputPreProcess(numLayers - 1) != null)   currPair=new Pair<>(currPair.getFirst(),this.layerWiseConfigurations.getInputPreProcess(numLayers - 1).backprop(currPair.getSecond(),getInputMiniBatchSize()));
  for (int j=numLayers - 2; j >= 0; j--) {
    currLayer=getLayer(j);
    currPair=currLayer.backpropGradient(currPair.getSecond());
    LinkedList<Pair<String,INDArray>> tempList=new LinkedList<>();
    for (    Map.Entry<String,INDArray> entry : currPair.getFirst().gradientForVariable().entrySet()) {
      multiGradientKey=String.valueOf(j) + "_" + entry.getKey();
      tempList.addFirst(new Pair<>(multiGradientKey,entry.getValue()));
    }
    for (    Pair<String,INDArray> pair : tempList)     gradientList.addFirst(pair);
    if (getLayerWiseConfigurations().getInputPreProcess(j) != null)     currPair=new Pair<>(currPair.getFirst(),getLayerWiseConfigurations().getInputPreProcess(j).backprop(currPair.getSecond(),getInputMiniBatchSize()));
  }
  for (  Pair<String,INDArray> pair : gradientList)   gradient.setGradientFor(pair.getFirst(),pair.getSecond());
}
