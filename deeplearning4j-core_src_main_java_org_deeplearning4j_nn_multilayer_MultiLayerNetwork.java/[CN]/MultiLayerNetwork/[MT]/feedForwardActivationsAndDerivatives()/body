{
  INDArray currInput=this.input;
  List<INDArray> activations=new ArrayList<>();
  List<INDArray> derivatives=new ArrayList<>();
  activations.add(currInput);
  for (int i=0; i < layers.length; i++) {
    currInput=zFromPrevLayer(i,currInput);
    if (layers[i].conf().getActivationFunction().equals("softmax"))     activations.add(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("softmax",currInput.dup()),1));
 else     activations.add(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(layerWiseConfigurations.getConf(i).getActivationFunction(),currInput)));
  }
  currInput=this.input;
  for (int i=0; i < layers.length; i++) {
    currInput=zFromPrevLayer(i,currInput);
    INDArray dup=currInput.dup();
    if (layers[i].conf().getActivationFunction().equals("softmax"))     derivatives.add(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(layerWiseConfigurations.getConf(i).getActivationFunction(),dup).derivative(),1));
 else     derivatives.add(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(layerWiseConfigurations.getConf(i).getActivationFunction(),dup).derivative()));
  }
  derivatives.add(derivatives.get(layers.length - 1));
  return new Pair<>(activations,derivatives);
}
