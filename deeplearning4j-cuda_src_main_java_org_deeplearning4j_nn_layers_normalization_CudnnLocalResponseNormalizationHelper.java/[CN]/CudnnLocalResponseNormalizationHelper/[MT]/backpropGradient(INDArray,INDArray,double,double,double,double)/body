{
  int miniBatch=input.size(0);
  int depth=input.size(1);
  int inH=input.size(2);
  int inW=input.size(3);
  Gradient retGradient=new DefaultGradient();
  if (!Shape.strideDescendingCAscendingF(epsilon)) {
    epsilon=epsilon.dup();
  }
  int[] srcStride=input.stride();
  int[] deltaStride=epsilon.stride();
  if (Nd4j.getExecutioner() instanceof GridExecutioner)   ((GridExecutioner)Nd4j.getExecutioner()).flushQueue();
  checkCudnn(cudnnSetTensor4dDescriptorEx(cudnnContext.srcTensorDesc,dataType,miniBatch,depth,inH,inW,srcStride[0],srcStride[1],srcStride[2],srcStride[3]));
  checkCudnn(cudnnSetTensor4dDescriptorEx(cudnnContext.deltaTensorDesc,dataType,miniBatch,depth,inH,inW,deltaStride[0],deltaStride[1],deltaStride[2],deltaStride[3]));
  checkCudnn(cudnnSetLRNDescriptor(cudnnContext.lrnDesc,(int)n,alpha,beta,k));
  INDArray nextEpsilon=Nd4j.createUninitialized(new int[]{miniBatch,depth,inH,inW},'c');
  int[] dstStride=nextEpsilon.stride();
  checkCudnn(cudnnSetTensor4dDescriptorEx(cudnnContext.dstTensorDesc,dataType,miniBatch,depth,inH,inW,dstStride[0],dstStride[1],dstStride[2],dstStride[3]));
  Allocator allocator=AtomicAllocator.getInstance();
  CudaContext context=allocator.getFlowController().prepareAction(input,epsilon,activations,nextEpsilon);
  Pointer srcData=allocator.getPointer(input,context);
  Pointer epsData=allocator.getPointer(epsilon,context);
  Pointer zData=allocator.getPointer(activations,context);
  Pointer dstData=allocator.getPointer(nextEpsilon,context);
  checkCudnn(cudnnSetStream(cudnnContext,new CUstream_st(context.getOldStream())));
  checkCudnn(cudnnLRNCrossChannelBackward(cudnnContext,cudnnContext.lrnDesc,CUDNN_LRN_CROSS_CHANNEL_DIM1,this.alpha,cudnnContext.deltaTensorDesc,zData,cudnnContext.deltaTensorDesc,epsData,cudnnContext.srcTensorDesc,srcData,this.beta,cudnnContext.dstTensorDesc,dstData));
  allocator.registerAction(context,input,epsilon,activations,nextEpsilon);
  return new Pair<>(retGradient,nextEpsilon);
}
