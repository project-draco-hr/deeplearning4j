{
  arr=arr.reshape(new int[]{1,arr.length()});
  INDArray cast=arr;
  if (op == ScalarOp.NORM_1) {
    return NDArrays.scalar(NDArrays.getBlasWrapper().asum(cast));
  }
 else   if (op == ScalarOp.NORM_2) {
    return NDArrays.scalar(NDArrays.getBlasWrapper().nrm2(cast));
  }
 else   if (op == ScalarOp.NORM_MAX) {
    int i=NDArrays.getBlasWrapper().iamax(cast);
    return arr.getScalar(i);
  }
  INDArray s=NDArrays.scalar(0);
  for (int i=0; i < arr.length(); i++) {
switch (op) {
case SUM:
      s.addi(arr.getScalar(i));
    break;
case MEAN:
  s.addi(arr.getScalar(i));
break;
case MAX:
double curr=(double)arr.getScalar(i).element();
double sEle1=(double)arr.getScalar(i).element();
if (curr > sEle1) s=arr.getScalar(i);
break;
case MIN:
double curr2=(double)arr.getScalar(i).element();
double sEle2=(double)arr.getScalar(i).element();
if (curr2 < sEle2) s=arr.getScalar(i);
break;
case PROD:
s.muli(arr.getScalar(i));
break;
}
}
if (op == ScalarOp.MEAN) s.divi(NDArrays.scalar(arr.length()));
return s;
}
