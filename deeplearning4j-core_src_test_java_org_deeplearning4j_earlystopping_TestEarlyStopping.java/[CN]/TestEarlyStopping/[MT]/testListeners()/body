{
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(1).updater(Updater.SGD).weightInit(WeightInit.XAVIER).list(1).layer(0,new OutputLayer.Builder().nIn(4).nOut(3).lossFunction(LossFunctions.LossFunction.MCXENT).build()).pretrain(false).backprop(true).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.setListeners(new ScoreIterationListener(1));
  DataSetIterator irisIter=new IrisDataSetIterator(150,150);
  EarlyStoppingModelSaver<MultiLayerNetwork> saver=new InMemoryModelSaver<>();
  EarlyStoppingConfiguration<MultiLayerNetwork> esConf=new EarlyStoppingConfiguration.Builder<MultiLayerNetwork>().epochTerminationConditions(new MaxEpochsTerminationCondition(5)).iterationTerminationConditions(new MaxTimeIterationTerminationCondition(1,TimeUnit.MINUTES)).scoreCalculator(new DataSetLossCalculator(irisIter,true)).modelSaver(saver).build();
  LoggingEarlyStoppingListener listener=new LoggingEarlyStoppingListener();
  IEarlyStoppingTrainer trainer=new EarlyStoppingTrainer(esConf,net,irisIter,listener);
  trainer.fit();
  assertEquals(1,listener.onStartCallCount);
  assertEquals(5,listener.onEpochCallCount);
  assertEquals(1,listener.onCompletionCallCount);
}
