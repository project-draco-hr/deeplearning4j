{
  if (trainWord2Vec)   vec.train();
  log.info("Built vocab");
  addWordExamplesAsVectors();
  log.info("Training " + trainingExamples.size() + " examples");
  for (int i=0; i < exampleString.size(); i++) {
    Window window=exampleString.get(i);
    log.info("Window " + window.asTokens() + " with label "+ stringOutcomes.get(i)+ " and focus word "+ window.getFocusWord()+ " and begin label "+ window.isBeginLabel());
  }
  int[] numNodes={500,500};
  DoubleMatrix inputs=new DoubleMatrix(getInputs());
  DoubleMatrix outputs=new DoubleMatrix(getOutputs());
  CounterMap<Integer,Double> stats=new CounterMap<Integer,Double>();
  for (int i=0; i < outputs.columns; i++) {
    DoubleMatrix col=outputs.getColumn(i);
    for (int j=0; j < col.rows; j++)     stats.incrementCount(i,col.get(j),1.0);
  }
  stats.normalize();
  log.info(stats.toString());
  DataSet d=new DataSet(inputs,outputs);
  prop=new CDBN.Builder().hiddenLayerSizes(numNodes).numberOfInputs(inputs.columns).numberOfOutPuts(outputs.columns).withRng(new MersenneTwister(123)).build();
  DataSet train=d;
  prop.trainNetwork(train.getFirst(),train.getSecond(),deepLearningParams);
  initializeViterbi(d);
}
