{
  RandomGenerator gen=new MersenneTwister(123);
  DataSetIterator fetcher=new LFWDataSetIterator(28,28);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).rng(gen).learningRate(1e-3f).nIn(fetcher.inputColumns()).nOut(fetcher.totalOutcomes()).build();
  DBN d=new DBN.Builder().configure(conf).hiddenLayerSizes(new int[]{500,250,100}).build();
  d.getOutputLayer().conf().setActivationFunction(Activations.softMaxRows());
  d.getOutputLayer().conf().setLossFunction(LossFunctions.LossFunction.MCXENT);
  while (fetcher.hasNext()) {
    d.fit(fetcher.next());
  }
}
