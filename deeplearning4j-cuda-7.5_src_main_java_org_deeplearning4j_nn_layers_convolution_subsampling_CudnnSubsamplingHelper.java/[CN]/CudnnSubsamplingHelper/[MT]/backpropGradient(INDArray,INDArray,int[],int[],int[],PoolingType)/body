{
  int miniBatch=input.size(0);
  int depth=input.size(1);
  int inH=input.size(2);
  int inW=input.size(3);
  int outH=Convolution.outSize(inH,kernel[0],strides[0],pad[0],false);
  int outW=Convolution.outSize(inW,kernel[1],strides[1],pad[1],false);
  Gradient retGradient=new DefaultGradient();
  int poolingMode;
switch (poolingType) {
case AVG:
    poolingMode=CUDNN_POOLING_AVERAGE_COUNT_INCLUDE_PADDING;
  break;
case MAX:
poolingMode=CUDNN_POOLING_MAX;
break;
case NONE:
return new Pair<>(retGradient,epsilon);
default :
return null;
}
INDArray z=activate(input,true,kernel,strides,pad,poolingType);
if (!Shape.strideDescendingCAscendingF(epsilon)) {
epsilon=epsilon.dup();
}
int[] srcStride=input.stride();
int[] deltaStride=epsilon.stride();
checkCudnn(cudnnSetTensor4dDescriptorEx(cudnnContext.srcTensorDesc,dataType,miniBatch,depth,inH,inW,srcStride[0],srcStride[1],srcStride[2],srcStride[3]));
checkCudnn(cudnnSetTensor4dDescriptorEx(cudnnContext.deltaTensorDesc,dataType,miniBatch,depth,outH,outW,deltaStride[0],deltaStride[1],deltaStride[2],deltaStride[3]));
checkCudnn(cudnnSetPooling2dDescriptor(cudnnContext.poolingDesc,poolingMode,CUDNN_PROPAGATE_NAN,kernel[0],kernel[1],pad[0],pad[1],strides[0],strides[1]));
INDArray outEpsilon=Nd4j.create(new int[]{miniBatch,depth,inH,inW},'c');
int[] dstStride=outEpsilon.stride();
checkCudnn(cudnnSetTensor4dDescriptorEx(cudnnContext.dstTensorDesc,dataType,miniBatch,depth,inH,inW,dstStride[0],dstStride[1],dstStride[2],dstStride[3]));
Allocator allocator=AtomicAllocator.getInstance();
CudaContext context=allocator.getFlowController().prepareAction(input,epsilon,z,outEpsilon);
Pointer srcData=allocator.getPointer(input,context);
Pointer epsData=allocator.getPointer(epsilon,context);
Pointer zData=allocator.getPointer(z,context);
Pointer dstData=allocator.getPointer(outEpsilon,context);
checkCudnn(cudnnPoolingBackward(cudnnContext,cudnnContext.poolingDesc,alpha,cudnnContext.deltaTensorDesc,zData,cudnnContext.deltaTensorDesc,epsData,cudnnContext.srcTensorDesc,srcData,beta,cudnnContext.dstTensorDesc,dstData));
allocator.registerAction(context,input,epsilon,z,outEpsilon);
return new Pair<>(retGradient,outEpsilon);
}
