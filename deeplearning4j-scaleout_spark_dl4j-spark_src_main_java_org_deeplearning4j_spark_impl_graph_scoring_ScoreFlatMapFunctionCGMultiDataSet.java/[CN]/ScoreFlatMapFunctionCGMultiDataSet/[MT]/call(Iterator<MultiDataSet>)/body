{
  if (!dataSetIterator.hasNext()) {
    return Collections.singletonList(new Tuple2<>(0,0.0));
  }
  MultiDataSetIterator iter=new IteratorMultiDataSetIterator(dataSetIterator,minibatchSize);
  ComputationGraph network=new ComputationGraph(ComputationGraphConfiguration.fromJson(json));
  network.init();
  INDArray val=params.value().unsafeDuplication();
  if (val.length() != network.numParams(false))   throw new IllegalStateException("Network did not have same number of parameters as the broadcast set parameters");
  network.setParams(val);
  List<Tuple2<Integer,Double>> out=new ArrayList<>();
  while (iter.hasNext()) {
    MultiDataSet ds=iter.next();
    double score=network.score(ds,false);
    int numExamples=ds.getFeatures(0).size(0);
    out.add(new Tuple2<>(numExamples,score * numExamples));
  }
  return out;
}
