{
  final int nIn=2;
  final int layerSize=3;
  final int miniBatchSize=1;
  final int timeSeriesLength=5;
  Nd4j.getRandom().setSeed(12345);
  final NeuralNetConfiguration confBidirectional=new NeuralNetConfiguration.Builder().layer(new org.deeplearning4j.nn.conf.layers.GravesBidirectionalLSTM.Builder().nIn(nIn).nOut(layerSize).weightInit(WeightInit.DISTRIBUTION).dist(new UniformDistribution(-0.1,0.1)).activation("tanh").updater(Updater.NONE).build()).build();
  final NeuralNetConfiguration confForwards=new NeuralNetConfiguration.Builder().layer(new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(nIn).nOut(layerSize).weightInit(WeightInit.ZERO).activation("tanh").build()).build();
  final GravesBidirectionalLSTM bidirectionalLSTM=LayerFactories.getFactory(confBidirectional.getLayer()).create(confBidirectional);
  final GravesLSTM forwardsLSTM=LayerFactories.getFactory(confForwards.getLayer()).create(confForwards);
  final INDArray sig=Nd4j.rand(new int[]{miniBatchSize,nIn,timeSeriesLength});
  final INDArray sigb=sig.dup();
  reverseColumnsInPlace(sigb.slice(0));
  final INDArray recurrentWeightsF=bidirectionalLSTM.getParam(GravesBidirectionalLSTMParamInitializer.RECURRENT_WEIGHT_KEY_FORWARDS);
  final INDArray inputWeightsF=bidirectionalLSTM.getParam(GravesBidirectionalLSTMParamInitializer.INPUT_WEIGHT_KEY_FORWARDS);
  final INDArray biasWeightsF=bidirectionalLSTM.getParam(GravesBidirectionalLSTMParamInitializer.BIAS_KEY_FORWARDS);
  final INDArray recurrentWeightsF2=forwardsLSTM.getParam(GravesLSTMParamInitializer.RECURRENT_WEIGHT_KEY);
  final INDArray inputWeightsF2=forwardsLSTM.getParam(GravesLSTMParamInitializer.INPUT_WEIGHT_KEY);
  final INDArray biasWeightsF2=forwardsLSTM.getParam(GravesLSTMParamInitializer.BIAS_KEY);
  assertArrayEquals(recurrentWeightsF2.shape(),recurrentWeightsF.shape());
  assertArrayEquals(inputWeightsF2.shape(),inputWeightsF.shape());
  assertArrayEquals(biasWeightsF2.shape(),biasWeightsF.shape());
  forwardsLSTM.setParam(GravesLSTMParamInitializer.RECURRENT_WEIGHT_KEY,recurrentWeightsF);
  forwardsLSTM.setParam(GravesLSTMParamInitializer.INPUT_WEIGHT_KEY,inputWeightsF);
  forwardsLSTM.setParam(GravesLSTMParamInitializer.BIAS_KEY,biasWeightsF);
  final INDArray recurrentWeightsB=bidirectionalLSTM.getParam(GravesBidirectionalLSTMParamInitializer.RECURRENT_WEIGHT_KEY_BACKWARDS);
  final INDArray inputWeightsB=bidirectionalLSTM.getParam(GravesBidirectionalLSTMParamInitializer.INPUT_WEIGHT_KEY_BACKWARDS);
  final INDArray biasWeightsB=bidirectionalLSTM.getParam(GravesBidirectionalLSTMParamInitializer.BIAS_KEY_BACKWARDS);
  assertArrayEquals(recurrentWeightsF.shape(),recurrentWeightsB.shape());
  assertArrayEquals(inputWeightsF.shape(),inputWeightsB.shape());
  assertArrayEquals(biasWeightsF.shape(),biasWeightsB.shape());
  bidirectionalLSTM.setParam(GravesBidirectionalLSTMParamInitializer.RECURRENT_WEIGHT_KEY_BACKWARDS,Nd4j.zeros(recurrentWeightsB.shape()));
  bidirectionalLSTM.setParam(GravesBidirectionalLSTMParamInitializer.INPUT_WEIGHT_KEY_BACKWARDS,Nd4j.zeros(inputWeightsB.shape()));
  bidirectionalLSTM.setParam(GravesBidirectionalLSTMParamInitializer.BIAS_KEY_BACKWARDS,Nd4j.zeros(biasWeightsB.shape()));
  forwardsLSTM.setInput(sig);
  final INDArray activation1=forwardsLSTM.activate(sig).slice(0);
  final INDArray activation2=bidirectionalLSTM.activate(sig).slice(0);
  assertArrayEquals(activation1.data().asFloat(),activation2.data().asFloat(),1e-5f);
  final INDArray randSig=Nd4j.rand(new int[]{1,layerSize,timeSeriesLength});
  final INDArray randSigBackwards=randSig.dup();
  reverseColumnsInPlace(randSigBackwards.slice(0));
  final Pair<Gradient,INDArray> backprop1=forwardsLSTM.backpropGradient(randSig);
  final Pair<Gradient,INDArray> backprop2=bidirectionalLSTM.backpropGradient(randSig);
  assertArrayEquals(backprop1.getFirst().getGradientFor(GravesLSTMParamInitializer.RECURRENT_WEIGHT_KEY).data().asFloat(),backprop2.getFirst().getGradientFor(GravesBidirectionalLSTMParamInitializer.RECURRENT_WEIGHT_KEY_FORWARDS).data().asFloat(),1e-5f);
  assertArrayEquals(backprop1.getFirst().getGradientFor(GravesLSTMParamInitializer.INPUT_WEIGHT_KEY).data().asFloat(),backprop2.getFirst().getGradientFor(GravesBidirectionalLSTMParamInitializer.INPUT_WEIGHT_KEY_FORWARDS).data().asFloat(),1e-5f);
  assertArrayEquals(backprop1.getFirst().getGradientFor(GravesLSTMParamInitializer.BIAS_KEY).data().asFloat(),backprop2.getFirst().getGradientFor(GravesBidirectionalLSTMParamInitializer.BIAS_KEY_FORWARDS).data().asFloat(),1e-5f);
  bidirectionalLSTM.setParam(GravesBidirectionalLSTMParamInitializer.RECURRENT_WEIGHT_KEY_BACKWARDS,bidirectionalLSTM.getParam(GravesBidirectionalLSTMParamInitializer.RECURRENT_WEIGHT_KEY_FORWARDS));
  bidirectionalLSTM.setParam(GravesBidirectionalLSTMParamInitializer.INPUT_WEIGHT_KEY_BACKWARDS,bidirectionalLSTM.getParam(GravesBidirectionalLSTMParamInitializer.INPUT_WEIGHT_KEY_FORWARDS));
  bidirectionalLSTM.setParam(GravesBidirectionalLSTMParamInitializer.BIAS_KEY_BACKWARDS,bidirectionalLSTM.getParam(GravesBidirectionalLSTMParamInitializer.BIAS_KEY_FORWARDS));
  bidirectionalLSTM.setParam(GravesBidirectionalLSTMParamInitializer.RECURRENT_WEIGHT_KEY_FORWARDS,Nd4j.zeros(recurrentWeightsB.shape()));
  bidirectionalLSTM.setParam(GravesBidirectionalLSTMParamInitializer.INPUT_WEIGHT_KEY_FORWARDS,Nd4j.zeros(inputWeightsB.shape()));
  bidirectionalLSTM.setParam(GravesBidirectionalLSTMParamInitializer.BIAS_KEY_FORWARDS,Nd4j.zeros(biasWeightsB.shape()));
  final INDArray activation3=bidirectionalLSTM.activate(sigb).slice(0);
  final INDArray activation3Reverse=activation3.dup();
  reverseColumnsInPlace(activation3Reverse);
  assertEquals(activation3Reverse,activation1);
  assertArrayEquals(activation3Reverse.shape(),activation1.shape());
  final INDArray refBackGradientReccurrent=backprop1.getFirst().getGradientFor(GravesLSTMParamInitializer.RECURRENT_WEIGHT_KEY);
  final INDArray refBackGradientInput=backprop1.getFirst().getGradientFor(GravesLSTMParamInitializer.INPUT_WEIGHT_KEY);
  final INDArray refBackGradientBias=backprop1.getFirst().getGradientFor(GravesLSTMParamInitializer.BIAS_KEY);
  final Pair<Gradient,INDArray> backprop3=bidirectionalLSTM.backpropGradient(randSigBackwards);
  final INDArray backGradientRecurrent=backprop3.getFirst().getGradientFor(GravesBidirectionalLSTMParamInitializer.RECURRENT_WEIGHT_KEY_BACKWARDS);
  final INDArray backGradientInput=backprop3.getFirst().getGradientFor(GravesBidirectionalLSTMParamInitializer.INPUT_WEIGHT_KEY_BACKWARDS);
  final INDArray backGradientBias=backprop3.getFirst().getGradientFor(GravesBidirectionalLSTMParamInitializer.BIAS_KEY_BACKWARDS);
  assertArrayEquals(refBackGradientBias.data().asDouble(),backGradientBias.data().asDouble(),1e-6);
  assertArrayEquals(refBackGradientInput.data().asDouble(),backGradientInput.data().asDouble(),1e-6);
  assertArrayEquals(refBackGradientReccurrent.data().asDouble(),backGradientRecurrent.data().asDouble(),1e-6);
  final INDArray refEpsilon=backprop1.getSecond().dup();
  final INDArray backEpsilon=backprop3.getSecond().dup();
  reverseColumnsInPlace(refEpsilon.slice(0));
  assertArrayEquals(backEpsilon.data().asDouble(),refEpsilon.data().asDouble(),1e-6);
}
