{
  Nd4j.getRandom().setSeed(12345);
  int nIn=10;
  int layerSize=15;
  int miniBatchSize=4;
  int timeSeriesLength=7;
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().layer(new org.deeplearning4j.nn.conf.layers.GravesBidirectionalLSTM.Builder().nIn(nIn).nOut(layerSize).weightInit(WeightInit.DISTRIBUTION).dist(new UniformDistribution(0,1)).activation("tanh").build()).build();
  GravesBidirectionalLSTM lstm=LayerFactories.getFactory(conf.getLayer()).create(conf);
  INDArray input=Nd4j.rand(new int[]{miniBatchSize,nIn,timeSeriesLength});
  lstm.setInput(input);
  final INDArray fwdPassFalse=LSTMHelpers.activateHelper(lstm,lstm.conf(),lstm.input(),lstm.getParam(GravesBidirectionalLSTMParamInitializer.RECURRENT_WEIGHT_KEY_FORWARDS),lstm.getParam(GravesBidirectionalLSTMParamInitializer.INPUT_WEIGHT_KEY_FORWARDS),lstm.getParam(GravesBidirectionalLSTMParamInitializer.BIAS_KEY_FORWARDS),false,null,null,false,true,GravesBidirectionalLSTMParamInitializer.INPUT_WEIGHT_KEY_FORWARDS).fwdPassOutput;
  final INDArray[] fwdPassTrue=LSTMHelpers.activateHelper(lstm,lstm.conf(),lstm.input(),lstm.getParam(GravesBidirectionalLSTMParamInitializer.RECURRENT_WEIGHT_KEY_FORWARDS),lstm.getParam(GravesBidirectionalLSTMParamInitializer.INPUT_WEIGHT_KEY_FORWARDS),lstm.getParam(GravesBidirectionalLSTMParamInitializer.BIAS_KEY_FORWARDS),false,null,null,true,true,GravesBidirectionalLSTMParamInitializer.INPUT_WEIGHT_KEY_FORWARDS).fwdPassOutputAsArrays;
  for (int i=0; i < timeSeriesLength; i++) {
    INDArray sliceFalse=fwdPassFalse.tensorAlongDimension(i,1,0);
    INDArray sliceTrue=fwdPassTrue[i];
    assertTrue(sliceFalse.equals(sliceTrue));
  }
}
