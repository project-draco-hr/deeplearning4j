{
  List<DataSet> dataSets=new ArrayList<>();
  for (int i=0; i < num; i++) {
    if (!hasNext())     break;
    Collection<Writable> record=recordReader.next();
    List<Writable> currList;
    if (record instanceof List)     currList=(List<Writable>)record;
 else     currList=new ArrayList<>(record);
    INDArray label=null;
    INDArray featureVector=Nd4j.create(labelIndex >= 0 ? currList.size() - 1 : currList.size());
    int count=0;
    for (int j=0; j < currList.size(); j++) {
      if (labelIndex >= 0 && j == labelIndex) {
        if (numPossibleLabels < 1)         throw new IllegalStateException("Number of possible labels invalid, must be >= 1");
        Writable current=currList.get(j);
        if (current.toString().isEmpty())         continue;
        if (converter != null)         try {
          current=converter.convert(current);
        }
 catch (        WritableConverterException e) {
          e.printStackTrace();
        }
        label=FeatureUtil.toOutcomeVector(Integer.valueOf(current.toString()),numPossibleLabels);
      }
 else {
        Writable current=currList.get(j);
        if (current.toString().isEmpty())         continue;
        featureVector.putScalar(count++,Double.valueOf(current.toString()));
      }
    }
    dataSets.add(new DataSet(featureVector,labelIndex >= 0 ? label : featureVector));
  }
  List<INDArray> inputs=new ArrayList<>();
  List<INDArray> labels=new ArrayList<>();
  for (  DataSet data : dataSets) {
    inputs.add(data.getFeatureMatrix());
    labels.add(data.getLabels());
  }
  return new DataSet(Nd4j.vstack(inputs.toArray(new INDArray[0])),Nd4j.vstack(labels.toArray(new INDArray[0])));
}
