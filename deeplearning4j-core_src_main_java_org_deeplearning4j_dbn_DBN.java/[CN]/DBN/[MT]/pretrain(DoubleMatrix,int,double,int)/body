{
  if (this.getInput() == null || this.getLayers() == null || this.getLayers()[0] == null || this.getSigmoidLayers() == null || this.getSigmoidLayers()[0] == null) {
    setInput(input);
    initializeLayers(input);
  }
 else   setInput(input);
  DoubleMatrix layerInput=null;
  for (int i=0; i < getnLayers(); i++) {
    if (i == 0)     layerInput=getInput();
 else {
      if (isUseHiddenActivationsForwardProp())       layerInput=getSigmoidLayers()[i - 1].sampleHGivenV(layerInput);
 else       layerInput=getLayers()[i - 1].sampleHiddenGivenVisible(layerInput).getSecond();
    }
    log.info("Training on layer " + (i + 1));
    if (isForceNumEpochs()) {
      for (int epoch=0; epoch < epochs; epoch++) {
        log.info("Error on epoch " + epoch + " for layer "+ (i + 1)+ " is "+ getLayers()[i].getReConstructionCrossEntropy());
        getLayers()[i].train(layerInput,learningRate,new Object[]{k,learningRate});
        getLayers()[i].epochDone(epoch);
      }
    }
 else     getLayers()[i].trainTillConvergence(layerInput,learningRate,new Object[]{k,learningRate,epochs});
  }
}
