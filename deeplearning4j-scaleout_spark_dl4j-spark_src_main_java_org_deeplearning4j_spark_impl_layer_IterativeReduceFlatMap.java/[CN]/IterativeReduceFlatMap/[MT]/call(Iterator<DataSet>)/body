{
  if (!dataSetIterator.hasNext()) {
    return Collections.singletonList(Nd4j.zeros(params.value().shape()));
  }
  List<DataSet> collect=new ArrayList<>();
  while (dataSetIterator.hasNext()) {
    collect.add(dataSetIterator.next());
  }
  DataSet data=DataSet.merge(collect,false);
  log.debug("Training on " + data.labelCounts());
  NeuralNetConfiguration conf=NeuralNetConfiguration.fromJson(json);
  LayerFactory layerFactory=LayerFactories.getFactory(conf.getLayer());
  int numParams=layerFactory.initializer().numParams(conf,true);
  INDArray thisParams=Nd4j.create(1,numParams);
  Layer network=layerFactory.create(conf,null,0,thisParams);
  INDArray val=params.value().dup();
  if (val.length() != network.numParams())   throw new IllegalStateException("Network did not have same number of parameters as the broadcasted set parameters");
  network.setParams(val);
  if (network instanceof OutputLayer) {
    OutputLayer o=(OutputLayer)network;
    o.fit(data);
  }
 else   network.fit(data.getFeatureMatrix());
  return Collections.singletonList(network.params());
}
