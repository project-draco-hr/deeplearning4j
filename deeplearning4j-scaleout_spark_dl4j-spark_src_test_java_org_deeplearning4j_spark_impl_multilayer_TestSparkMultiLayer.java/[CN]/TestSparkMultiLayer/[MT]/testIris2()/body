{
  Nd4j.ENFORCE_NUMERICAL_STABILITY=true;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().momentum(0.9).constrainGradientToUnitNorm(true).activationFunction("tanh").stepFunction(new GradientStepFunction()).optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).dropOut(0.3).iterations(100).visibleUnit(RBM.VisibleUnit.GAUSSIAN).batchSize(10).l2(2e-4).regularization(true).weightInit(WeightInit.VI).hiddenUnit(RBM.HiddenUnit.RECTIFIED).nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).list(3).hiddenLayerSizes(3,2).override(2,new ConfOverride(){
    @Override public void overrideLayer(    int i,    NeuralNetConfiguration.Builder builder){
      if (i == 2) {
        builder.activationFunction("softmax");
        builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));
        builder.lossFunction(LossFunctions.LossFunction.MCXENT);
      }
    }
  }
).build();
  Nd4j.ENFORCE_NUMERICAL_STABILITY=true;
  MultiLayerNetwork network=new MultiLayerNetwork(conf);
  network.init();
  System.out.println("Initializing network");
  SparkDl4jMultiLayer master=new SparkDl4jMultiLayer(sc,conf);
  DataSet d=new IrisDataSetIterator(150,150).next();
  d.normalizeZeroMeanZeroUnitVariance();
  d.shuffle();
  List<DataSet> next=d.asList();
  JavaRDD<DataSet> data=sc.parallelize(next);
  MultiLayerNetwork network2=master.fitDataSet(data);
  INDArray params=network2.params();
  File writeTo=new File(UUID.randomUUID().toString());
  Nd4j.writeTxt(params,writeTo.getAbsolutePath(),",");
  INDArray load=Nd4j.readTxt(writeTo.getAbsolutePath(),",");
  assertEquals(params,load);
  writeTo.delete();
  Evaluation evaluation=new Evaluation();
  evaluation.eval(d.getLabels(),network2.output(d.getFeatureMatrix()));
}
