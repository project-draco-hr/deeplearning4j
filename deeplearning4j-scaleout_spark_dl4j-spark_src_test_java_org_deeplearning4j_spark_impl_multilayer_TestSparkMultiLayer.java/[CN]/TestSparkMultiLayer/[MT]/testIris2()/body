{
  Nd4j.ENFORCE_NUMERICAL_STABILITY=true;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().momentum(0.5).seed(123).activationFunction("tanh").lossFunction(LossFunctions.LossFunction.RMSE_XENT).optimizationAlgo(OptimizationAlgorithm.LBFGS).iterations(10).visibleUnit(org.deeplearning4j.nn.conf.layers.RBM.VisibleUnit.GAUSSIAN).weightInit(WeightInit.XAVIER).hiddenUnit(org.deeplearning4j.nn.conf.layers.RBM.HiddenUnit.RECTIFIED).nIn(4).nOut(3).layer(new org.deeplearning4j.nn.conf.layers.RBM()).list(3).hiddenLayerSizes(3,2).override(2,new ConfOverride(){
    @Override public void overrideLayer(    int i,    NeuralNetConfiguration.Builder builder){
      builder.lossFunction(LossFunctions.LossFunction.MCXENT);
      builder.activationFunction("softmax");
      builder.layer(new OutputLayer());
    }
  }
).build();
  Nd4j.ENFORCE_NUMERICAL_STABILITY=true;
  MultiLayerNetwork network=new MultiLayerNetwork(conf);
  network.init();
  System.out.println("Initializing network");
  SparkDl4jMultiLayer master=new SparkDl4jMultiLayer(sc,conf);
  DataSet d=new IrisDataSetIterator(150,150).next();
  d.normalizeZeroMeanZeroUnitVariance();
  d.shuffle();
  List<DataSet> next=d.asList();
  JavaRDD<DataSet> data=sc.parallelize(next);
  MultiLayerNetwork network2=master.fitDataSet(data);
  INDArray params=network2.params();
  File writeTo=new File(UUID.randomUUID().toString());
  Nd4j.writeTxt(params,writeTo.getAbsolutePath(),",");
  INDArray load=Nd4j.readTxt(writeTo.getAbsolutePath(),",");
  assertEquals(params,load);
  writeTo.delete();
  Evaluation evaluation=new Evaluation();
  evaluation.eval(d.getLabels(),network2.output(d.getFeatureMatrix()));
  System.out.println(evaluation.stats());
}
