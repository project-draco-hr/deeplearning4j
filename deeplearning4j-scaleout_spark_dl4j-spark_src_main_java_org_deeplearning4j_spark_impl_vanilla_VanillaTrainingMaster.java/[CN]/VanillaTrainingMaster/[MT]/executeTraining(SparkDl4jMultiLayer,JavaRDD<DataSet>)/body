{
  if (collectTrainingStats)   stats.logFitStart();
  trainingData.persist(StorageLevel.MEMORY_ONLY());
  long totalCount=trainingData.count();
  int examplesPerSplit=numWorkers * batchSizePerWorker * averagingFrequency;
  JavaRDD<DataSet>[] splits;
  if (collectTrainingStats)   stats.logSplitStart();
  if (totalCount <= examplesPerSplit) {
    splits=(JavaRDD<DataSet>[])Array.newInstance(JavaRDD.class,1);
    splits[0]=trainingData;
  }
 else {
    int numSplits=(int)(totalCount / examplesPerSplit);
    double[] weights=new double[numSplits];
    for (int i=0; i < weights.length; i++)     weights[i]=1.0 / numSplits;
    splits=trainingData.randomSplit(weights);
  }
  if (collectTrainingStats)   stats.logSplitEnd();
  int splitNum=1;
  for (  JavaRDD<DataSet> split : splits) {
    log.info("Starting training of split {} of {}. workerMiniBatchSize={}, averagingFreq={}, dataSetTotalExamples={}. Configured for {} executors",splitNum,splits.length,batchSizePerWorker,averagingFrequency,totalCount,numWorkers);
    FlatMapFunction<Iterator<DataSet>,VanillaTrainingResult> function=new ExecuteWorkerFlatMap<>(getWorkerInstance(network));
    JavaRDD<VanillaTrainingResult> result=split.mapPartitions(function);
    processResults(network,result,splitNum,splits.length);
    splitNum++;
  }
  if (collectTrainingStats)   stats.logFitEnd();
}
