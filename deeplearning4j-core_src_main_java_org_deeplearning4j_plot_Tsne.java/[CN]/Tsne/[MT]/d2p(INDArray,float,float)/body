{
  int n=d.rows();
  final INDArray p=zeros(n,n);
  final INDArray beta=ones(n,1);
  final float logU=(float)Math.log(u);
  log.info("Calculating probabilities of data similarities..");
  for (int i=0; i < n; i++) {
    if (i % 500 == 0)     log.info("Handled " + i + " records");
    final int j=i;
    float betaMin=Float.NEGATIVE_INFINITY;
    float betaMax=Float.POSITIVE_INFINITY;
    INDArray row=d.slice(j).get(NDArrayIndex.interval(1,d.columns()));
    Pair<INDArray,INDArray> pair=hBeta(row,beta.get(j));
    INDArray hDiff=pair.getFirst().sub(logU);
    int tries=0;
    while (BooleanIndexing.and(abs(hDiff),Conditions.greaterThan(tolerance)) && tries < 50) {
      if (BooleanIndexing.and(hDiff,Conditions.greaterThan(0))) {
        betaMin=beta.get(j);
        if (Float.isInfinite(betaMax))         beta.putScalar(j,beta.get(j) * 2);
 else         beta.putScalar(j,(beta.get(j) + betaMax) / 2);
      }
 else {
        betaMax=beta.get(j);
        if (Float.isInfinite(betaMin))         beta.putScalar(j,beta.get(j) / 2);
 else         beta.putScalar(j,(beta.get(j) + betaMin) / 2);
      }
      pair=hBeta(d.slice(j).get(NDArrayIndex.interval(1,d.columns())),beta.get(j));
      hDiff=pair.getFirst().subi(logU);
      tries++;
    }
    p.slice(j).put(new NDArrayIndex[]{NDArrayIndex.interval(1,d.columns())},pair.getSecond());
  }
  doAlongDiagonal(p,new Function<Number,Number>(){
    @Override public Number apply(    Number input){
      return 0;
    }
  }
);
  INDArray pOut=p.add(p.transpose());
  pOut.divi(p.sum(Integer.MAX_VALUE));
  pOut=Transforms.max(pOut,1e-12f);
  BooleanIndexing.applyWhere(pOut,Conditions.isNan(),new Value(realMin));
  log.info("Mean value of sigma " + sqrt(beta.rdiv(1).mean(Integer.MAX_VALUE)));
  return pOut;
}
