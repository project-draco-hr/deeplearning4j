{
  if (usePca)   X=PCA.pca(X,Math.min(50,X.columns()),normalize);
 else   if (normalize) {
    X=X.sub(X.min(Integer.MAX_VALUE));
    X=X.divi(X.max(Integer.MAX_VALUE));
    X=X.subiRowVector(X.mean(0));
  }
  if (nDims > X.columns())   nDims=X.columns();
  INDArray sumX=pow(X,2).sum(1);
  INDArray D=X.mmul(X.transpose()).muli(-2).addiColumnVector(sumX.transpose()).addiRowVector(sumX);
  INDArray y=Nd4j.randn(X.rows(),nDims).muli(1e-3f);
  INDArray yIncs=Nd4j.create(y.shape());
  INDArray gains=Nd4j.ones(y.shape());
  INDArray p=d2p(D,perplexity,tolerance);
  Nd4j.doAlongDiagonal(p,new Function<Number,Number>(){
    @Override public Number apply(    Number input){
      return 0;
    }
  }
);
  p=p.add(p.transpose()).muli(0.5f);
  p=max(p.div(p.sum(Integer.MAX_VALUE)),realMin);
  BooleanIndexing.applyWhere(p,new Condition(){
    @Override public Boolean apply(    Number input){
      return Float.isNaN(input.floatValue());
    }
    @Override public Boolean apply(    IComplexNumber input){
      return Float.isNaN(input.realComponent().floatValue());
    }
  }
,new Function<Number,Number>(){
    @Override public Number apply(    Number input){
      return realMin;
    }
  }
);
  float constant=Nd4j.getBlasWrapper().dot(p,log(p));
  p.muli(4);
  float epsilon=500;
  float costCheck=Float.NEGATIVE_INFINITY;
  for (int i=0; i < maxIter; i++) {
    INDArray sumY=pow(y,2).sum(1);
    INDArray num=y.mmul(y.transpose()).muli(-2).addiRowVector(sumY).addiColumnVector(sumY.transpose()).addi(1).rdivi(1);
    Nd4j.doAlongDiagonal(num,new Function<Number,Number>(){
      @Override public Number apply(      Number input){
        return 0;
      }
    }
);
    INDArray q=max(num.divi(num.sum(Integer.MAX_VALUE).addi(1e-6f)),realMin);
    INDArray L=p.sub(q).muli(num);
    INDArray yGrads=Nd4j.diag(L.sum(0)).subi(L).muli(4).mmul(y);
    if (useAdaGrad) {
      if (adaGrad == null) {
        adaGrad=new AdaGrad(yGrads.shape());
        adaGrad.setMasterStepSize(learningRate);
      }
      yGrads.muli(adaGrad.getLearningRates(yGrads));
    }
 else     yGrads.muli(learningRate);
    gains=max(gains.add(.2f).muli(sign(yGrads).eps(sign(yIncs))).addi(gains.mul(0.8f)).muli(sign(yGrads).eq(sign(yIncs))),minGain);
    yIncs=yIncs.mul(momentum).subi(gains.mul(yGrads).muli(epsilon));
    y.addi(yIncs).subiRowVector(y.mean(0));
    if (i == switchMomentumIteration)     momentum=finalMomentum;
    INDArray logQ=log(q);
    float dot=Nd4j.getBlasWrapper().dot(p,logQ);
    float cost=constant - dot;
    if (!Float.isInfinite(costCheck)) {
      float diff=Math.abs(costCheck - cost);
      if (diff <= 1e-6 && i > stopLyingIteration)       break;
    }
    costCheck=cost;
    log.info("Cost " + cost + " at iteration "+ i);
    if (i == stopLyingIteration)     p.divi(4);
  }
  return y;
}
