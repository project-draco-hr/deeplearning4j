{
  DataSetIterator irisData=new IrisDataSetIterator(150,150);
  DataSet next=irisData.next();
  int numExamples=irisData.numExamples();
  log.info("Training on " + numExamples);
  DataSetIterator sampling=new ListDataSetIterator(next.asList(),150);
  GaussianRectifiedLinearDBN cdbn1=new GaussianRectifiedLinearDBN.Builder().hiddenLayerSizes(new int[]{4,3}).withOptimizationAlgorithm(NeuralNetwork.OptimizationAlgorithm.CONJUGATE_GRADIENT).normalizeByInputRows(true).numberOfInputs(4).numberOfOutPuts(3).withLossFunction(NeuralNetwork.LossFunction.RECONSTRUCTION_CROSSENTROPY).useAdaGrad(true).useHiddenActivationsForwardProp(true).useRegularization(false).withActivation(Activations.hardTanh()).build();
  while (sampling.hasNext()) {
    DataSet sample=sampling.next();
    cdbn1.pretrain(sample.getFirst(),1,1e-5,30000);
  }
  sampling.reset();
  while (sampling.hasNext()) {
    DataSet sample=sampling.next();
    cdbn1.feedForward(sample.getFirst());
    cdbn1.finetune(sample.getSecond(),1e-3,30000);
  }
  Evaluation eval=new Evaluation();
  DoubleMatrix predicted=cdbn1.predict(next.getFirst());
  eval.eval(next.getSecond(),predicted);
  log.info(eval.stats());
}
