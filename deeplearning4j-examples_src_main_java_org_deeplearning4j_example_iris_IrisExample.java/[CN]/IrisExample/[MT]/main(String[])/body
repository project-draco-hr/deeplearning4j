{
  RandomGenerator rng=new MersenneTwister(123);
  int nIns=4, nOuts=3;
  int[] hiddenLayerSizes=new int[]{4,3};
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  DataSet next=iter.next();
  next.normalizeZeroMeanZeroUnitVariance();
  for (int i=0; i < 3000; i++) {
    GaussianRectifiedLinearDBN dbn=new GaussianRectifiedLinearDBN.Builder().useAdaGrad(true).normalizeByInputRows(true).withMomentum(0.5).withOptimizationAlgorithm(NeuralNetwork.OptimizationAlgorithm.CONJUGATE_GRADIENT).numberOfInputs(nIns).numberOfOutPuts(nOuts).withLossFunction(NeuralNetwork.LossFunction.RECONSTRUCTION_CROSSENTROPY).hiddenLayerSizes(hiddenLayerSizes).useRegularization(false).withL2(2e-2).useHiddenActivationsForwardProp(true).withActivation(Activations.sigmoid()).withRng(rng).build();
    next.shuffle();
    dbn.pretrain(next.getFirst(),1,1e-2,1000000);
    dbn.finetune(next.getSecond(),1e-2,1000000);
    Evaluation eval=new Evaluation();
    DoubleMatrix predict=dbn.predict(next.getFirst());
    eval.eval(predict,next.getSecond());
    double f1=eval.f1();
    if (f1 >= 0.9) {
      log.info("Saving model with high f1 of " + f1);
      File save=new File("iris-model-" + f1 + ".bin");
      log.info("Saving " + save.getAbsolutePath());
      SerializationUtils.saveObject(dbn,save);
    }
    log.info(eval.stats());
  }
}
