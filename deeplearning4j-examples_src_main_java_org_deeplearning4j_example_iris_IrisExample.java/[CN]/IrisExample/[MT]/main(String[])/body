{
  RandomGenerator rng=new MersenneTwister(123);
  double preTrainLr=0.01;
  int preTrainEpochs=10000;
  int k=1;
  int nIns=4, nOuts=3;
  int[] hiddenLayerSizes=new int[]{4,3,3};
  double fineTuneLr=0.01;
  int fineTuneEpochs=10000;
  GaussianRectifiedLinearDBN dbn=new GaussianRectifiedLinearDBN.Builder().useAdaGrad(true).normalizeByInputRows(true).withOptimizationAlgorithm(NeuralNetwork.OptimizationAlgorithm.GRADIENT_DESCENT).numberOfInputs(nIns).numberOfOutPuts(nOuts).withActivation(Activations.sigmoid()).withMomentum(0.5).hiddenLayerSizes(hiddenLayerSizes).useRegularization(true).useHiddenActivationsForwardProp(true).withRng(rng).build();
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  DataSet next=iter.next(150);
  next.shuffle();
  next.normalizeZeroMeanZeroUnitVariance();
  dbn.pretrain(next.getFirst(),1,1e-3,10000);
  log.info(("\n\nActivations  " + dbn.feedForward(next.getFirst())).replaceAll(";","\n"));
  dbn.finetune(next.getSecond(),1e-3,10000);
  Evaluation eval=new Evaluation();
  DoubleMatrix predict=dbn.predict(next.getFirst());
  eval.eval(predict,next.getSecond());
  log.info(eval.stats());
}
