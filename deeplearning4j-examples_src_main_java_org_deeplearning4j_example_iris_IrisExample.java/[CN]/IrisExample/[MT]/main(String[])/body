{
  RandomGenerator rng=new MersenneTwister(123);
  int nIns=4, nOuts=3;
  int[] hiddenLayerSizes=new int[]{3};
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  DataSet next=iter.next();
  DBN dbn=new DBN.Builder().numberOfInputs(nIns).numberOfOutPuts(nOuts).withOutputActivationFunction(Activations.softMaxRows()).hiddenLayerSizes(hiddenLayerSizes).withRng(rng).build();
  next.shuffle();
  next.scale();
  dbn.setInput(next.getFeatureMatrix());
  dbn.pretrain(next.getFeatureMatrix(),1,1e-1,100);
  dbn.finetune(next.getLabels(),1e-1,100);
  Evaluation eval=new Evaluation();
  INDArray predict=dbn.output(next.getFeatureMatrix());
  eval.eval(predict,next.getLabels());
  double f1=eval.f1();
  if (f1 >= 0.9) {
    log.info("Saving model with high f1 of " + f1);
    File save=new File("iris-model-" + f1 + ".bin");
    log.info("Saving " + save.getAbsolutePath());
    SerializationUtils.saveObject(dbn,save);
  }
  log.info(eval.stats());
}
