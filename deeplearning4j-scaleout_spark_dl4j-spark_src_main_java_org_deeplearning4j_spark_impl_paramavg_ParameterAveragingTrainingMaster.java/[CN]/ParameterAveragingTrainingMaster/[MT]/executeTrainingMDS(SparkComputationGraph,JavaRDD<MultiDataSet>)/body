{
  if (collectTrainingStats)   stats.logFitStart();
  trainingData.persist(StorageLevel.MEMORY_ONLY());
  long totalCount=trainingData.count();
  int examplesPerSplit=numWorkers * batchSizePerWorker * averagingFrequency;
  JavaRDD<MultiDataSet>[] splits=randomSplit((int)totalCount,examplesPerSplit,trainingData);
  int splitNum=1;
  for (  JavaRDD<MultiDataSet> split : splits) {
    log.info("Starting graph training of split {} of {}. workerMiniBatchSize={}, averagingFreq={}, dataSetTotalExamples={}. Configured for {} executors",splitNum,splits.length,batchSizePerWorker,averagingFrequency,totalCount,numWorkers);
    if (collectTrainingStats)     stats.logMapPartitionsStart();
    JavaRDD<MultiDataSet> splitData=split;
    int nPartitions=split.partitions().size();
switch (repartition) {
case Never:
      break;
case NumPartitionsExecutorsDiffers:
    if (nPartitions == numWorkers)     break;
case Always:
  if (collectTrainingStats)   stats.logRepartitionStart();
splitData=split.repartition(numWorkers);
if (collectTrainingStats) stats.logRepartitionEnd();
break;
default :
throw new RuntimeException("Unknown setting for repartition: " + repartition);
}
FlatMapFunction<Iterator<MultiDataSet>,ParameterAveragingTrainingResult> function=new ExecuteWorkerMultiDataSetFlatMap<>(getWorkerInstance(graph));
JavaRDD<ParameterAveragingTrainingResult> result=splitData.mapPartitions(function);
processResults(null,graph,result,splitNum,splits.length);
splitNum++;
if (collectTrainingStats) stats.logMapPartitionsEnd(nPartitions);
}
if (collectTrainingStats) stats.logFitEnd((int)totalCount);
}
