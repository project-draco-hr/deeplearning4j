{
  if (collectTrainingStats)   stats.logFitStart();
  trainingData.persist(StorageLevel.MEMORY_ONLY());
  long totalDataSetObjectCount=trainingData.count();
  int dataSetObjectsPerSplit=getNumDataSetObjectsPerSplit();
  JavaRDD<MultiDataSet>[] splits=randomSplit((int)totalDataSetObjectCount,dataSetObjectsPerSplit,trainingData);
  int splitNum=1;
  for (  JavaRDD<MultiDataSet> split : splits) {
    log.info("Starting graph training of split {} of {}. workerMiniBatchSize={}, averagingFreq={}, dataSetTotalExamples={}. Configured for {} executors",splitNum,splits.length,batchSizePerWorker,averagingFrequency,totalDataSetObjectCount,numWorkers);
    if (collectTrainingStats)     stats.logMapPartitionsStart();
    JavaRDD<MultiDataSet> splitData=split;
    splitData=repartitionIfRequired(splitData);
    int nPartitions=split.partitions().size();
    FlatMapFunction<Iterator<MultiDataSet>,ParameterAveragingTrainingResult> function=new ExecuteWorkerMultiDataSetFlatMap<>(getWorkerInstance(graph));
    JavaRDD<ParameterAveragingTrainingResult> result=splitData.mapPartitions(function);
    processResults(null,graph,result,splitNum,splits.length);
    splitNum++;
    if (collectTrainingStats)     stats.logMapPartitionsEnd(nPartitions);
  }
  if (collectTrainingStats)   stats.logFitEnd((int)totalDataSetObjectCount);
}
