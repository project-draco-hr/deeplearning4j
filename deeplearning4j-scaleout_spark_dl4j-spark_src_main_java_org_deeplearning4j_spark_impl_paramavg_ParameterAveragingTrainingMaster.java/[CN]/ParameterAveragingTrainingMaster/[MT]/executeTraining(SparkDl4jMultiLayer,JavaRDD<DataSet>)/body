{
  if (collectTrainingStats)   stats.logFitStart();
  trainingData.persist(StorageLevel.MEMORY_ONLY());
  long totalCount=trainingData.count();
  int examplesPerSplit=numWorkers * batchSizePerWorker * averagingFrequency;
  JavaRDD<DataSet>[] splits;
  if (collectTrainingStats)   stats.logSplitStart();
  if (totalCount <= examplesPerSplit) {
    splits=(JavaRDD<DataSet>[])Array.newInstance(JavaRDD.class,1);
    splits[0]=trainingData;
  }
 else {
    int numSplits=(int)(totalCount / examplesPerSplit);
    double[] weights=new double[numSplits];
    for (int i=0; i < weights.length; i++)     weights[i]=1.0 / numSplits;
    splits=trainingData.randomSplit(weights);
  }
  if (collectTrainingStats)   stats.logSplitEnd();
  int splitNum=1;
  for (  JavaRDD<DataSet> split : splits) {
    log.info("Starting training of split {} of {}. workerMiniBatchSize={}, averagingFreq={}, dataSetTotalExamples={}. Configured for {} executors",splitNum,splits.length,batchSizePerWorker,averagingFrequency,totalCount,numWorkers);
    if (collectTrainingStats)     stats.logMapPartitionsStart();
    JavaRDD<DataSet> splitData=split;
    int nPartitions=split.partitions().size();
    log.info("nPartitions = {}, numWorkers = {}, repartition setting = {}",nPartitions,numWorkers,repartition);
switch (repartition) {
case Never:
      break;
case NumPartitionsExecutorsDiffers:
    if (nPartitions == numWorkers)     break;
case Always:
  if (collectTrainingStats)   stats.logRepartitionStart();
splitData=split.repartition(numWorkers);
log.info("Repartitioned training data. Partitions before: {}. Partitions after: {}",nPartitions,splitData.partitions().size());
if (collectTrainingStats) stats.logRepartitionEnd();
break;
default :
throw new RuntimeException("Unknown setting for repartition: " + repartition);
}
FlatMapFunction<Iterator<DataSet>,ParameterAveragingTrainingResult> function=new ExecuteWorkerFlatMap<>(getWorkerInstance(network));
JavaRDD<ParameterAveragingTrainingResult> result=splitData.mapPartitions(function);
processResults(network,null,result,splitNum,splits.length);
splitNum++;
if (collectTrainingStats) stats.logMapPartitionsEnd(nPartitions);
}
if (collectTrainingStats) stats.logFitEnd((int)totalCount);
}
