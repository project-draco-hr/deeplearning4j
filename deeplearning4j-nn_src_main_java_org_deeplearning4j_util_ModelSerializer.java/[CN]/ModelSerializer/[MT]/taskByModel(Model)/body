{
  Task task=new Task();
  try {
    task.setArchitectureType(Task.ArchitectureType.RECURRENT);
    if (model instanceof ComputationGraph) {
      task.setNetworkType(Task.NetworkType.ComputationalGraph);
      ComputationGraph network=(ComputationGraph)model;
      try {
        if (network.getLayers() != null && network.getLayers().length > 0) {
          for (          Layer layer : network.getLayers()) {
            if (layer instanceof RBM || layer instanceof org.deeplearning4j.nn.layers.feedforward.rbm.RBM) {
              task.setArchitectureType(Task.ArchitectureType.RBM);
              break;
            }
            if (layer.type().equals(Layer.Type.CONVOLUTIONAL)) {
              task.setArchitectureType(Task.ArchitectureType.CONVOLUTION);
              break;
            }
 else             if (layer.type().equals(Layer.Type.RECURRENT) || layer.type().equals(Layer.Type.RECURSIVE)) {
              task.setArchitectureType(Task.ArchitectureType.RECURRENT);
              break;
            }
          }
        }
 else         task.setArchitectureType(Task.ArchitectureType.UNKNOWN);
      }
 catch (      Exception e) {
      }
    }
 else     if (model instanceof MultiLayerNetwork) {
      task.setNetworkType(Task.NetworkType.MultilayerNetwork);
      MultiLayerNetwork network=(MultiLayerNetwork)model;
      try {
        if (network.getLayers() != null && network.getLayers().length > 0) {
          for (          Layer layer : network.getLayers()) {
            if (layer instanceof RBM || layer instanceof org.deeplearning4j.nn.layers.feedforward.rbm.RBM) {
              task.setArchitectureType(Task.ArchitectureType.RBM);
              break;
            }
            if (layer.type().equals(Layer.Type.CONVOLUTIONAL)) {
              task.setArchitectureType(Task.ArchitectureType.CONVOLUTION);
              break;
            }
 else             if (layer.type().equals(Layer.Type.RECURRENT) || layer.type().equals(Layer.Type.RECURSIVE)) {
              task.setArchitectureType(Task.ArchitectureType.RECURRENT);
              break;
            }
          }
        }
 else         task.setArchitectureType(Task.ArchitectureType.UNKNOWN);
      }
 catch (      Exception e) {
      }
    }
    return task;
  }
 catch (  Exception e) {
    task.setArchitectureType(Task.ArchitectureType.UNKNOWN);
    task.setNetworkType(Task.NetworkType.DenseNetwork);
    return task;
  }
}
