{
  if (input != null)   this.input=input;
  Pair<DoubleMatrix,DoubleMatrix> probHidden=sampleHiddenGivenVisible(input);
  DoubleMatrix chainStart=probHidden.getSecond();
  Pair<Pair<DoubleMatrix,DoubleMatrix>,Pair<DoubleMatrix,DoubleMatrix>> matrices=null;
  DoubleMatrix nvMeans=null;
  DoubleMatrix nvSamples=null;
  DoubleMatrix nhMeans=null;
  DoubleMatrix nhSamples=null;
  for (int i=0; i < k; i++) {
    if (i == 0)     matrices=gibbhVh(chainStart);
 else     matrices=gibbhVh(nhSamples);
    nvMeans=matrices.getFirst().getFirst();
    nvSamples=matrices.getFirst().getSecond();
    nhMeans=matrices.getSecond().getFirst();
    nhSamples=matrices.getSecond().getSecond();
  }
  DoubleMatrix wAdd=input.transpose().mmul(probHidden.getSecond()).sub(nvSamples.transpose().mmul(nhMeans)).mul(learningRate);
  W=W.add(wAdd);
  regularizeWeights(input.rows,learningRate);
  DoubleMatrix vBiasAdd=mean(input.sub(nvSamples),0);
  vBias=vBiasAdd.mul(learningRate);
  DoubleMatrix hBiasAdd=mean(probHidden.getSecond().sub(nhMeans),0);
  hBiasAdd=hBiasAdd.mul(learningRate);
  hBias=hBias.add(hBiasAdd);
}
