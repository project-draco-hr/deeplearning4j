{
  int nThreads=4;
  SparkConf sparkConf=new SparkConf();
  sparkConf.setMaster("local[" + nThreads + "]");
  sparkConf.setAppName("Test");
  JavaSparkContext sc=new JavaSparkContext(sparkConf);
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(1).list().layer(0,new DenseLayer.Builder().nIn(10).nOut(10).build()).layer(1,new OutputLayer.Builder().nIn(10).nOut(10).build()).pretrain(false).backprop(true).build();
  int miniBatchSizePerWorker=10;
  int averagingFrequency=5;
  int numberOfAveragings=3;
  int totalExamples=nThreads * miniBatchSizePerWorker * averagingFrequency* numberOfAveragings;
  Nd4j.getRandom().setSeed(12345);
  List<DataSet> list=new ArrayList<>();
  for (int i=0; i < totalExamples; i++) {
    INDArray f=Nd4j.rand(1,10);
    INDArray l=Nd4j.rand(1,10);
    DataSet ds=new DataSet(f,l);
    list.add(ds);
  }
  JavaRDD<DataSet> rdd=sc.parallelize(list);
  rdd.repartition(4);
  VanillaTrainingMaster tm=new VanillaTrainingMaster.Builder(nThreads).averagingFrequency(averagingFrequency).batchSizePerWorker(miniBatchSizePerWorker).saveUpdater(true).workerPrefetchNumBatches(0).build();
  SparkDl4jMultiLayer sparkNet=new SparkDl4jMultiLayer(sc,conf,tm);
  sparkNet.setCollectTrainingStats(true);
  sparkNet.fit(rdd);
  List<String> expectedStatNames=new ArrayList<>();
  Class<?>[] classes=new Class[]{CommonSparkTrainingStats.class,VanillaTrainingMasterStats.class,VanillaTrainingWorkerStats.class};
  String[] fieldNames=new String[]{"columnNames","columnNames","columnNames"};
  for (int i=0; i < classes.length; i++) {
    Field field=classes[i].getDeclaredField(fieldNames[i]);
    field.setAccessible(true);
    Object f=field.get(null);
    Collection<String> c=(Collection<String>)f;
    expectedStatNames.addAll(c);
  }
  System.out.println(expectedStatNames);
  SparkTrainingStats stats=sparkNet.getSparkTrainingStats();
  Set<String> actualKeySet=stats.getKeySet();
  assertEquals(expectedStatNames.size(),actualKeySet.size());
  for (  String s : stats.getKeySet()) {
    assertTrue(expectedStatNames.contains(s));
    Object o=stats.getValue(s);
    System.out.println(s + "\t" + o);
  }
  System.out.println("\n\n\n");
  System.out.println(stats.statsAsString());
}
