{
  int nWorkers=4;
  SparkConf sparkConf=new SparkConf();
  sparkConf.setMaster("local[" + nWorkers + "]");
  sparkConf.setAppName("Test");
  JavaSparkContext sc=new JavaSparkContext(sparkConf);
  try {
    MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(1).list().layer(0,new DenseLayer.Builder().nIn(10).nOut(10).build()).layer(1,new OutputLayer.Builder().nIn(10).nOut(10).build()).pretrain(false).backprop(true).build();
    int miniBatchSizePerWorker=10;
    int averagingFrequency=5;
    int numberOfAveragings=3;
    int totalExamples=nWorkers * miniBatchSizePerWorker * averagingFrequency* numberOfAveragings;
    Nd4j.getRandom().setSeed(12345);
    List<DataSet> list=new ArrayList<>();
    for (int i=0; i < totalExamples; i++) {
      INDArray f=Nd4j.rand(1,10);
      INDArray l=Nd4j.rand(1,10);
      DataSet ds=new DataSet(f,l);
      list.add(ds);
    }
    JavaRDD<DataSet> rdd=sc.parallelize(list);
    rdd.repartition(4);
    ParameterAveragingTrainingMaster tm=new ParameterAveragingTrainingMaster.Builder(nWorkers,1).averagingFrequency(averagingFrequency).batchSizePerWorker(miniBatchSizePerWorker).saveUpdater(true).workerPrefetchNumBatches(0).repartionData(Repartition.Always).build();
    SparkDl4jMultiLayer sparkNet=new SparkDl4jMultiLayer(sc,conf,tm);
    sparkNet.setCollectTrainingStats(true);
    sparkNet.fit(rdd);
    List<String> expectedStatNames=new ArrayList<>();
    Class<?>[] classes=new Class[]{CommonSparkTrainingStats.class,ParameterAveragingTrainingMasterStats.class,ParameterAveragingTrainingWorkerStats.class};
    String[] fieldNames=new String[]{"columnNames","columnNames","columnNames"};
    for (int i=0; i < classes.length; i++) {
      Field field=classes[i].getDeclaredField(fieldNames[i]);
      field.setAccessible(true);
      Object f=field.get(null);
      Collection<String> c=(Collection<String>)f;
      expectedStatNames.addAll(c);
    }
    System.out.println(expectedStatNames);
    SparkTrainingStats stats=sparkNet.getSparkTrainingStats();
    Set<String> actualKeySet=stats.getKeySet();
    assertEquals(expectedStatNames.size(),actualKeySet.size());
    for (    String s : stats.getKeySet()) {
      assertTrue(expectedStatNames.contains(s));
      assertNotNull(stats.getValue(s));
    }
    String statsAsString=stats.statsAsString();
    System.out.println(statsAsString);
    assertEquals(actualKeySet.size(),statsAsString.split("\n").length);
    assertTrue(stats instanceof ParameterAveragingTrainingMasterStats);
    ParameterAveragingTrainingMasterStats masterStats=(ParameterAveragingTrainingMasterStats)stats;
    List<EventStats> broadcastCreateTime=masterStats.getParameterAveragingMasterBroadcastCreateTimesMs();
    assertEquals(numberOfAveragings,broadcastCreateTime.size());
    assertDurationGreaterEqZero(broadcastCreateTime);
    assertNonNullFields(broadcastCreateTime);
    assertExpectedNumberMachineIdsJvmIdsThreadIds(broadcastCreateTime,1,1,1);
    List<EventStats> fitTimes=masterStats.getParameterAveragingMasterFitTimesMs();
    assertEquals(1,fitTimes.size());
    assertDurationGreaterZero(fitTimes);
    assertNonNullFields(fitTimes);
    assertExpectedNumberMachineIdsJvmIdsThreadIds(fitTimes,1,1,1);
    List<EventStats> splitTimes=masterStats.getParameterAveragingMasterSplitTimesMs();
    assertEquals(1,splitTimes.size());
    assertDurationGreaterEqZero(splitTimes);
    assertNonNullFields(splitTimes);
    assertExpectedNumberMachineIdsJvmIdsThreadIds(splitTimes,1,1,1);
    List<EventStats> aggregateTimesMs=masterStats.getParamaterAveragingMasterAggregateTimesMs();
    assertEquals(numberOfAveragings,aggregateTimesMs.size());
    assertDurationGreaterEqZero(aggregateTimesMs);
    assertNonNullFields(aggregateTimesMs);
    assertExpectedNumberMachineIdsJvmIdsThreadIds(aggregateTimesMs,1,1,1);
    List<EventStats> processParamsTimesMs=masterStats.getParameterAveragingMasterProcessParamsUpdaterTimesMs();
    assertEquals(numberOfAveragings,processParamsTimesMs.size());
    assertDurationGreaterEqZero(processParamsTimesMs);
    assertNonNullFields(processParamsTimesMs);
    assertExpectedNumberMachineIdsJvmIdsThreadIds(processParamsTimesMs,1,1,1);
    List<EventStats> repartitionTimesMs=masterStats.getParameterAveragingMasterRepartitionTimesMs();
    assertEquals(numberOfAveragings,repartitionTimesMs.size());
    assertDurationGreaterEqZero(repartitionTimesMs);
    assertNonNullFields(repartitionTimesMs);
    assertExpectedNumberMachineIdsJvmIdsThreadIds(repartitionTimesMs,1,1,1);
    SparkTrainingStats commonStats=masterStats.getNestedTrainingStats();
    assertNotNull(commonStats);
    assertTrue(commonStats instanceof CommonSparkTrainingStats);
    CommonSparkTrainingStats cStats=(CommonSparkTrainingStats)commonStats;
    List<EventStats> workerFlatMapTotalTimeMs=cStats.getWorkerFlatMapTotalTimeMs();
    assertEquals(numberOfAveragings * nWorkers,workerFlatMapTotalTimeMs.size());
    assertDurationGreaterZero(workerFlatMapTotalTimeMs);
    assertNonNullFields(workerFlatMapTotalTimeMs);
    assertExpectedNumberMachineIdsJvmIdsThreadIds(workerFlatMapTotalTimeMs,1,1,nWorkers);
    List<EventStats> workerFlatMapGetInitialModelTimeMs=cStats.getWorkerFlatMapGetInitialModelTimeMs();
    assertEquals(numberOfAveragings * nWorkers,workerFlatMapGetInitialModelTimeMs.size());
    assertDurationGreaterEqZero(workerFlatMapGetInitialModelTimeMs);
    assertNonNullFields(workerFlatMapGetInitialModelTimeMs);
    assertExpectedNumberMachineIdsJvmIdsThreadIds(workerFlatMapGetInitialModelTimeMs,1,1,nWorkers);
    List<EventStats> workerFlatMapDataSetGetTimesMs=cStats.getWorkerFlatMapDataSetGetTimesMs();
    int numMinibatchesProcessed=workerFlatMapDataSetGetTimesMs.size();
    int expectedNumMinibatchesProcessed=numberOfAveragings * nWorkers * averagingFrequency;
    assertTrue(numMinibatchesProcessed >= expectedNumMinibatchesProcessed - 5);
    List<EventStats> workerFlatMapProcessMiniBatchTimesMs=cStats.getWorkerFlatMapProcessMiniBatchTimesMs();
    assertTrue(workerFlatMapProcessMiniBatchTimesMs.size() >= numberOfAveragings * nWorkers * averagingFrequency - 5);
    assertDurationGreaterEqZero(workerFlatMapProcessMiniBatchTimesMs);
    assertNonNullFields(workerFlatMapDataSetGetTimesMs);
    assertExpectedNumberMachineIdsJvmIdsThreadIds(workerFlatMapDataSetGetTimesMs,1,1,nWorkers);
    SparkTrainingStats paramAvgStats=cStats.getNestedTrainingStats();
    assertNotNull(paramAvgStats);
    assertTrue(paramAvgStats instanceof ParameterAveragingTrainingWorkerStats);
    ParameterAveragingTrainingWorkerStats pStats=(ParameterAveragingTrainingWorkerStats)paramAvgStats;
    List<EventStats> parameterAveragingWorkerBroadcastGetValueTimeMs=pStats.getParameterAveragingWorkerBroadcastGetValueTimeMs();
    assertEquals(numberOfAveragings * nWorkers,parameterAveragingWorkerBroadcastGetValueTimeMs.size());
    assertDurationGreaterEqZero(parameterAveragingWorkerBroadcastGetValueTimeMs);
    assertNonNullFields(parameterAveragingWorkerBroadcastGetValueTimeMs);
    assertExpectedNumberMachineIdsJvmIdsThreadIds(parameterAveragingWorkerBroadcastGetValueTimeMs,1,1,nWorkers);
    List<EventStats> parameterAveragingWorkerInitTimeMs=pStats.getParameterAveragingWorkerInitTimeMs();
    assertEquals(numberOfAveragings * nWorkers,parameterAveragingWorkerInitTimeMs.size());
    assertDurationGreaterEqZero(parameterAveragingWorkerInitTimeMs);
    assertNonNullFields(parameterAveragingWorkerInitTimeMs);
    assertExpectedNumberMachineIdsJvmIdsThreadIds(parameterAveragingWorkerInitTimeMs,1,1,nWorkers);
    List<EventStats> parameterAveragingWorkerFitTimesMs=pStats.getParameterAveragingWorkerFitTimesMs();
    assertTrue(parameterAveragingWorkerFitTimesMs.size() >= numberOfAveragings * nWorkers * averagingFrequency - 5);
    assertDurationGreaterEqZero(parameterAveragingWorkerFitTimesMs);
    assertNonNullFields(parameterAveragingWorkerFitTimesMs);
    assertExpectedNumberMachineIdsJvmIdsThreadIds(parameterAveragingWorkerFitTimesMs,1,1,nWorkers);
    assertNull(pStats.getNestedTrainingStats());
    String tempDir=System.getProperty("java.io.tmpdir");
    String outDir=FilenameUtils.concat(tempDir,"dl4j_testTrainingStatsCollection");
    stats.exportStatFiles(outDir,sc.sc());
    String htmlPlotsPath=FilenameUtils.concat(outDir,"AnalysisPlots.html");
    StatsUtils.exportStatsAsHtml(stats,htmlPlotsPath,sc);
  }
  finally {
    sc.stop();
  }
}
