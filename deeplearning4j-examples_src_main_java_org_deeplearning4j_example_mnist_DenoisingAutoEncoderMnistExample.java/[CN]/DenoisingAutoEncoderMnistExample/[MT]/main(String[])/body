{
  DenoisingAutoEncoder autoEncoder=new DenoisingAutoEncoder.Builder().numberOfVisible(784).numHidden(500).normalizeByInputRows(true).withLossFunction(LossFunction.NEGATIVELOGLIKELIHOOD).useAdaGrad(true).useRegularization(true).withSparsity(0).withOptmizationAlgo(OptimizationAlgorithm.GRADIENT_DESCENT).withMomentum(0.5).build();
  DataSetIterator iter=new RawMnistDataSetIterator(10,30);
  for (int i=0; i < 20; i++) {
    while (iter.hasNext()) {
      DataSet next=iter.next();
      autoEncoder.trainTillConvergence(next.getFirst(),1e-1,new Object[]{0.6,1e-1,1000});
    }
    iter.reset();
  }
  FilterRenderer render=new FilterRenderer();
  render.renderFilters(autoEncoder.getW(),"example-render.jpg",28,28);
  while (iter.hasNext()) {
    DataSet first=iter.next();
    DoubleMatrix reconstruct=autoEncoder.reconstruct(first.getFirst());
    for (int j=0; j < first.numExamples(); j++) {
      DoubleMatrix draw1=first.get(j).getFirst().mul(255);
      DoubleMatrix reconstructed2=reconstruct.getRow(j);
      DoubleMatrix draw2=MatrixUtil.binomial(reconstructed2,1,new MersenneTwister(123)).mul(255);
      DrawMnistGreyScale d=new DrawMnistGreyScale(draw1);
      d.title="REAL";
      d.draw();
      DrawMnistGreyScale d2=new DrawMnistGreyScale(draw2,1000,1000);
      d2.title="TEST";
      d2.draw();
      Thread.sleep(10000);
      d.frame.dispose();
      d2.frame.dispose();
    }
  }
}
