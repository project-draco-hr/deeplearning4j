{
  int minExamples=Integer.MAX_VALUE;
  for (  List<List<Writable>> exampleData : nextRRVals.values()) {
    minExamples=Math.min(minExamples,exampleData.size());
  }
  for (  List<List<List<Writable>>> exampleData : nextSeqRRVals.values()) {
    minExamples=Math.min(minExamples,exampleData.size());
  }
  if (minExamples == Integer.MAX_VALUE)   throw new RuntimeException("Error occurred during data set generation: no readers?");
  int[] longestSequence=null;
  if (alignmentMode == AlignmentMode.ALIGN_END) {
    longestSequence=new int[minExamples];
    for (    Map.Entry<String,List<List<List<Writable>>>> entry : nextSeqRRVals.entrySet()) {
      List<List<List<Writable>>> list=entry.getValue();
      for (int i=0; i < list.size() && i < minExamples; i++) {
        longestSequence[i]=Math.max(longestSequence[i],list.get(i).size());
      }
    }
  }
  int longestTS=-1;
  if (alignmentMode != AlignmentMode.EQUAL_LENGTH) {
    for (    Map.Entry<String,List<List<List<Writable>>>> entry : nextSeqRRVals.entrySet()) {
      List<List<List<Writable>>> list=entry.getValue();
      for (      List<List<Writable>> c : list) {
        longestTS=Math.max(longestTS,c.size());
      }
    }
  }
  INDArray[] inputArrs=new INDArray[inputs.size()];
  INDArray[] inputArrMasks=new INDArray[inputs.size()];
  boolean inputMasks=false;
  int i=0;
  for (  SubsetDetails d : inputs) {
    if (nextRRVals.containsKey(d.readerName)) {
      List<List<Writable>> list=nextRRVals.get(d.readerName);
      inputArrs[i]=convertWritables(list,minExamples,d);
    }
 else {
      List<List<List<Writable>>> list=nextSeqRRVals.get(d.readerName);
      Pair<INDArray,INDArray> p=convertWritablesSequence(list,minExamples,longestTS,d,longestSequence);
      inputArrs[i]=p.getFirst();
      inputArrMasks[i]=p.getSecond();
      if (inputArrMasks[i] != null)       inputMasks=true;
    }
    i++;
  }
  if (!inputMasks)   inputArrMasks=null;
  INDArray[] outputArrs=new INDArray[outputs.size()];
  INDArray[] outputArrMasks=new INDArray[outputs.size()];
  boolean outputMasks=false;
  i=0;
  for (  SubsetDetails d : outputs) {
    if (nextRRVals.containsKey(d.readerName)) {
      List<List<Writable>> list=nextRRVals.get(d.readerName);
      outputArrs[i]=convertWritables(list,minExamples,d);
    }
 else {
      List<List<List<Writable>>> list=nextSeqRRVals.get(d.readerName);
      Pair<INDArray,INDArray> p=convertWritablesSequence(list,minExamples,longestTS,d,longestSequence);
      outputArrs[i]=p.getFirst();
      outputArrMasks[i]=p.getSecond();
      if (outputArrMasks[i] != null)       outputMasks=true;
    }
    i++;
  }
  if (!outputMasks)   outputArrMasks=null;
  MultiDataSet mds=new org.nd4j.linalg.dataset.MultiDataSet(inputArrs,outputArrs,inputArrMasks,outputArrMasks);
  if (collectMetaData && metaCollectionPossible) {
    mds.setExampleMetaData(nextMetas);
  }
  if (preProcessor != null)   preProcessor.preProcess(mds);
  return mds;
}
