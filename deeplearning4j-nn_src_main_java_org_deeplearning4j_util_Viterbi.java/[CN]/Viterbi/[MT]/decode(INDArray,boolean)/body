{
  INDArray outcomeSequence=labels.isColumnVector() || labels.isRowVector() || binaryLabelMatrix ? toOutcomesFromBinaryLabelMatrix(labels) : labels;
  int frames=outcomeSequence.length();
  INDArray V=Nd4j.ones(frames,states);
  INDArray pointers=Nd4j.zeros(frames,states);
  INDArray assigned=V.getRow(0);
  assigned.assign(logPCorrect - logStates);
  V.putRow(0,assigned);
  V.put(0,(int)outcomeSequence.getDouble(0),logPCorrect - logStates);
  for (int t=1; t < frames; t++) {
    for (int k=0; k < states; k++) {
      INDArray rowLogProduct=rowOfLogTransitionMatrix(k).add(V.getRow(t - 1));
      int maxVal=Nd4j.getBlasWrapper().iamax(rowLogProduct);
      double argMax=rowLogProduct.max(Integer.MAX_VALUE).getDouble(0);
      V.put(t,k,argMax);
      int element=(int)outcomeSequence.getDouble(t);
      if (k == element)       V.put(t,k,logPCorrect + maxVal);
 else       V.put(t,k,logPIncorrect + maxVal);
    }
  }
  INDArray rectified=Nd4j.zeros(frames);
  rectified.put(rectified.length() - 1,V.getRow(frames - 1).max(Integer.MAX_VALUE));
  for (int t=rectified.length() - 2; t > 0; t--) {
    rectified.putScalar(t,pointers.getDouble(t + 1,(int)rectified.getDouble(t + 1)));
  }
  return new Pair<>(V.getRow(frames - 1).max(Integer.MAX_VALUE).getDouble(0),rectified);
}
