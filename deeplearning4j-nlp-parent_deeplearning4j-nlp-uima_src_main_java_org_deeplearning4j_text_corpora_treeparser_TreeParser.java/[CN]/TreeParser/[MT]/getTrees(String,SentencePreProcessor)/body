{
  if (text.isEmpty())   return new ArrayList<>();
  CAS c=pool.getCas();
  if (preProcessor != null)   text=preProcessor.preProcess(text);
  c.setDocumentText(text);
  tokenizer.process(c);
  List<Tree> ret=new ArrayList<>();
  CAS c2=pool.getCas();
  List<Pair<String,MultiDimensionalMap<Integer,Integer,String>>> list=new ArrayList<>();
  for (  Sentence sentence : JCasUtil.select(c.getJCas(),Sentence.class)) {
    List<String> tokens=new ArrayList<>();
    for (    Token t : JCasUtil.selectCovered(Token.class,sentence))     tokens.add(t.getCoveredText());
    Pair<String,MultiDimensionalMap<Integer,Integer,String>> p=ContextLabelRetriever.stringWithLabels(sentence.getCoveredText(),tf);
    c2.setDocumentText(p.getFirst());
    list.add(p);
    tokenizer.process(c2);
    parser.process(c2);
    TopTreebankNode node=JCasUtil.selectSingle(c.getJCas(),TopTreebankNode.class);
    ret.add(TreeFactory.buildTree(node));
  }
  pool.releaseCas(c2);
  for (  Tree t : ret) {
    addPreTerminal(t);
  }
  return ret;
}
