{
  LayerFactory layerFactory=LayerFactories.getFactory(ConvolutionDownSampleLayer.class);
  int batchSize=110;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.LBFGS).dist(Nd4j.getDistributions().createNormal(0,1)).iterations(100).iterationListener(new ScoreIterationListener(1)).activationFunction("tanh").filterSize(5,1,2,2).constrainGradientToUnitNorm(true).nIn(4).nOut(3).batchSize(batchSize).layerFactory(layerFactory).list(2).preProcessor(0,new ConvolutionPostProcessor()).hiddenLayerSizes(new int[]{9}).override(new ClassifierOverride(1)).build();
  MultiLayerNetwork network=new MultiLayerNetwork(conf);
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  org.nd4j.linalg.dataset.DataSet next=iter.next();
  next.normalizeZeroMeanZeroUnitVariance();
  SplitTestAndTrain trainTest=next.splitTestAndTrain(110);
  network.fit(trainTest.getTrain().getFeatureMatrix().reshape(trainTest.getTrain().numExamples(),1,2,2),trainTest.getTrain().getLabels());
  Evaluation eval=new Evaluation();
  INDArray output=network.output(trainTest.getTrain().getFeatureMatrix().reshape(trainTest.getTrain().numExamples(),1,2,2));
  eval.eval(trainTest.getTrain().getLabels(),output);
  log.info("Score " + eval.stats());
}
