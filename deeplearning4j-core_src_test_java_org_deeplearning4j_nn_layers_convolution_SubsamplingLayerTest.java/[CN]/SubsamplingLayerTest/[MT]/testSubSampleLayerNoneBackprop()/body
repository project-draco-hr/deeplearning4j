{
  INDArray expectedContainedEpsilonInput=Nd4j.create(new double[]{1.,1.,1.,1.,1.,1.,1.,1.},new int[]{1,2,2,2});
  INDArray expectedContainedEpsilonResult=Nd4j.create(new double[]{1.,1.,1.,1.,1.,1.,1.,1.},new int[]{1,2,2,2});
  INDArray input=getData();
  Layer layer=getSubsamplingLayer(SubsamplingLayer.PoolingType.NONE);
  layer.setInput(input);
  Gradient gradient=createPrevGradient();
  Pair<Gradient,INDArray> containedOutput=layer.backpropGradient(expectedContainedEpsilonInput,gradient,null);
  assertEquals(expectedContainedEpsilonResult,containedOutput.getSecond());
  assertEquals(gradient.getGradientFor("W"),containedOutput.getFirst().getGradientFor("W"));
  assertEquals(expectedContainedEpsilonResult.shape().length,containedOutput.getSecond().shape().length);
  gradient=createPrevGradient();
  Pair<Gradient,INDArray> out=layer.backpropGradient(epsilon,gradient,null);
  assertEquals(depth,out.getSecond().size(1));
}
