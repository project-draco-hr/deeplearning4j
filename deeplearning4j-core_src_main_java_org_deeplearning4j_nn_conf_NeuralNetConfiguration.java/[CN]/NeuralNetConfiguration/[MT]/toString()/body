{
  return "NeuralNetConfiguration{" + "sparsity=" + sparsity + ", useAdaGrad="+ useAdaGrad+ ", lr="+ lr+ ", k="+ k+ ", corruptionLevel="+ corruptionLevel+ ", numIterations="+ numIterations+ ", momentum="+ momentum+ ", l2="+ l2+ ", useRegularization="+ useRegularization+ ", momentumAfter="+ momentumAfter+ ", resetAdaGradIterations="+ resetAdaGradIterations+ ", dropOut="+ dropOut+ ", applySparsity="+ applySparsity+ ", weightInit="+ weightInit+ ", optimizationAlgo="+ optimizationAlgo+ ", lossFunction="+ lossFunction+ ", renderWeightsEveryNumEpochs="+ renderWeightsEveryNumEpochs+ ", concatBiases="+ concatBiases+ ", constrainGradientToUnitNorm="+ constrainGradientToUnitNorm+ ", rng="+ rng+ ", dist="+ dist+ ", seed="+ seed+ ", nIn="+ nIn+ ", nOut="+ nOut+ ", activationFunction="+ activationFunction+ ", visibleUnit="+ visibleUnit+ ", hiddenUnit="+ hiddenUnit+ ", weightShape="+ Arrays.toString(weightShape)+ ", filterSize="+ Arrays.toString(filterSize)+ ", numFeatureMaps="+ numFeatureMaps+ ", featureMapSize="+ Arrays.toString(featureMapSize)+ ", stride="+ Arrays.toString(stride)+ ", numInFeatureMaps="+ numInFeatureMaps+ '}';
}
