{
  return "NeuralNetConfiguration{" + "sparsity=" + sparsity + ", useAdaGrad="+ useAdaGrad+ ", lr="+ lr+ ", corruptionLevel="+ corruptionLevel+ ", numIterations="+ numIterations+ ", momentum="+ momentum+ ", l2="+ l2+ ", useRegularization="+ useRegularization+ ", momentumAfter="+ momentumAfter+ ", resetAdaGradIterations="+ resetAdaGradIterations+ ", numLineSearchIterations="+ numLineSearchIterations+ ", dropOut="+ dropOut+ ", applySparsity="+ applySparsity+ ", weightInit="+ weightInit+ ", optimizationAlgo="+ optimizationAlgo+ ", lossFunction="+ lossFunction+ ", constrainGradientToUnitNorm="+ constrainGradientToUnitNorm+ ", seed="+ seed+ ", rng="+ rng+ ", dist="+ dist+ ", listeners="+ listeners+ ", stepFunction="+ stepFunction+ ", layerFactory="+ layerFactory+ ", variables="+ variables+ ", nIn="+ nIn+ ", nOut="+ nOut+ ", activationFunction='"+ activationFunction+ '\''+ ", visibleUnit="+ visibleUnit+ ", hiddenUnit="+ hiddenUnit+ ", k="+ k+ ", weightShape="+ Arrays.toString(weightShape)+ ", filterSize="+ Arrays.toString(filterSize)+ ", stride="+ Arrays.toString(stride)+ ", kernel="+ kernel+ ", batchSize="+ batchSize+ ", minimize="+ minimize+ ", convolutionType="+ convolutionType+ '}';
}
