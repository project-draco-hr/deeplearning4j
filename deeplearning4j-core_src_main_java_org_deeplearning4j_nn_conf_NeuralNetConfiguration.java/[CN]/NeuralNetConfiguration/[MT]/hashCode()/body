{
  int result;
  long temp;
  temp=Double.doubleToLongBits(sparsity);
  result=(int)(temp ^ (temp >>> 32));
  result=31 * result + (useAdaGrad ? 1 : 0);
  temp=Double.doubleToLongBits(lr);
  result=31 * result + (int)(temp ^ (temp >>> 32));
  temp=Double.doubleToLongBits(corruptionLevel);
  result=31 * result + (int)(temp ^ (temp >>> 32));
  result=31 * result + numIterations;
  temp=Double.doubleToLongBits(momentum);
  result=31 * result + (int)(temp ^ (temp >>> 32));
  temp=Double.doubleToLongBits(l2);
  result=31 * result + (int)(temp ^ (temp >>> 32));
  result=31 * result + (useRegularization ? 1 : 0);
  result=31 * result + (momentumAfter != null ? momentumAfter.hashCode() : 0);
  result=31 * result + resetAdaGradIterations;
  result=31 * result + numLineSearchIterations;
  temp=Double.doubleToLongBits(dropOut);
  result=31 * result + (int)(temp ^ (temp >>> 32));
  result=31 * result + (applySparsity ? 1 : 0);
  result=31 * result + (weightInit != null ? weightInit.hashCode() : 0);
  result=31 * result + (optimizationAlgo != null ? optimizationAlgo.hashCode() : 0);
  result=31 * result + (lossFunction != null ? lossFunction.hashCode() : 0);
  result=31 * result + (constrainGradientToUnitNorm ? 1 : 0);
  result=31 * result + (rng != null ? rng.hashCode() : 0);
  result=31 * result + (dist != null ? dist.hashCode() : 0);
  result=31 * result + (stepFunction != null ? stepFunction.hashCode() : 0);
  result=31 * result + (layerFactory != null ? layerFactory.hashCode() : 0);
  result=31 * result + (variables != null ? variables.hashCode() : 0);
  result=31 * result + nIn;
  result=31 * result + nOut;
  result=31 * result + (activationFunction != null ? activationFunction.hashCode() : 0);
  result=31 * result + (visibleUnit != null ? visibleUnit.hashCode() : 0);
  result=31 * result + (hiddenUnit != null ? hiddenUnit.hashCode() : 0);
  result=31 * result + k;
  result=31 * result + (weightShape != null ? Arrays.hashCode(weightShape) : 0);
  result=31 * result + (filterSize != null ? Arrays.hashCode(filterSize) : 0);
  result=31 * result + (stride != null ? Arrays.hashCode(stride) : 0);
  result=31 * result + kernel;
  result=31 * result + batchSize;
  result=31 * result + (minimize ? 1 : 0);
  result=31 * result + (convolutionType != null ? convolutionType.hashCode() : 0);
  return result;
}
