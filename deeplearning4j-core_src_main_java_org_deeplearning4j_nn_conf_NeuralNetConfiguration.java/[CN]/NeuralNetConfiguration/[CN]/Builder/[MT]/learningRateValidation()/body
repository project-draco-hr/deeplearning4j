{
  if (learningRatePolicy != LearningRatePolicy.None && Double.isNaN(lrPolicyDecayRate)) {
    throw new IllegalStateException("Learning rate policy decay rate (lrPolicyDecayRate) must be set to use learningRatePolicy.");
  }
switch (learningRatePolicy) {
case Inverse:
case Poly:
    if (Double.isNaN(lrPolicyPower))     throw new IllegalStateException("Learning rate policy power (lrPolicyPower) must be set to use " + learningRatePolicy);
  break;
case Step:
case Sigmoid:
if (Double.isNaN(lrPolicySteps)) throw new IllegalStateException("Learning rate policy steps (lrPolicySteps) must be set to use " + learningRatePolicy);
break;
case Schedule:
if (learningRateSchedule == null) throw new IllegalStateException("Learning rate policy schedule (learningRateSchedule) must be set to use " + learningRatePolicy);
break;
}
if (!Double.isNaN(lrPolicyPower) && (learningRatePolicy != LearningRatePolicy.Inverse && learningRatePolicy != LearningRatePolicy.Poly)) throw new IllegalStateException("Power has been set but will not be applied unless the learning rate policy is set to Inverse or Poly.");
if (!Double.isNaN(lrPolicySteps) && (learningRatePolicy != LearningRatePolicy.Step && learningRatePolicy != LearningRatePolicy.Sigmoid)) throw new IllegalStateException("Steps have been set but will not be applied unless the learning rate policy is set to Step or Sigmoid.");
if ((learningRateSchedule != null) && (learningRatePolicy != LearningRatePolicy.Schedule)) throw new IllegalStateException("Learning rate schedule has been set but will not be applied unless the learning rate policy is set to Schedule.");
}
