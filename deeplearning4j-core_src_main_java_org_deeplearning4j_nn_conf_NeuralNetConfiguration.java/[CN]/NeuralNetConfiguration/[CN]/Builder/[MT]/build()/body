{
  NeuralNetConfiguration conf=new NeuralNetConfiguration();
  conf.minimize=minimize;
  conf.maxNumLineSearchIterations=maxNumLineSearchIterations;
  conf.layer=layer;
  conf.numIterations=numIterations;
  conf.useRegularization=useRegularization;
  conf.optimizationAlgo=optimizationAlgo;
  conf.seed=seed;
  conf.stepFunction=stepFunction;
  conf.useDropConnect=useDropConnect;
  conf.miniBatch=miniBatch;
  conf.learningRatePolicy=learningRatePolicy;
  conf.lrPolicyDecayRate=lrPolicyDecayRate;
  conf.lrPolicySteps=lrPolicySteps;
  conf.lrPolicyPower=lrPolicyPower;
  learningRateValidation();
  if (layer != null) {
    if (Double.isNaN(layer.getLearningRate()))     layer.setLearningRate(learningRate);
    if (Double.isNaN(layer.getBiasLearningRate()))     layer.setBiasLearningRate(layer.getLearningRate());
    if (layer.getLearningRateSchedule() == null)     layer.setLearningRateSchedule(learningRateSchedule);
    if (Double.isNaN(layer.getL1()))     layer.setL1(l1);
    if (Double.isNaN(layer.getL2()))     layer.setL2(l2);
    if (layer.getActivationFunction() == null)     layer.setActivationFunction(activationFunction);
    if (layer.getWeightInit() == null)     layer.setWeightInit(weightInit);
    if (Double.isNaN(layer.getBiasInit()))     layer.setBiasInit(biasInit);
    if (Double.isNaN(layer.getDropOut()))     layer.setDropOut(dropOut);
    if (layer.getUpdater() == null)     layer.setUpdater(updater);
    updaterValidation();
    if (layer.getGradientNormalization() == null)     layer.setGradientNormalization(gradientNormalization);
    if (Double.isNaN(layer.getGradientNormalizationThreshold()))     layer.setGradientNormalizationThreshold(gradientNormalizationThreshold);
  }
  generalValidation();
  return conf;
}
