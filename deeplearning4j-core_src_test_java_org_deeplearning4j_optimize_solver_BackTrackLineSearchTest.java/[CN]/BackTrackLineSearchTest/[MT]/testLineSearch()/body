{
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().lossFunction(LossFunctions.LossFunction.MCXENT).optimizationAlgo(OptimizationAlgorithm.ITERATION_GRADIENT_DESCENT).activationFunction("softmax").iterations(10).weightInit(WeightInit.XAVIER).learningRate(1e-1).nIn(4).nOut(3).layer(new org.deeplearning4j.nn.conf.layers.OutputLayer()).build();
  OutputLayer l=LayerFactories.getFactory(conf.getLayer()).create(conf,Arrays.<IterationListener>asList(new ScoreIterationListener(1)));
  DataSet d=new IrisDataSetIterator(1,1).next();
  d.normalizeZeroMeanZeroUnitVariance();
  l.setInput(d.getFeatureMatrix());
  l.setLabels(d.getLabels());
  BackTrackLineSearch lineSearch=new BackTrackLineSearch(l,l.getOptimizer());
  double step=lineSearch.optimize(1.0,l.params(),l.gradient().gradient());
  assertEquals(0.0,step,1e-1);
}
