{
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().lossFunction(LossFunctions.LossFunction.MCXENT).optimizationAlgo(optimizer).iterations(iterations).batchSize(1).constrainGradientToUnitNorm(false).corruptionLevel(0.0).learningRate(0.1).maxNumLineSearchIterations(2).regularization(false).l1(0.0).l2(0.0).momentum(0.0).applySparsity(false).sparsity(0.0).seed(12345L).list(2).layer(0,new RBM.Builder().nIn(4).nOut(5).weightInit(WeightInit.XAVIER).dist(new NormalDistribution(0,0.1)).activation(activationFunction).build()).layer(1,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.RMSE_XENT).nIn(5).nOut(3).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.1)).activation("softmax").build()).build();
  return conf;
}
