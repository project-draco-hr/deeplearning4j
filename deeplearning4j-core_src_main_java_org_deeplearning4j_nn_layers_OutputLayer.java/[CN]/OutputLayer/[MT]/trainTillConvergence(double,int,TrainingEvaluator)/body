{
  OutputLayerOptimizer opt=new OutputLayerOptimizer(this,learningRate);
  adaGrad.setMasterStepSize(learningRate);
  biasAdaGrad.setMasterStepSize(learningRate);
  if (conf.getOptimizationAlgo() == OptimizationAlgorithm.CONJUGATE_GRADIENT) {
    VectorizedNonZeroStoppingConjugateGradient g=new VectorizedNonZeroStoppingConjugateGradient(opt);
    g.setTolerance(1e-3f);
    g.setTrainingEvaluator(eval);
    g.setMaxIterations(numEpochs);
    g.optimize(numEpochs);
  }
 else   if (conf.getOptimizationAlgo() == OptimizationAlgorithm.ITERATION_GRADIENT_DESCENT) {
    IterationGradientDescent g=new IterationGradientDescent(opt,conf.getNumIterations());
    g.optimize();
  }
 else {
    VectorizedDeepLearningGradientAscent g=new VectorizedDeepLearningGradientAscent(opt);
    g.setTolerance(1e-3f);
    g.setTrainingEvaluator(eval);
    g.optimize(numEpochs);
  }
}
