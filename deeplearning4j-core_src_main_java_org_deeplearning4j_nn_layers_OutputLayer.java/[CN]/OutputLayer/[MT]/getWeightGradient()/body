{
  INDArray z=output(input);
switch (conf.getLossFunction()) {
case MCXENT:
    INDArray preOut=preOutput(input);
  INDArray pYGivenX=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("softmax",preOut),0);
INDArray dy=labels.sub(pYGivenX);
return input.transpose().mmul(dy);
case XENT:
INDArray xEntDiff=z.sub(labels);
return input.transpose().mmul(xEntDiff.div(z.mul(z.rsub(1))));
case MSE:
INDArray mseDelta=labels.sub(z);
return input.transpose().mmul(mseDelta.neg());
case EXPLL:
return input.transpose().mmul(labels.rsub(1).divi(z));
case RMSE_XENT:
INDArray rmseXentDiff=labels.sub(z);
INDArray squaredrmseXentDiff=pow(rmseXentDiff,2.0);
INDArray sqrt=sqrt(squaredrmseXentDiff);
return input.transpose().mmul(sqrt);
case SQUARED_LOSS:
return input.transpose().mmul(pow(labels.sub(z),2));
case NEGATIVELOGLIKELIHOOD:
return input.transpose().mmul(log(z).negi());
}
throw new IllegalStateException("Invalid loss function");
}
