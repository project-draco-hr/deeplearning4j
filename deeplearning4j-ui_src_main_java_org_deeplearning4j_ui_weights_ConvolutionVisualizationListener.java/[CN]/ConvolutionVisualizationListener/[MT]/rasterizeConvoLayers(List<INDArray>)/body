{
  int border=1;
  int padding_row=2;
  int padding_col=40;
  int width=0;
  int height=0;
  int[] shape=tensors3D.get(0).shape();
  height=(shape[1]) + (border * 2) + padding_row;
  width=(shape[2]) + (border * 2) + padding_col;
  log.info("Output image dimensions: {height: " + height + ", width: "+ width+ "}");
  BufferedImage output=new BufferedImage(width * tensors3D.size() + ((tensors3D.size() - 1) * width),height * shape[0],BufferedImage.TYPE_BYTE_GRAY);
  Graphics2D graphics2D=output.createGraphics();
  for (int layer=0; layer < tensors3D.size(); layer++) {
    INDArray tad=tensors3D.get(layer);
    int zoomed=0;
    for (int z=0; z < tad.shape()[0]; z++) {
      INDArray tad2D=tad.tensorAlongDimension(z,2,1);
      int loc_height=(tad2D.shape()[0]) + (border * 2) + padding_row;
      int loc_width=(tad2D.shape()[1]) + (border * 2) + padding_col;
      BufferedImage currentImage=renderImageGrayscale(tad2D);
      try {
        ImageIO.write(currentImage,"png",new File("tmp/image_l" + layer + "_z"+ z+ ".png"));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      graphics2D.drawImage(currentImage,layer * width + 1,z * loc_height + 1,null);
      graphics2D.drawRect(layer * width,z * loc_height,tad2D.shape()[1],tad2D.shape()[0]);
      if (z % 5 == 0 && loc_height != height && loc_width != width && z != 0 && z < tad.shape()[0] - 10) {
        log.info("Vis layer: " + z);
        graphics2D.drawImage(currentImage,layer * width + padding_col,z * loc_height + 1,shape[2],shape[1],null);
        graphics2D.drawRect(layer * width + padding_col,z * loc_height,shape[2],shape[1]);
        graphics2D.drawLine(layer * width + tad2D.shape()[1],z * loc_height + tad2D.shape()[0],layer * width + padding_col,z * loc_height + shape[1]);
      }
    }
  }
  return output;
}
