{
  MultiLayerConfiguration c=new NeuralNetConfiguration.Builder().nIn(4).nOut(3).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.1)).activationFunction(activationFunction).lossFunction(LossFunctions.LossFunction.RMSE_XENT).optimizationAlgo(OptimizationAlgorithm.GRADIENT_DESCENT).iterations(iterations).batchSize(1).constrainGradientToUnitNorm(false).corruptionLevel(0.0).layer(new RBM()).learningRate(0.1).useAdaGrad(false).numLineSearchIterations(1).regularization(false).l1(0.0).l2(0.0).dropOut(0.0).momentum(0.0).applySparsity(false).sparsity(0.0).seed(12345L).list(hiddenLayerSizes.length + 1).hiddenLayerSizes(hiddenLayerSizes).useDropConnect(false).override(hiddenLayerSizes.length,new ConfOverride(){
    @Override public void overrideLayer(    int i,    NeuralNetConfiguration.Builder builder){
      builder.activationFunction("softmax");
      builder.layer(new OutputLayer());
      builder.weightInit(WeightInit.DISTRIBUTION);
      builder.dist(new NormalDistribution(0,0.1));
    }
  }
).build();
  return c;
}
