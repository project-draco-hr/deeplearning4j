{
  RandomGenerator gen=new MersenneTwister(123);
  MnistDataFetcher fetcher=new MnistDataFetcher(true);
  fetcher.fetch(10);
  DataSet d2=fetcher.next();
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().momentum(5e-1f).weightInit(WeightInit.DISTRIBUTION).dist(Distributions.uniform(gen,784,10)).withActivationType(NeuralNetConfiguration.ActivationType.SAMPLE).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).rng(gen).learningRate(1e-1f).nIn(784).nOut(d2.numOutcomes()).build();
  DBN d=new DBN.Builder().configure(conf).hiddenLayerSizes(new int[]{500,250,200}).build();
  for (int i=0; i < d.getLayers().length; i++) {
    d.getLayers()[i].conf().setK(1);
    d.getNeuralNets()[i].conf().setK(1);
  }
  d.getOutputLayer().conf().setActivationFunction(Activations.softMaxRows());
  d.getOutputLayer().conf().setLossFunction(LossFunctions.LossFunction.MCXENT);
}
