{
  double len=n;
  int desiredElementsAlongDimension=ndArray.length();
  if (len > desiredElementsAlongDimension) {
    ndArray=ComplexNDArrayUtil.padWithZeros(ndArray,new int[]{n});
  }
 else   if (len < desiredElementsAlongDimension) {
    ndArray=ComplexNDArrayUtil.truncate(ndArray,n,0);
  }
  IComplexNumber c2=NDArrays.createDouble(0,-2).muli(FastMath.PI);
  INDArray n=NDArrays.arange(0,this.n);
  INDArray k=n.reshape(new int[]{n.length(),1});
  IComplexNDArray M=NDArrays.createComplex(k.mmul(n).mul(NDArrays.scalar(c2)).divi(NDArrays.scalar(len)));
  new ArrayOps().from(M).op(Exp.class).build().exec();
  IComplexNDArray reshaped=ndArray.reshape(new int[]{ndArray.length()});
  IComplexNDArray matrix=reshaped.mmul(M);
  if (originalN > 0) {
    matrix=ComplexNDArrayUtil.truncate(matrix,originalN,0);
  }
  return matrix;
}
