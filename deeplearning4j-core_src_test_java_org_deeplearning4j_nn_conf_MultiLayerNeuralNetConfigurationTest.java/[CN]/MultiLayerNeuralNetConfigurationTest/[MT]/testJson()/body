{
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().layerFactory(LayerFactories.getFactory(RBM.class)).dist(Nd4j.getDistributions().createNormal(1,1e-1)).list(4).preProcessor(0,new ConvolutionPostProcessor()).hiddenLayerSizes(3,2,2).build();
  String json=conf.toJson();
  MultiLayerConfiguration from=MultiLayerConfiguration.fromJson(json);
  assertEquals(conf,from);
  Properties props=new Properties();
  props.put("json",json);
  String key=props.getProperty("json");
  assertEquals(json,key);
  File f=new File("props");
  f.deleteOnExit();
  BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(f));
  props.store(bos,"");
  bos.flush();
  bos.close();
  BufferedInputStream bis=new BufferedInputStream(new FileInputStream(f));
  Properties props2=new Properties();
  props2.load(bis);
  bis.close();
  assertEquals(props2.getProperty("json"),props.getProperty("json"));
  MultiLayerConfiguration conf3=MultiLayerConfiguration.fromJson(props2.getProperty("json"));
  assertEquals(conf,conf3);
}
