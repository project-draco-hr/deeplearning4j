{
  log.info("Setting up hazelcast with type " + type + " connection string "+ connectionString+ " and port "+ stateTrackerPort);
  if (type.equals("master") && !PortTaken.portTaken(stateTrackerPort)) {
    if (connectionString.equals("master")) {
      String hazelCastHost;
      try {
        hazelCastHost=System.getProperty(HAZELCAST_HOST,InetAddress.getLocalHost().getHostName());
      }
 catch (      Exception e) {
        hazelCastHost="0.0.0.0";
      }
      this.connectionString=hazelCastHost + ":" + stateTrackerPort;
    }
    this.hazelCastPort=stateTrackerPort;
    config=hazelcast();
    h=Hazelcast.newHazelcastInstance(config);
    h.getCluster().addMembershipListener(new MembershipListener(){
      @Override public void memberAdded(      MembershipEvent membershipEvent){
        log.info("Member added " + membershipEvent.toString());
      }
      @Override public void memberRemoved(      MembershipEvent membershipEvent){
        log.info("Member removed " + membershipEvent.toString());
      }
      @Override public void memberAttributeChanged(      MemberAttributeEvent memberAttributeEvent){
        log.info("Member changed " + memberAttributeEvent.toString());
      }
    }
);
  }
 else   if (type.equals("master") && PortTaken.portTaken(stateTrackerPort))   throw new IllegalStateException("Specified type was master and the port specified was taken, please specify a different port");
 else {
    setConnectionString(connectionString);
    log.info("Connecting to hazelcast on " + connectionString);
    ClientConfig client=new ClientConfig();
    client.getNetworkConfig().addAddress(connectionString);
    h=HazelcastClient.newHazelcastClient(client);
  }
  this.type=type;
  jobs=h.getList(JOBS);
  workers=h.getList(WORKERS);
  recentlyClearedJobs=h.getSet(RECENTLY_CLEARED);
  begunTraining=h.getAtomicReference(BEGUN);
  miniBatchSize=h.getAtomicReference(INPUT_SPLIT);
  workerEnabled=h.getMap(WORKER_ENABLED);
  replicate=h.getList(REPLICATE_WEIGHTS);
  topics=h.getList(TOPICS);
  updates=h.getList(UPDATES);
  heartbeat=h.getMap(HEART_BEAT);
  master=h.getAtomicReference(RESULT);
  isPretrain=h.getAtomicReference(IS_PRETRAIN);
  numTimesPretrain=h.getAtomicReference(NUM_TIMES_RUN_PRETRAIN);
  numTimesPretrainRan=h.getAtomicReference(NUM_TIMES_PRETRAIN_RAN);
  done=h.getAtomicReference(DONE);
  bestLoss=h.getAtomicReference(BEST_LOSS);
  earlyStop=h.getAtomicReference(EARLY_STOP);
  patience=h.getAtomicReference(PATIENCE);
  numBatches=h.getAtomicReference(NUM_BATCHES_SO_FAR_RAN);
  references=h.getMap(GLOBAL_REFERENCE);
  if (type.equals("master")) {
    begunTraining.set(false);
    saver=createUpdateSaver();
    numTimesPretrainRan.set(0);
    numTimesPretrain.set(1);
    isPretrain.set(true);
    done.set(false);
    resource=new StateTrackerDropWizardResource(this);
    bestLoss.set(Double.POSITIVE_INFINITY);
    earlyStop.set(true);
    numBatches.set(0);
  }
  workRetriever=new LocalWorkRetriever(h);
}
