{
  ZipOutputStream zipfile=new ZipOutputStream(new CloseShieldOutputStream(stream));
  ZipEntry syn0=new ZipEntry("syn0.txt");
  zipfile.putNextEntry(syn0);
  File tempFileSyn0=File.createTempFile("paravec","0");
  tempFileSyn0.deleteOnExit();
  writeWordVectors(vectors.lookupTable(),tempFileSyn0);
  FileInputStream fis=new FileInputStream(tempFileSyn0);
  writeEntry(fis,zipfile);
  fis.close();
  File tempFileSyn1=File.createTempFile("paravec","1");
  tempFileSyn1.deleteOnExit();
  INDArray syn1=((InMemoryLookupTable<VocabWord>)vectors.getLookupTable()).getSyn1();
  try (PrintWriter writer=new PrintWriter(new FileWriter(tempFileSyn1))){
    for (int x=0; x < syn1.rows(); x++) {
      INDArray row=syn1.getRow(x);
      StringBuilder builder=new StringBuilder();
      for (int i=0; i < row.length(); i++) {
        builder.append(row.getDouble(i)).append(" ");
      }
      writer.println(builder.toString().trim());
    }
  }
   ZipEntry zSyn1=new ZipEntry("syn1.txt");
  zipfile.putNextEntry(zSyn1);
  fis=new FileInputStream(tempFileSyn1);
  writeEntry(fis,zipfile);
  fis.close();
  File tempFileCodes=File.createTempFile("paravec","h");
  tempFileCodes.deleteOnExit();
  ZipEntry hC=new ZipEntry("codes.txt");
  zipfile.putNextEntry(hC);
  try (PrintWriter writer=new PrintWriter(new FileWriter(tempFileCodes))){
    for (int i=0; i < vectors.getVocab().numWords(); i++) {
      VocabWord word=vectors.getVocab().elementAtIndex(i);
      StringBuilder builder=new StringBuilder(word.getLabel()).append(" ");
      for (      int code : word.getCodes()) {
        builder.append(code).append(" ");
      }
      writer.println(builder.toString().trim());
    }
  }
   fis=new FileInputStream(tempFileCodes);
  writeEntry(fis,zipfile);
  fis.close();
  File tempFileHuffman=File.createTempFile("paravec","h");
  tempFileHuffman.deleteOnExit();
  ZipEntry hP=new ZipEntry("huffman.txt");
  zipfile.putNextEntry(hP);
  try (PrintWriter writer=new PrintWriter(new FileWriter(tempFileHuffman))){
    for (int i=0; i < vectors.getVocab().numWords(); i++) {
      VocabWord word=vectors.getVocab().elementAtIndex(i);
      StringBuilder builder=new StringBuilder(word.getLabel()).append(" ");
      for (      int point : word.getPoints()) {
        builder.append(point).append(" ");
      }
      writer.println(builder.toString().trim());
    }
  }
   fis=new FileInputStream(tempFileHuffman);
  writeEntry(fis,zipfile);
  fis.close();
  ZipEntry config=new ZipEntry("config.json");
  zipfile.putNextEntry(config);
  writeEntry(new ByteArrayInputStream(vectors.getConfiguration().toJson().getBytes()),zipfile);
  ZipEntry labels=new ZipEntry("labels.txt");
  zipfile.putNextEntry(labels);
  StringBuilder builder=new StringBuilder();
  for (  VocabWord word : vectors.getVocab().tokens()) {
    if (word.isLabel())     builder.append(word.getLabel()).append("\n");
  }
  writeEntry(new ByteArrayInputStream(builder.toString().trim().getBytes()),zipfile);
  zipfile.flush();
  zipfile.close();
}
