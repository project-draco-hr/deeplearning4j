{
  DataSetIterator iter=new LFWDataSetIterator(10,150000,28,28);
  log.info("Loading LFW...");
  DataSet all=iter.next(100);
  all.filterAndStrip(new int[]{2,3});
  iter=new SamplingDataSetIterator(all,10,10000);
  int cols=iter.inputColumns();
  log.info("Learning from " + cols);
  GaussianRectifiedLinearRBM r=new GaussianRectifiedLinearRBM.Builder().numberOfVisible(iter.inputColumns()).useAdaGrad(true).withOptmizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).numHidden(600).withMomentum(0.3).normalizeByInputRows(true).withDropOut(3e-1).withLossFunction(LossFunction.RECONSTRUCTION_CROSSENTROPY).build();
  NeuralNetPlotter plotter=new NeuralNetPlotter();
  int numIter=0;
  while (iter.hasNext()) {
    DataSet curr=iter.next();
    log.info("Training on pics " + curr.labelDistribution());
    r.trainTillConvergence(curr.getFirst(),1e-3,new Object[]{1,1e-3,10000});
    if (numIter % 30 == 0) {
      FilterRenderer render=new FilterRenderer();
      try {
        render.renderFilters(r.getW(),"currimg.png",(int)Math.sqrt(r.getW().rows),(int)Math.sqrt(r.getW().rows));
      }
 catch (      Exception e) {
        log.error("Unable to plot filter, continuing...",e);
      }
    }
    numIter++;
  }
  File f=new File("faces-rbm.bin");
  log.info("Saving to " + f.getAbsolutePath());
  SerializationUtils.saveObject(r,f);
  iter.reset();
  while (iter.hasNext()) {
    DataSet first=iter.next();
    DoubleMatrix reconstruct=r.reconstruct(first.getFirst());
    for (int j=0; j < first.numExamples(); j++) {
      DoubleMatrix draw1=first.get(j).getFirst().mul(255);
      DoubleMatrix reconstructed2=reconstruct.getRow(j);
      reconstructed2=MatrixUtil.roundToTheNearest(reconstructed2,0);
      DoubleMatrix draw2=reconstructed2.mul(255);
      DrawMnistGreyScale d=new DrawMnistGreyScale(draw1);
      d.title="REAL";
      d.draw();
      DrawMnistGreyScale d2=new DrawMnistGreyScale(draw2,1000,1000);
      d2.title="TEST";
      d2.draw();
      Thread.sleep(10000);
      d.frame.dispose();
      d2.frame.dispose();
    }
  }
}
