{
  DataSetIterator iter=new LFWDataSetIterator(10,150000,28,28);
  log.info("Loading LFW...");
  DataSet all=iter.next(300);
  iter=new SamplingDataSetIterator(all,10,100);
  int cols=iter.inputColumns();
  log.info("Learning from " + cols);
  RBM r=new RBM.Builder().withVisible(RBM.VisibleUnit.GAUSSIAN).withHidden(RBM.HiddenUnit.RECTIFIED).numberOfVisible(iter.inputColumns()).withOptmizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).numHidden(600).renderWeights(1).withLossFunction(LossFunction.RECONSTRUCTION_CROSSENTROPY).build();
  NeuralNetPlotter plotter=new NeuralNetPlotter();
  int numIter=0;
  while (iter.hasNext()) {
    DataSet curr=iter.next();
    curr.normalizeZeroMeanZeroUnitVariance();
    r.trainTillConvergence(curr.getFeatureMatrix(),1e-1f,new Object[]{1,1e-1f,10000});
    if (numIter % 10 == 0) {
      FilterRenderer render=new FilterRenderer();
      try {
        render.renderFilters(r.getW(),"currimg.png",(int)Math.sqrt(r.getW().rows()),(int)Math.sqrt(r.getW().rows()),curr.numExamples());
      }
 catch (      Exception e) {
        log.error("Unable to plot filter, continuing...",e);
      }
    }
    numIter++;
  }
  File f=new File("faces-rbm.bin");
  log.info("Saving to " + f.getAbsolutePath());
  SerializationUtils.saveObject(r,f);
  iter.reset();
  while (iter.hasNext()) {
    DataSet first=iter.next();
    INDArray reconstruct=r.reconstruct(first.getFeatureMatrix());
    for (int j=0; j < first.numExamples(); j++) {
      INDArray draw1=first.get(j).getFeatureMatrix().mul(255);
      INDArray reconstructed2=reconstruct.getRow(j).div(255);
      INDArray draw2=reconstructed2.mul(255);
      DrawReconstruction d=new DrawReconstruction(draw1);
      d.title="REAL";
      d.draw();
      DrawReconstruction d2=new DrawReconstruction(draw2,1000,1000);
      d2.title="TEST";
      d2.draw();
      Thread.sleep(10000);
      d.frame.dispose();
      d2.frame.dispose();
    }
  }
}
