{
  DataSetIterator iter=new LFWDataSetIterator(10,150000);
  int cols=iter.inputColumns();
  log.info("Learning from " + cols);
  GaussianRectifiedLinearRBM r=new GaussianRectifiedLinearRBM.Builder().numberOfVisible(iter.inputColumns()).useAdaGrad(true).withOptmizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).numHidden(600).normalizeByInputRows(true).withMomentum(0.1).withDropOut(1).withLossFunction(LossFunction.RECONSTRUCTION_CROSSENTROPY).build();
  for (int i=0; i < 100; i++) {
    while (iter.hasNext()) {
      DataSet next=iter.next();
      next.divideBy(255);
      next.normalizeZeroMeanZeroUnitVariance();
      r.trainTillConvergence(next.getFirst(),1e-2,new Object[]{1,1e-2,50});
      SerializationUtils.saveObject(r,new File("/home/agibsonccc/models/faces-rbm.bin"));
    }
    SerializationUtils.saveObject(r,new File("/home/agibsonccc/models/faces-rbm.bin"));
    iter.reset();
  }
  while (iter.hasNext()) {
    DataSet first=iter.next();
    DoubleMatrix reconstruct=r.reconstruct(first.getFirst());
    for (int j=0; j < first.numExamples(); j++) {
      DoubleMatrix draw1=first.get(j).getFirst().mul(255);
      DoubleMatrix reconstructed2=reconstruct.getRow(j);
      DoubleMatrix draw2=MatrixUtil.binomial(reconstructed2,1,new MersenneTwister(123)).mul(255);
      DrawMnistGreyScale d=new DrawMnistGreyScale(draw1);
      d.title="REAL";
      d.draw();
      DrawMnistGreyScale d2=new DrawMnistGreyScale(draw2,1000,1000);
      d2.title="TEST";
      d2.draw();
      Thread.sleep(10000);
      d.frame.dispose();
      d2.frame.dispose();
    }
  }
}
