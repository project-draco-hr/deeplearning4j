{
  heartbeat=context().system().scheduler().schedule(Duration.apply(30,TimeUnit.SECONDS),Duration.apply(30,TimeUnit.SECONDS),new Runnable(){
    @Override public void run(){
      if (!tracker.isDone())       tracker.addWorker(id);
      if (!tracker.isDone() && tracker.needsReplicate(id)) {
        try {
          log.info("Updating worker " + id);
          E u=tracker.getCurrent();
          if (u == null || u.get() == null) {
            return;
          }
          results=u;
          tracker.doneReplicating(id);
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
      try {
        checkJobAvailable();
        if (currentJob != null && !isWorking.get() && tracker.jobFor(id) != null) {
          log.info("Confirmation from " + currentJob.getWorkerId() + " on work");
          if (currentJob.getWork() == null)           throw new IllegalStateException("Work for worker " + id + " was null");
          DataSet data=(DataSet)currentJob.getWork();
          processDataSet(data.asList());
        }
 else         if (currentJob == null || !isWorking.get() && tracker.jobFor(id) != null) {
          if (tracker.jobFor(id) != null)           tracker.clearJob(id);
          log.info("Clearing stale job... " + id);
        }
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
,context().dispatcher());
}
