{
  if (list == null || list.isEmpty()) {
    log.warn("Worker " + id + " was passed an empty or null list");
    return;
  }
  Future<E> f=Futures.future(new Callable<E>(){
    @Override public E call() throws Exception {
      DoubleMatrix newInput=new DoubleMatrix(list.size(),list.get(0).getFirst().columns);
      DoubleMatrix newOutput=new DoubleMatrix(list.size(),list.get(0).getSecond().columns);
      for (int i=0; i < list.size(); i++) {
        newInput.putRow(i,list.get(i).getFirst());
        newOutput.putRow(i,list.get(i).getSecond());
      }
      if (tracker.needsReplicate(id)) {
        log.info("Updating network for worker " + id);
        results=tracker.getCurrent();
        tracker.doneReplicating(id);
      }
      E work=compute();
      if (work != null) {
        log.info("Done working; adding update to mini batch on worker " + id);
        tracker.addUpdate(id,work);
        tracker.disableWorker(id);
        log.info("Number of updates so far " + tracker.workerUpdates().size());
      }
      return work;
    }
  }
,getContext().dispatcher());
  ActorRefUtils.throwExceptionIfExists(f,context().dispatcher());
}
