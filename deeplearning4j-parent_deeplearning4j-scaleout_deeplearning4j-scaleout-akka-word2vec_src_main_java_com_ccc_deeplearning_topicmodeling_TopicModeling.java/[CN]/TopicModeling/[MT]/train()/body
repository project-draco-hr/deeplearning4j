{
  this.vocabCreator=new VocabCreator(stopWords,rootDir);
  vocab=vocabCreator.createVocab();
  int size=vocab.size();
  cdbn=new TopicModelingCDBN.Builder().numberOfInputs(size).numberOfOutPuts(labels.size()).hiddenLayerSizes(new int[]{size / 4,size / 8,size / 12}).build();
  List<DataSet> list=new ArrayList<DataSet>();
  for (  File f : rootDir.listFiles()) {
    for (    File doc : f.listFiles()) {
      DoubleMatrix train=toWordCountVector(doc).transpose();
      DoubleMatrix outcome=MatrixUtil.toOutcomeVector(labels.indexOf(f.getName()),labels.size());
      list.add(new DataSet(train,outcome));
    }
  }
  DataSet data=DataSet.merge(list);
  Evaluation eval=new Evaluation();
  DoubleMatrix first=data.getFirst();
  DoubleMatrix second=data.getSecond();
  autoEncoder=new DeepAutoEncoder(cdbn,new Object[]{1,0.1,1000});
  autoEncoder.train(first,second,0.1);
  eval.eval(second,cdbn.predict(first));
  log.info("Final stats " + eval.stats());
}
