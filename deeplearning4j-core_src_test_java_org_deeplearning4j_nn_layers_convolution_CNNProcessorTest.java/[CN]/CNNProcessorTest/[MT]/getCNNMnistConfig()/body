{
  Nd4j.ENFORCE_NUMERICAL_STABILITY=true;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(123).iterations(5).weightInit(WeightInit.XAVIER).activationFunction("relu").optimizationAlgo(OptimizationAlgorithm.LINE_GRADIENT_DESCENT).list(3).layer(0,new org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder(new int[]{9,9},Convolution.Type.VALID).nIn(1).nOut(20).build()).layer(1,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX,new int[]{2,2}).build()).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nIn(20).nOut(10).activation("softmax").build()).inputPreProcessor(0,new ReshapeProcessor(new int[]{1,rows * cols},new int[]{1,1,rows,cols})).build();
  return new MultiLayerNetwork(conf);
}
