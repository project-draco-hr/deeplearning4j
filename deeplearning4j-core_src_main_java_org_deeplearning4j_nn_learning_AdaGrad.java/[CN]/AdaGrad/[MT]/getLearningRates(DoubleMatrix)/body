{
  this.gradient=gradient.dup();
  DoubleMatrix squaredGradient=pow(this.gradient,2);
  if (this.historicalGradient.length != this.gradient.length)   this.historicalGradient=DoubleMatrix.zeros(this.gradient.rows,this.gradient.columns);
  this.historicalGradient.addi(squaredGradient);
  double currentLearningRate=this.masterStepSize;
  if (decayLr && numIterations > 0) {
    this.masterStepSize*=lrDecay;
    if (masterStepSize < minLearningRate)     masterStepSize=minLearningRate;
  }
  numIterations++;
  this.adjustedGradient=this.gradient.div(sqrt(squaredGradient).add(fudgeFactor)).mul(currentLearningRate);
  this.adjustedGradient.addi(1e-6);
  return adjustedGradient;
}
