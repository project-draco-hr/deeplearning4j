{
  if (upper == lower)   return null;
  Node ret=new Node(lower,0);
  if (upper - lower > 1) {
    int randomPoint=MathUtils.randomNumberBetween(lower,upper - 1);
    int median=(upper + lower) / 2;
    double distances[]=new double[items.size()];
    double sortedDistances[]=new double[items.size()];
    DataPoint basePoint=items.get(randomPoint);
    for (int i=0; i < items.size(); ++i) {
      distances[i]=basePoint.euclidean(items.get(i));
      sortedDistances[i]=distances[i];
    }
    Arrays.sort(sortedDistances);
    final double medianDistance=sortedDistances[sortedDistances.length / 2];
    List<DataPoint> leftPoints=new ArrayList<>(sortedDistances.length);
    List<DataPoint> rightPoints=new ArrayList<>(sortedDistances.length);
    for (int i=0; i < distances.length; i++) {
      if (distances[i] < medianDistance) {
        leftPoints.add(items.get(i));
      }
 else {
        rightPoints.add(items.get(i));
      }
    }
    for (int i=0; i < leftPoints.size(); ++i) {
      items.set(i,leftPoints.get(i));
    }
    for (int i=0; i < rightPoints.size(); ++i) {
      items.set(i + leftPoints.size(),rightPoints.get(i));
    }
    ret.setThreshold(items.get(lower).euclidean(items.get(median)));
    ret.setIndex(lower);
    ret.setRight(buildFromPoints(lower + 1,median));
    ret.setRight(buildFromPoints(median,upper));
  }
  return ret;
}
