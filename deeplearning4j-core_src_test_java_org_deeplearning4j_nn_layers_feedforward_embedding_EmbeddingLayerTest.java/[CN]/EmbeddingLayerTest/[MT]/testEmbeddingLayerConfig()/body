{
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().activation("tanh").list(2).layer(0,new EmbeddingLayer.Builder().nIn(10).nOut(5).build()).layer(1,new OutputLayer.Builder().nIn(5).nOut(4).build()).pretrain(false).backprop(true).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  Layer l0=net.getLayer(0);
  assertEquals(org.deeplearning4j.nn.layers.feedforward.embedding.EmbeddingLayer.class,l0.getClass());
  assertEquals(10,((FeedForwardLayer)l0.conf().getLayer()).getNIn());
  assertEquals(5,((FeedForwardLayer)l0.conf().getLayer()).getNOut());
  INDArray weights=l0.getParam(DefaultParamInitializer.WEIGHT_KEY);
  INDArray bias=l0.getParam(DefaultParamInitializer.BIAS_KEY);
  assertArrayEquals(new int[]{10,5},weights.shape());
  assertArrayEquals(new int[]{1,5},bias.shape());
}
