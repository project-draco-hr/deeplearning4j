{
  RandomGenerator gen=new MersenneTwister(123);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().hiddenUnit(RBM.HiddenUnit.RECTIFIED).momentum(5e-1f).visibleUnit(RBM.VisibleUnit.GAUSSIAN).regularization(true).regularizationCoefficient(2e-4f).dist(Distributions.uniform(gen)).activationFunction(Activations.tanh()).iterations(100).weightInit(WeightInit.DISTRIBUTION).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).rng(gen).learningRate(1e-1f).nIn(4).nOut(3).build();
  List<NeuralNetConfiguration> list=new ArrayList<>();
  DBN d=new DBN.Builder().configure(conf).hiddenLayerSizes(new int[]{3}).forceEpochs().build();
  for (int i=0; i < d.getnLayers(); i++) {
  }
  d.getOutputLayer().conf().setActivationFunction(Activations.softMaxRows());
  d.getOutputLayer().conf().setLossFunction(LossFunctions.LossFunction.MCXENT);
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  DataSet next=iter.next(110);
  next.normalizeZeroMeanZeroUnitVariance();
  DataSetIterator iter2=new SamplingDataSetIterator(next,10,10);
  SplitTestAndTrain split=next.splitTestAndTrain(10);
  d.fit(split.getTrain());
  Evaluation eval=new Evaluation();
  INDArray output=d.output(split.getTest().getFeatureMatrix());
  eval.eval(split.getTest().getLabels(),output);
  log.info("Score " + eval.stats());
}
