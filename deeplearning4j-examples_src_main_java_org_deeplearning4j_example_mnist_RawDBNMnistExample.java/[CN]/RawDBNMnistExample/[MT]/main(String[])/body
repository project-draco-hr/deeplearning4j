{
  DataSetIterator iter=new RawMnistDataSetIterator(10,40);
  GaussianRectifiedLinearDBN dbn=new GaussianRectifiedLinearDBN.Builder().useAdaGrad(true).useRegularization(false).hiddenLayerSizes(new int[]{500,400,250}).normalizeByInputRows(true).numberOfInputs(784).numberOfOutPuts(10).build();
  while (iter.hasNext()) {
    DataSet next=iter.next();
    next.normalizeZeroMeanZeroUnitVariance();
    dbn.pretrain(next.getFirst(),1,0.0001,10000);
  }
  iter.reset();
  while (iter.hasNext()) {
    DataSet next=iter.next();
    next.normalizeZeroMeanZeroUnitVariance();
    dbn.setInput(next.getFirst());
    dbn.finetune(next.getSecond(),0.001,10000);
  }
  BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream("mnist-dbn.bin"));
  dbn.write(bos);
  bos.flush();
  bos.close();
  log.info("Saved dbn");
  iter.reset();
  Evaluation eval=new Evaluation();
  while (iter.hasNext()) {
    DataSet next=iter.next();
    DoubleMatrix predict=dbn.predict(next.getFirst());
    DoubleMatrix labels=next.getSecond();
    eval.eval(labels,predict);
  }
  log.info("Prediciton f scores and accuracy");
  log.info(eval.stats());
}
