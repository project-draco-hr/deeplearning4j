{
  int inverseCount=encoder.getNeuralNets().length - 1;
  NeuralNetwork[] autoEncoders=new NeuralNetwork[encoder.getNeuralNets().length * 2 - 1];
  Layer[] hiddenLayers=new Layer[autoEncoders.length + 1];
  for (int i=0; i < autoEncoders.length; i++) {
    if (i < encoder.getNeuralNets().length) {
      AutoEncoder a=new AutoEncoder.Builder().configure(encoder.getNeuralNets()[i].conf().clone()).withVisibleBias(encoder.getNeuralNets()[i].getvBias().dup()).withHBias(encoder.getNeuralNets()[i].gethBias().dup()).build();
      int nIn=a.getW().rows();
      int nOut=a.getW().columns();
      Layer h=encoder.getLayers()[i].clone();
      h.setConfiguration(a.conf());
      hiddenLayers[i]=h;
      autoEncoders[i]=a;
      hiddenLayers[i].setB(a.gethBias());
      hiddenLayers[i].setW(a.getW());
      hiddenLayers[i].conf().setnIn(nIn);
      hiddenLayers[i].conf().setnOut(nOut);
      autoEncoders[i].conf().setnIn(nIn);
      autoEncoders[i].conf().setnOut(nOut);
      if (i == encoder.getNeuralNets().length - 1)       a.conf().setActivationFunction(Activations.linear());
    }
 else {
      NeuralNetConfiguration reverseConf=encoder.getNeuralNets()[inverseCount].conf().clone();
      AutoEncoder a=new AutoEncoder.Builder().configure(reverseConf).withWeights(encoder.getNeuralNets()[inverseCount].getW().transpose()).withVisibleBias(encoder.getNeuralNets()[inverseCount].gethBias().dup()).withHBias(encoder.getNeuralNets()[inverseCount].getvBias().dup()).build();
      int nIn=a.getW().rows();
      int nOut=a.getW().columns();
      reverseConf.setnIn(nIn);
      reverseConf.setnOut(nOut);
      autoEncoders[i]=a;
      hiddenLayers[i]=encoder.getLayers()[inverseCount].transpose();
      hiddenLayers[i].setConfiguration(reverseConf);
      hiddenLayers[i].setB(a.gethBias());
      hiddenLayers[i].setW(a.getW());
      inverseCount--;
    }
  }
  OutputLayer o=new OutputLayer.Builder().configure(encoder.getNeuralNets()[0].conf()).withBias(encoder.getNeuralNets()[0].getvBias()).withWeights(encoder.getNeuralNets()[0].getW().transpose()).build();
  o.conf().setLossFunction(encoder.getOutputLayer().conf().getLossFunction());
  o.conf().setActivationType(NeuralNetConfiguration.ActivationType.HIDDEN_LAYER_ACTIVATION);
  o.conf().setnIn(o.getW().rows());
  o.conf().setnOut(o.getW().columns());
  hiddenLayers[hiddenLayers.length - 1]=o;
  SemanticHashing e=new SemanticHashing();
  e.setLayers(hiddenLayers);
  e.setNeuralNets(autoEncoders);
  e.setDefaultConfiguration(conf);
  e.setUseGaussNewtonVectorProductBackProp(encoder.isUseGaussNewtonVectorProductBackProp());
  e.setSampleFromHiddenActivations(encoder.isSampleFromHiddenActivations());
  e.setForceNumEpochs(shouldForceEpochs);
  MultiLayerConfiguration confs=new MultiLayerConfiguration.Builder().build();
  for (int i=0; i < e.layers.length; i++)   confs.getConfs().add(e.layers[i].conf());
  e.setLayerWiseConfigurations(confs);
  e.setDefaultConfiguration(confs.getConf(0));
  e.dimensionCheck();
  return e;
}
