{
  INDArray neu1e=Nd4j.zeros(lookupTable.layerSize());
  for (int p=0; p < currentWord.getCodeLength(); p++) {
    double f=0;
    int code=currentWord.getCodes().get(p);
    int point=currentWord.getPoints().get(p);
    INDArray syn1row=syn1.getRow(point);
    double dot=Nd4j.getBlasWrapper().dot(neu1,syn1.getRow(point));
    if (dot < -MAX_EXP || dot >= MAX_EXP)     continue;
    int idx=(int)((dot + MAX_EXP) * ((double)expTable.length / MAX_EXP / 2.0));
    if (idx >= expTable.length)     continue;
    f=expTable[idx];
    double g=useAdaGrad ? currentWord.getGradient(p,(1 - code - f),alpha) : (1 - code - f) * alpha;
    Nd4j.getBlasWrapper().level1().axpy(syn1row.length(),g,syn1row,neu1e);
    Nd4j.getBlasWrapper().level1().axpy(syn1row.length(),g,neu1,syn1row);
  }
  if (negative > 0) {
    int target=currentWord.getIndex();
    int label;
    for (int d=0; d < negative + 1; d++) {
      if (d == 0)       label=1;
 else {
        nextRandom.set(Math.abs(nextRandom.get() * 25214903917L + 11));
        int idx=Math.abs((int)(nextRandom.get() >> 16) % table.length());
        target=table.getInt(idx);
        if (target <= 0)         target=(int)nextRandom.get() % (vocabCache.numWords() - 1) + 1;
        if (target == currentWord.getIndex())         continue;
        label=0;
      }
      if (target >= syn1Neg.rows() || target < 0)       continue;
      double f=Nd4j.getBlasWrapper().dot(neu1,syn1Neg.slice(target));
      double g;
      if (f > MAX_EXP)       g=useAdaGrad ? lookupTable.getGradient(target,(label - 1)) : (label - 1) * alpha;
 else       if (f < -MAX_EXP)       g=label * (useAdaGrad ? lookupTable.getGradient(target,alpha) : alpha);
 else {
        int idx=(int)((f + MAX_EXP) * (expTable.length / MAX_EXP / 2));
        if (idx >= expTable.length)         continue;
        g=useAdaGrad ? lookupTable.getGradient(target,label - expTable[idx]) : (label - expTable[idx]) * alpha;
      }
      Nd4j.getBlasWrapper().level1().axpy(lookupTable.layerSize(),g,syn1Neg.slice(target),neu1e);
      Nd4j.getBlasWrapper().level1().axpy(lookupTable.layerSize(),g,neu1,syn1Neg.slice(target));
    }
  }
  return neu1e;
}
