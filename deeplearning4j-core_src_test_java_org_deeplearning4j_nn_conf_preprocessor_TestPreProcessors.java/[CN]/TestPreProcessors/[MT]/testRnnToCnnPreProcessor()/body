{
  int[] miniBatchSizes={5,1};
  int[] timeSeriesLengths={9,1};
  int[] inputHeights={10,30};
  int[] inputWidths={10,30};
  int[] numChannels={1,3,6};
  int cnnNChannelsIn=3;
  Nd4j.getRandom().setSeed(12345);
  System.out.println();
  for (  int miniBatchSize : miniBatchSizes) {
    for (    int timeSeriesLength : timeSeriesLengths) {
      for (      int inputHeight : inputHeights) {
        for (        int inputWidth : inputWidths) {
          for (          int nChannels : numChannels) {
            InputPreProcessor proc=new RnnToCnnPreProcessor(inputHeight,inputWidth,nChannels);
            NeuralNetConfiguration nnc=new NeuralNetConfiguration.Builder().layer(new org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder(inputWidth,inputHeight).nIn(cnnNChannelsIn).nOut(nChannels).build()).build();
            int numParams=LayerFactories.getFactory(nnc).initializer().numParams(nnc,true);
            INDArray params=Nd4j.create(1,numParams);
            ConvolutionLayer layer=LayerFactories.getFactory(nnc.getLayer()).create(nnc,null,0,params,true);
            layer.setInputMiniBatchSize(miniBatchSize);
            int[] shape_rnn=new int[]{miniBatchSize,nChannels * inputHeight * inputWidth,timeSeriesLength};
            INDArray rand=Nd4j.rand(shape_rnn);
            INDArray activationsRnn_c=Nd4j.create(shape_rnn,'c');
            INDArray activationsRnn_f=Nd4j.create(shape_rnn,'f');
            activationsRnn_c.assign(rand);
            activationsRnn_f.assign(rand);
            assertEquals(activationsRnn_c,activationsRnn_f);
            INDArray activationsCnn_c=proc.preProcess(activationsRnn_c,miniBatchSize);
            INDArray activationsCnn_f=proc.preProcess(activationsRnn_f,miniBatchSize);
            int[] shape_cnn=new int[]{miniBatchSize * timeSeriesLength,nChannels,inputHeight,inputWidth};
            assertArrayEquals(shape_cnn,activationsCnn_c.shape());
            assertArrayEquals(shape_cnn,activationsCnn_f.shape());
            assertEquals(activationsCnn_c,activationsCnn_f);
            INDArray twiceProcessed_c=proc.backprop(activationsCnn_c,miniBatchSize);
            INDArray twiceProcessed_f=proc.backprop(activationsCnn_c,miniBatchSize);
            assertArrayEquals(shape_rnn,twiceProcessed_c.shape());
            assertArrayEquals(shape_rnn,twiceProcessed_f.shape());
            assertEquals(activationsRnn_c,twiceProcessed_c);
            assertEquals(activationsRnn_c,twiceProcessed_f);
            InputPreProcessor compProc=new ComposableInputPreProcessor(new RnnToFeedForwardPreProcessor(),new FeedForwardToCnnPreProcessor(inputHeight,inputWidth,nChannels));
            INDArray activationsCnnComp_c=compProc.preProcess(activationsRnn_c,miniBatchSize);
            INDArray activationsCnnComp_f=compProc.preProcess(activationsRnn_f,miniBatchSize);
            assertEquals(activationsCnnComp_c,activationsCnn_c);
            assertEquals(activationsCnnComp_f,activationsCnn_f);
            int[] epsilonShape=new int[]{miniBatchSize * timeSeriesLength,nChannels,inputHeight,inputWidth};
            rand=Nd4j.rand(epsilonShape);
            INDArray epsilonsCnn_c=Nd4j.create(epsilonShape,'c');
            INDArray epsilonsCnn_f=Nd4j.create(epsilonShape,'f');
            epsilonsCnn_c.assign(rand);
            epsilonsCnn_f.assign(rand);
            INDArray epsilonsRnnComp_c=compProc.backprop(epsilonsCnn_c,miniBatchSize);
            INDArray epsilonsRnnComp_f=compProc.backprop(epsilonsCnn_f,miniBatchSize);
            assertEquals(epsilonsRnnComp_c,epsilonsRnnComp_f);
            INDArray epsilonsRnn_c=proc.backprop(epsilonsCnn_c,miniBatchSize);
            INDArray epsilonsRnn_f=proc.backprop(epsilonsCnn_f,miniBatchSize);
            assertEquals(epsilonsRnn_c,epsilonsRnn_f);
            if (!epsilonsRnn_c.equals(epsilonsRnnComp_c)) {
              System.out.println(miniBatchSize + "\t" + timeSeriesLength+ "\t"+ inputHeight+ "\t"+ inputWidth+ "\t"+ nChannels);
              System.out.println("expected - epsilonsRnnComp");
              System.out.println(Arrays.toString(epsilonsRnnComp_c.shape()));
              System.out.println(epsilonsRnnComp_c);
              System.out.println("actual - epsilonsRnn");
              System.out.println(Arrays.toString(epsilonsRnn_c.shape()));
              System.out.println(epsilonsRnn_c);
            }
            assertEquals(epsilonsRnnComp_c,epsilonsRnn_c);
            assertEquals(epsilonsRnnComp_c,epsilonsRnn_f);
          }
        }
      }
    }
  }
}
