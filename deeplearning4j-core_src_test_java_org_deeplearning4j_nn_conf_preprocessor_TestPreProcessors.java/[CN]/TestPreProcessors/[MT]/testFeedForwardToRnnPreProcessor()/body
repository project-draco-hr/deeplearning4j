{
  Nd4j.getRandom().setSeed(12345L);
  int[] miniBatchSizes={5,1,5,1};
  int[] timeSeriesLengths={9,9,1,1};
  for (int x=0; x < miniBatchSizes.length; x++) {
    int miniBatchSize=miniBatchSizes[x];
    int layerSize=7;
    int timeSeriesLength=timeSeriesLengths[x];
    FeedForwardToRnnPreProcessor proc=new FeedForwardToRnnPreProcessor();
    NeuralNetConfiguration nnc=new NeuralNetConfiguration.Builder().layer(new org.deeplearning4j.nn.conf.layers.DenseLayer.Builder().nIn(layerSize).nOut(layerSize).build()).build();
    DenseLayer layer=LayerFactories.getFactory(nnc.getLayer()).create(nnc);
    layer.setInputMiniBatchSize(miniBatchSize);
    INDArray rand=Nd4j.rand(miniBatchSize * timeSeriesLength,layerSize);
    INDArray activations2dc=Nd4j.create(new int[]{miniBatchSize * timeSeriesLength,layerSize},'c');
    INDArray activations2df=Nd4j.create(new int[]{miniBatchSize * timeSeriesLength,layerSize},'f');
    activations2dc.assign(rand);
    activations2df.assign(rand);
    assertEquals(activations2dc,activations2df);
    INDArray activations3dc=proc.preProcess(activations2dc,miniBatchSize);
    INDArray activations3df=proc.preProcess(activations2df,miniBatchSize);
    assertArrayEquals(new int[]{miniBatchSize,layerSize,timeSeriesLength},activations3dc.shape());
    assertArrayEquals(new int[]{miniBatchSize,layerSize,timeSeriesLength},activations3df.shape());
    assertEquals(activations3dc,activations3df);
    int nRows2D=miniBatchSize * timeSeriesLength;
    for (int i=0; i < nRows2D; i++) {
      int time=i % timeSeriesLength;
      int example=i / timeSeriesLength;
      INDArray row2d=activations2dc.getRow(i);
      INDArray row3dc=activations3dc.tensorAlongDimension(time,1,0).getRow(example);
      INDArray row3df=activations3df.tensorAlongDimension(time,1,0).getRow(example);
      assertTrue(row2d.equals(row3dc));
      assertTrue(row2d.equals(row3df));
    }
    INDArray epsilon2d1=proc.backprop(activations3dc,miniBatchSize);
    INDArray epsilon2d2=proc.backprop(activations3df,miniBatchSize);
    assertTrue(epsilon2d1.equals(activations2dc));
    assertTrue(epsilon2d2.equals(activations2dc));
    INDArray act3d_c=Nd4j.create(activations3dc.shape(),'c');
    act3d_c.assign(activations3dc);
    INDArray act3d_f=Nd4j.create(activations3dc.shape(),'f');
    act3d_f.assign(activations3dc);
    assertEquals(activations2dc,proc.backprop(act3d_c,miniBatchSize));
    assertEquals(activations2dc,proc.backprop(act3d_f,miniBatchSize));
  }
}
