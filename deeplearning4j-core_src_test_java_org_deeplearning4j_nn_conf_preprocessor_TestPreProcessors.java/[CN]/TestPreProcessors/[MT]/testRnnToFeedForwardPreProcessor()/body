{
  int[] miniBatchSizes={5,1,5,1};
  int[] timeSeriesLengths={9,9,1,1};
  for (int x=0; x < miniBatchSizes.length; x++) {
    int miniBatchSize=miniBatchSizes[x];
    int layerSize=7;
    int timeSeriesLength=timeSeriesLengths[x];
    RnnToFeedForwardPreProcessor proc=new RnnToFeedForwardPreProcessor();
    NeuralNetConfiguration nnc=new NeuralNetConfiguration.Builder().layer(new org.deeplearning4j.nn.conf.layers.DenseLayer.Builder().nIn(layerSize).nOut(layerSize).build()).build();
    DenseLayer layer=LayerFactories.getFactory(nnc.getLayer()).create(nnc);
    layer.setInputMiniBatchSize(miniBatchSize);
    INDArray activations3dc=Nd4j.create(new int[]{miniBatchSize,layerSize,timeSeriesLength},'c');
    INDArray activations3df=Nd4j.create(new int[]{miniBatchSize,layerSize,timeSeriesLength},'f');
    for (int i=0; i < miniBatchSize; i++) {
      for (int j=0; j < layerSize; j++) {
        for (int k=0; k < timeSeriesLength; k++) {
          double value=100 * i + 10 * j + k;
          activations3dc.putScalar(new int[]{i,j,k},value);
          activations3df.putScalar(new int[]{i,j,k},value);
        }
      }
    }
    assertEquals(activations3dc,activations3df);
    INDArray activations2dc=proc.preProcess(activations3dc,layer);
    INDArray activations2df=proc.preProcess(activations3df,layer);
    assertArrayEquals(activations2dc.shape(),new int[]{miniBatchSize * timeSeriesLength,layerSize});
    assertArrayEquals(activations2df.shape(),new int[]{miniBatchSize * timeSeriesLength,layerSize});
    assertEquals(activations2dc,activations2df);
    int nRows=activations2dc.rows();
    for (int i=0; i < nRows; i++) {
      INDArray rowc=activations2dc.getRow(i);
      INDArray rowf=activations2df.getRow(i);
      assertArrayEquals(rowc.shape(),new int[]{1,layerSize});
      assertEquals(rowc,rowf);
      int origExampleNum=i / timeSeriesLength;
      int time=i % timeSeriesLength;
      INDArray expectedRow=activations3dc.tensorAlongDimension(time,1,0).getRow(origExampleNum);
      assertTrue(rowc.equals(expectedRow));
      assertTrue(rowf.equals(expectedRow));
    }
    INDArray outc=proc.backprop(activations2dc,layer);
    INDArray outf=proc.backprop(activations2df,layer);
    assertTrue(outc.equals(activations3dc));
    assertTrue(outf.equals(activations3df));
    INDArray eps2d_c=Nd4j.create(activations2dc.shape(),'c');
    INDArray eps2d_f=Nd4j.create(activations2dc.shape(),'f');
    eps2d_c.assign(activations2dc);
    eps2d_f.assign(activations2df);
    INDArray eps3d_c=proc.backprop(eps2d_c,layer);
    INDArray eps3d_f=proc.backprop(eps2d_f,layer);
    assertEquals(activations3dc,eps3d_c);
    assertEquals(activations3df,eps3d_f);
  }
}
