{
  int[] miniBatchSizes={5,1};
  int[] timeSeriesLengths={9,1};
  int[] inputHeights={10,30};
  int[] inputWidths={10,30};
  int[] numChannels={1,3,6};
  int cnnNChannelsIn=3;
  Nd4j.getRandom().setSeed(12345);
  System.out.println();
  for (  int miniBatchSize : miniBatchSizes) {
    for (    int timeSeriesLength : timeSeriesLengths) {
      for (      int inputHeight : inputHeights) {
        for (        int inputWidth : inputWidths) {
          for (          int nChannels : numChannels) {
            String msg="miniBatch=" + miniBatchSize + ", tsLength="+ timeSeriesLength+ ", h="+ inputHeight+ ", w="+ inputWidth+ ", ch="+ nChannels;
            InputPreProcessor proc=new CnnToRnnPreProcessor(inputHeight,inputWidth,nChannels);
            NeuralNetConfiguration nnc=new NeuralNetConfiguration.Builder().layer(new org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder(inputWidth,inputHeight).nIn(cnnNChannelsIn).nOut(nChannels).build()).build();
            int numParams=nnc.getLayer().initializer().numParams(nnc,true);
            INDArray params=Nd4j.create(1,numParams);
            ConvolutionLayer layer=(ConvolutionLayer)nnc.getLayer().instantiate(nnc,null,0,params,true);
            layer.setInputMiniBatchSize(miniBatchSize);
            INDArray activationsCnn=Nd4j.rand(new int[]{miniBatchSize * timeSeriesLength,nChannels,inputHeight,inputWidth});
            int prod=nChannels * inputHeight * inputWidth;
            INDArray activationsRnn=proc.preProcess(activationsCnn,miniBatchSize);
            assertArrayEquals(msg,new int[]{miniBatchSize,prod,timeSeriesLength},activationsRnn.shape());
            INDArray twiceProcessed=proc.backprop(activationsRnn,miniBatchSize);
            assertArrayEquals(msg,activationsCnn.shape(),twiceProcessed.shape());
            assertEquals(msg,activationsCnn,twiceProcessed);
            InputPreProcessor compProc=new ComposableInputPreProcessor(new CnnToFeedForwardPreProcessor(inputHeight,inputWidth,nChannels),new FeedForwardToRnnPreProcessor());
            INDArray activationsRnnComp=compProc.preProcess(activationsCnn,miniBatchSize);
            assertEquals(msg,activationsRnnComp,activationsRnn);
            INDArray epsilonsRnn=Nd4j.rand(new int[]{miniBatchSize,nChannels * inputHeight * inputWidth,timeSeriesLength});
            INDArray epsilonsCnnComp=compProc.backprop(epsilonsRnn,miniBatchSize);
            INDArray epsilonsCnn=proc.backprop(epsilonsRnn,miniBatchSize);
            if (!epsilonsCnn.equals(epsilonsCnnComp)) {
              System.out.println(miniBatchSize + "\t" + timeSeriesLength+ "\t"+ inputHeight+ "\t"+ inputWidth+ "\t"+ nChannels);
              System.out.println("expected - epsilonsCnnComp");
              System.out.println(Arrays.toString(epsilonsCnnComp.shape()));
              System.out.println(epsilonsCnnComp);
              System.out.println("actual - epsilonsCnn");
              System.out.println(Arrays.toString(epsilonsCnn.shape()));
              System.out.println(epsilonsCnn);
            }
            assertEquals(msg,epsilonsCnnComp,epsilonsCnn);
          }
        }
      }
    }
  }
}
