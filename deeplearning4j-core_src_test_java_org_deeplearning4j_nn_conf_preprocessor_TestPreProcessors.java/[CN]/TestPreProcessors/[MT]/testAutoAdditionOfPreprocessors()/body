{
  MultiLayerConfiguration conf1=new NeuralNetConfiguration.Builder().list().layer(0,new org.deeplearning4j.nn.conf.layers.DenseLayer.Builder().nIn(5).nOut(6).build()).layer(1,new GravesLSTM.Builder().nIn(6).nOut(7).build()).layer(2,new org.deeplearning4j.nn.conf.layers.DenseLayer.Builder().nIn(7).nOut(8).build()).layer(3,new RnnOutputLayer.Builder().nIn(8).nOut(9).build()).build();
  assertEquals(3,conf1.getInputPreProcessors().size());
  assertTrue(conf1.getInputPreProcess(1) instanceof FeedForwardToRnnPreProcessor);
  assertTrue(conf1.getInputPreProcess(2) instanceof RnnToFeedForwardPreProcessor);
  assertTrue(conf1.getInputPreProcess(3) instanceof FeedForwardToRnnPreProcessor);
  MultiLayerConfiguration conf2=new NeuralNetConfiguration.Builder().list().layer(0,new org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder().nOut(10).kernelSize(5,5).stride(1,1).build()).layer(1,new org.deeplearning4j.nn.conf.layers.DenseLayer.Builder().nOut(6).build()).layer(2,new RnnOutputLayer.Builder().nIn(6).nOut(5).build()).setInputType(InputType.convolutionalFlat(28,28,1)).build();
  assertEquals(3,conf2.getInputPreProcessors().size());
  assertTrue(conf2.getInputPreProcess(0) instanceof FeedForwardToCnnPreProcessor);
  assertTrue(conf2.getInputPreProcess(1) instanceof CnnToFeedForwardPreProcessor);
  assertTrue(conf2.getInputPreProcess(2) instanceof FeedForwardToRnnPreProcessor);
  MultiLayerConfiguration conf2a=new NeuralNetConfiguration.Builder().list().layer(0,new org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder().nOut(10).kernelSize(5,5).stride(1,1).build()).layer(1,new org.deeplearning4j.nn.conf.layers.DenseLayer.Builder().nOut(6).build()).layer(2,new RnnOutputLayer.Builder().nIn(6).nOut(5).build()).setInputType(InputType.convolutional(28,28,1)).build();
  assertEquals(2,conf2a.getInputPreProcessors().size());
  assertTrue(conf2a.getInputPreProcess(1) instanceof CnnToFeedForwardPreProcessor);
  assertTrue(conf2a.getInputPreProcess(2) instanceof FeedForwardToRnnPreProcessor);
  MultiLayerConfiguration conf3=new NeuralNetConfiguration.Builder().list().layer(0,new org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder().nOut(10).kernelSize(5,5).stride(1,1).build()).layer(1,new GravesLSTM.Builder().nOut(6).build()).layer(2,new RnnOutputLayer.Builder().nIn(6).nOut(5).build()).setInputType(InputType.convolutionalFlat(28,28,1)).build();
  assertEquals(2,conf3.getInputPreProcessors().size());
  assertTrue(conf3.getInputPreProcess(0) instanceof FeedForwardToCnnPreProcessor);
  assertTrue(conf3.getInputPreProcess(1) instanceof CnnToRnnPreProcessor);
}
