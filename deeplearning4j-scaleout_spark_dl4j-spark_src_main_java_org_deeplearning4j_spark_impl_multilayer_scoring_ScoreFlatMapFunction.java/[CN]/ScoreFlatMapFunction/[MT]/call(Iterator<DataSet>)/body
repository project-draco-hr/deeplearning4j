{
  if (!dataSetIterator.hasNext()) {
    return Collections.singletonList(new Tuple2<>(0,0.0));
  }
  DataSetIterator iter=new IteratorDataSetIterator(dataSetIterator,minibatchSize);
  MultiLayerNetwork network=new MultiLayerNetwork(MultiLayerConfiguration.fromJson(json));
  network.init();
  INDArray val=params.value().unsafeDuplication();
  if (val.length() != network.numParams(false))   throw new IllegalStateException("Network did not have same number of parameters as the broadcasted set parameters");
  network.setParameters(val);
  List<Tuple2<Integer,Double>> out=new ArrayList<>();
  while (iter.hasNext()) {
    DataSet ds=iter.next();
    double score=network.score(ds,false);
    int numExamples=ds.getFeatureMatrix().size(0);
    out.add(new Tuple2<>(numExamples,score * numExamples));
  }
  if (Nd4j.getExecutioner() instanceof GridExecutioner)   ((GridExecutioner)Nd4j.getExecutioner()).flushQueueBlocking();
  return out;
}
