{
  DoubleMatrix[] deltas=new DoubleMatrix[getnLayers() + 2];
  DoubleMatrix ix=null;
  List<DoubleMatrix> activations=feedForward();
  List<DoubleMatrix> weights=new ArrayList<>();
  List<DoubleMatrix> biases=new ArrayList<>();
  List<ActivationFunction> activationFunctions=new ArrayList<>();
  for (int j=0; j < getLayers().length; j++) {
    weights.add(getLayers()[j].getW());
    biases.add(getLayers()[j].gethBias());
    activationFunctions.add(getSigmoidLayers()[j].getActivationFunction());
  }
  biases.add(getOutputLayer().getB());
  weights.add(getOutputLayer().getW());
  activationFunctions.add(outputLayer.getActivationFunction());
  for (int i=getnLayers() + 1; i >= 0; i--) {
    if (i >= getnLayers() + 1) {
      ix=labels.sub(activations.get(i)).neg().mul(getOutputActivationFunction().applyDerivative(activations.get(i))).div(input.rows);
      deltas[i]=ix;
    }
 else {
      DoubleMatrix delta=activations.get(i).transpose().mmul(ix);
      deltas[i]=delta;
      applyDropConnectIfNecessary(deltas[i]);
      DoubleMatrix weightsPlusBias=weights.get(i).addRowVector(biases.get(i).transpose()).transpose();
      DoubleMatrix activation=activations.get(i);
      if (i > 0)       ix=ix.mmul(weightsPlusBias).mul(activationFunctions.get(i - 1).applyDerivative(activation)).div(input.rows);
    }
  }
  for (int i=0; i < deltas.length; i++) {
    if (constrainGradientToUnitNorm)     deltaRet.add(deltas[i].divi(deltas[i].norm2()));
 else     deltaRet.add(deltas[i]);
  }
}
