{
  if (mask == null)   initMask();
  List<DoubleMatrix> deltas=computeDeltasR(v);
  List<Pair<DoubleMatrix,DoubleMatrix>> list=new ArrayList<>();
  for (int l=0; l < getnLayers(); l++) {
    DoubleMatrix gradientChange=deltas.get(l);
    if (isNaN(gradientChange)) {
      log.info("Attempted v back prop was " + v.sum());
      throw new IllegalStateException("Gradient change was NaN");
    }
    if (gradientChange.length != getLayers()[l].getW().length)     throw new IllegalStateException("Gradient change not equal to weight change");
    DoubleMatrix deltaColumnSums=deltas.get(l).columnMeans();
    if (deltaColumnSums.length != layers[l].gethBias().length)     throw new IllegalStateException("Bias change not equal to weight change");
    list.add(new Pair<>(gradientChange,deltaColumnSums));
  }
  DoubleMatrix logLayerGradient=deltas.get(getnLayers());
  DoubleMatrix biasGradient=deltas.get(getnLayers()).columnMeans();
  list.add(new Pair<>(logLayerGradient,biasGradient));
  DoubleMatrix pack=pack(list).addi(mask.mul(l2).mul(v)).addi(v.mul(dampingFactor));
  return unPack(pack);
}
