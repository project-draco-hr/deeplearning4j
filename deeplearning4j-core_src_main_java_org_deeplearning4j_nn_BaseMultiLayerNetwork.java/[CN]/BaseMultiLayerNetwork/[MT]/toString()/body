{
  return "BaseMultiLayerNetwork{" + "nIns=" + nIns + ", hiddenLayerSizes="+ Arrays.toString(hiddenLayerSizes)+ ", nOuts="+ nOuts+ ", sigmoidLayers="+ Arrays.toString(sigmoidLayers)+ ", logLayer="+ logLayer+ ", rng="+ rng+ ", dist="+ dist+ ", momentum="+ momentum+ ", input="+ input+ ", labels="+ labels+ ", optimizer="+ optimizer+ ", activation="+ activation+ ", toDecode="+ toDecode+ ", l2="+ l2+ ", shouldInit="+ shouldInit+ ", fanIn="+ fanIn+ ", renderWeightsEveryNEpochs="+ renderWeightsEveryNEpochs+ ", useRegularization="+ useRegularization+ ", weightTransforms="+ weightTransforms+ ", hiddenBiasTransforms="+ hiddenBiasTransforms+ ", visibleBiasTransforms="+ visibleBiasTransforms+ ", shouldBackProp="+ shouldBackProp+ ", forceNumEpochs="+ forceNumEpochs+ ", sparsity="+ sparsity+ ", columnSums="+ columnSums+ ", columnMeans="+ columnMeans+ ", columnStds="+ columnStds+ ", initCalled="+ initCalled+ ", useHiddenActivationsForwardProp="+ useHiddenActivationsForwardProp+ ", useAdaGrad="+ useAdaGrad+ ", learningRateUpdate="+ learningRateUpdate+ ", layers="+ Arrays.toString(layers)+ ", errorTolerance="+ errorTolerance+ ", gradientListeners="+ gradientListeners+ ", multiLayerGradientListeners="+ multiLayerGradientListeners+ ", dropOut="+ dropOut+ ", normalizeByInputRows="+ normalizeByInputRows+ ", optimizationAlgorithm="+ optimizationAlgorithm+ ", lossFunction="+ lossFunction+ '}';
}
