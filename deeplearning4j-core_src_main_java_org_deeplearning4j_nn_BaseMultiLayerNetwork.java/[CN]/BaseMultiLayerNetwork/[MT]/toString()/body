{
  final StringBuilder sb=new StringBuilder("BaseMultiLayerNetwork{");
  sb.append("nIns=").append(nIns);
  sb.append(", hiddenLayerSizes=").append(Arrays.toString(hiddenLayerSizes));
  sb.append(", nOuts=").append(nOuts);
  sb.append(", sigmoidLayers=").append(Arrays.toString(sigmoidLayers));
  sb.append(", outputLayer=").append(outputLayer);
  sb.append(", rng=").append(rng);
  sb.append(", dist=").append(dist);
  sb.append(", momentum=").append(momentum);
  sb.append(", input=").append(input);
  sb.append(", labels=").append(labels);
  sb.append(", optimizer=").append(optimizer);
  sb.append(", activation=").append(activation);
  sb.append(", l2=").append(l2);
  sb.append(", shouldInit=").append(shouldInit);
  sb.append(", fanIn=").append(fanIn);
  sb.append(", renderWeightsEveryNEpochs=").append(renderWeightsEveryNEpochs);
  sb.append(", useRegularization=").append(useRegularization);
  sb.append(", weightTransforms=").append(weightTransforms);
  sb.append(", hiddenBiasTransforms=").append(hiddenBiasTransforms);
  sb.append(", visibleBiasTransforms=").append(visibleBiasTransforms);
  sb.append(", shouldBackProp=").append(shouldBackProp);
  sb.append(", forceNumEpochs=").append(forceNumEpochs);
  sb.append(", sparsity=").append(sparsity);
  sb.append(", columnSums=").append(columnSums);
  sb.append(", columnMeans=").append(columnMeans);
  sb.append(", columnStds=").append(columnStds);
  sb.append(", initCalled=").append(initCalled);
  sb.append(", sampleFromHiddenActivations=").append(sampleFromHiddenActivations);
  sb.append(", useAdaGrad=").append(useAdaGrad);
  sb.append(", activationFunctionForLayer=").append(activationFunctionForLayer);
  sb.append(", learningRateUpdate=").append(learningRateUpdate);
  sb.append(", layers=").append(Arrays.toString(layers));
  sb.append(", errorTolerance=").append(errorTolerance);
  sb.append(", dropOut=").append(dropOut);
  sb.append(", normalizeByInputRows=").append(normalizeByInputRows);
  sb.append(", optimizationAlgorithm=").append(optimizationAlgorithm);
  sb.append(", lossFunction=").append(lossFunction);
  sb.append(", outputLossFunction=").append(outputLossFunction);
  sb.append(", outputActivationFunction=").append(outputActivationFunction);
  sb.append(", layerLearningRates=").append(layerLearningRates);
  sb.append(", renderByLayer=").append(renderByLayer);
  sb.append(", sampleOrActivate=").append(sampleOrActivate);
  sb.append(", lossFunctionByLayer=").append(lossFunctionByLayer);
  sb.append('}');
  return sb.toString();
}
