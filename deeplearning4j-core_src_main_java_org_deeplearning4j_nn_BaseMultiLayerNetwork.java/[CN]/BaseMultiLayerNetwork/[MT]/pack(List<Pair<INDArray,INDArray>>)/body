{
  if (layers.size() != this.layers.length + 1)   throw new IllegalArgumentException("Illegal number of layers passed in. Was " + layers.size() + " when should have been "+ (this.layers.length + 1));
  float[][] allMatrices=new float[(this.layers.length + 1) * 2][];
  int count=0;
  for (int i=0; i < this.layers.length; i++) {
    allMatrices[count++]=layers.get(i).getFirst().data();
    if (allMatrices[count - 1].length != getLayers()[i].getW().length())     throw new IllegalArgumentException("Unable to convert the given matrix to the given length. not of same length as W. Length is " + allMatrices[count].length + " when should be "+ getLayers()[i].getW().length());
    allMatrices[count++]=layers.get(i).getSecond().data();
    if (allMatrices[count - 1].length != getLayers()[i].gethBias().length())     throw new IllegalArgumentException("Unable to convert the given matrix to the given length. not of same length as W. Length is " + allMatrices[count].length + " when should be "+ getLayers()[i].gethBias().length());
  }
  allMatrices[count++]=layers.get(layers.size() - 1).getFirst().data();
  allMatrices[count++]=layers.get(layers.size() - 1).getSecond().data();
  INDArray ret=NDArrays.create(ArrayUtil.combine(allMatrices));
  int params=numParams();
  if (ret.length() != params)   throw new IllegalStateException("Returning an invalid matrix of length " + ret.length() + " when should have been "+ params);
  return ret.reshape(1,ret.length());
}
