{
  List<Pair<DoubleMatrix,DoubleMatrix>> deltas=new ArrayList<>();
  computeDeltas(deltas);
  for (int l=0; l < nLayers; l++) {
    DoubleMatrix add=deltas.get(l).getFirst();
    if (isUseAdaGrad())     add.muli(getLayers()[l].getAdaGrad().getLearningRates(add));
 else     add.muli(lr);
    if (normalizeByInputRows)     add.divi(input.rows);
    if (useRegularization)     add.muli(getLayers()[l].getW().mul(l2));
    getLayers()[l].getW().addi(add);
    getSigmoidLayers()[l].setW(layers[l].getW());
    DoubleMatrix deltaColumnSums=deltas.get(l + 1).getSecond().columnSums();
    if (normalizeByInputRows)     deltaColumnSums.divi(input.rows);
    if (sparsity != 0)     deltaColumnSums=MatrixUtil.scalarMinus(sparsity,deltaColumnSums);
    getLayers()[l].gethBias().addi(deltaColumnSums.mul(lr));
    getSigmoidLayers()[l].setB(getLayers()[l].gethBias());
  }
  getLogLayer().getW().addi(deltas.get(nLayers).getFirst());
}
