{
  if (layerWiseConfigurations == null) {
    intializeConfigurations();
  }
  INDArray layerInput=input;
  int inputSize;
  if (getnLayers() < 1)   throw new IllegalStateException("Unable to createComplex network neuralNets; number specified is less than 1");
  if (this.neuralNets == null || neuralNets == null || this.neuralNets[0] == null || this.neuralNets[0] == null) {
    this.neuralNets=new NeuralNetwork[getnLayers()];
    for (int i=0; i < this.getnLayers(); i++) {
      if (i == 0)       inputSize=defaultConfiguration.getnIn();
 else       inputSize=this.hiddenLayerSizes[i - 1];
      if (i == 0) {
        layerWiseConfigurations.get(i).setnIn(inputSize);
        layerWiseConfigurations.get(i).setnOut(this.hiddenLayerSizes[i]);
        layers[i]=createHiddenLayer(i,layerInput);
      }
 else {
        if (input != null) {
          if (this.sampleFromHiddenActivations)           layerInput=neuralNets[i - 1].sampleHiddenGivenVisible(layerInput).getSecond();
 else           layerInput=getNeuralNets()[i - 1].sampleHiddenGivenVisible(layerInput).getSecond();
        }
        layerWiseConfigurations.get(i).setnIn(inputSize);
        layerWiseConfigurations.get(i).setnOut(this.hiddenLayerSizes[i]);
        layers[i]=createHiddenLayer(i,layerInput);
      }
      this.neuralNets[i]=createLayer(layerInput,inputSize,this.hiddenLayerSizes[i],this.neuralNets[i].getW(),this.neuralNets[i].gethBias(),null,i);
    }
  }
  dimensionCheck();
  applyTransforms();
  initCalled=true;
  initMask();
}
