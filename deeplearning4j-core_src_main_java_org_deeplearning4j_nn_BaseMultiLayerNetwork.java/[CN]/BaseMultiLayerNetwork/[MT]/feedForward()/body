{
  INDArray currInput=this.input;
  if (this.input.columns() != defaultConfiguration.getnIn())   throw new IllegalStateException("Illegal input length");
  List<INDArray> activations=new ArrayList<>();
  activations.add(currInput);
  for (int i=0; i < getnLayers(); i++) {
    NeuralNetwork layer=getNeuralNets()[i];
    Layer l=getLayers()[i];
    layer.setInput(currInput);
    l.setInput(currInput);
    if (l.conf().isUseHiddenActivationsForwardProp())     currInput=getLayers()[i].activate(layer.transform(currInput));
 else     if (sampleFromHiddenActivations)     currInput=layer.sampleHiddenGivenVisible(l.conf().getActivationFunction().apply(currInput)).getSecond();
 else     currInput=layer.sampleHiddenGivenVisible(currInput).getSecond();
    applyDropConnectIfNecessary(currInput);
    activations.add(currInput);
  }
  if (getOutputLayer() != null) {
    getOutputLayer().setInput(activations.get(activations.size() - 1));
    activations.add(getOutputLayer().output(activations.get(activations.size() - 1)));
  }
  return activations;
}
