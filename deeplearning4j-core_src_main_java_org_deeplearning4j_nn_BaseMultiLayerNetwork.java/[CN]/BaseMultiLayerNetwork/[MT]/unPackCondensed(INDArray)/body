{
  int numParams=numParams();
  if (param.length() != numParams)   throw new IllegalArgumentException("Parameter vector not equal of length to " + numParams);
  List<INDArray> ret=new ArrayList<>();
  int curr=0;
  for (int i=0; i < neuralNets.length; i++) {
    int layerLength=neuralNets[i].getW().length() + neuralNets[i].gethBias().length();
    INDArray subMatrix=param.get(NDArrayIndex.interval(0,param.rows()),NDArrayIndex.interval(curr,curr + layerLength));
    INDArray weightPortion=subMatrix.get(NDArrayIndex.interval(0,subMatrix.rows()),NDArrayIndex.interval(0,neuralNets[i].getW().length()));
    int beginHBias=neuralNets[i].getW().length();
    int endHbias=subMatrix.length();
    INDArray hBiasPortion=subMatrix.get(NDArrayIndex.interval(0,subMatrix.rows()),NDArrayIndex.interval(beginHBias,endHbias));
    int layerLengthSum=weightPortion.length() + hBiasPortion.length();
    if (layerLengthSum != layerLength) {
      if (hBiasPortion.length() != neuralNets[i].gethBias().length())       throw new IllegalStateException("Hidden bias on layer " + i + " was off");
      if (weightPortion.length() != neuralNets[i].getW().length())       throw new IllegalStateException("Weight portion on layer " + i + " was off");
    }
    INDArray d=NDArrays.create(1,weightPortion.length() + hBiasPortion.length());
    d.put(new NDArrayIndex[]{NDArrayIndex.interval(0,d.rows()),NDArrayIndex.interval(0,weightPortion.length())},weightPortion);
    d.put(new NDArrayIndex[]{NDArrayIndex.interval(0,d.rows()),NDArrayIndex.interval(weightPortion.length(),d.length())},hBiasPortion);
    ret.add(d);
    curr+=layerLength;
  }
  return ret;
}
