{
  List<DoubleMatrix> R=new ArrayList<>();
  List<DoubleMatrix> acts=feedForward();
  R.add(DoubleMatrix.zeros(input.rows,input.columns));
  List<Pair<DoubleMatrix,DoubleMatrix>> vWvB=new ArrayList<>();
  for (int i=0; i < layers.length; i++) {
    vWvB.add(new Pair<>(layers[i].getW(),layers[i].gethBias()));
  }
  vWvB.add(new Pair<>(outputLayer.getW(),outputLayer.getB()));
  for (int i=0; i < layers.length; i++) {
    ActivationFunction derivative=getSigmoidLayers()[i].getActivationFunction();
    if (getLayers()[i] instanceof AutoEncoder) {
      AutoEncoder a=(AutoEncoder)getLayers()[i];
      derivative=a.getAct();
    }
    DoubleMatrix currR=R.get(i).mmul(layers[i].getW());
    DoubleMatrix nextAct=acts.get(i + 1);
    DoubleMatrix currAct=acts.get(i);
    DoubleMatrix secondFigure=currAct.mmul(vWvB.get(i).getFirst().addRowVector(vWvB.get(i).getSecond()));
    DoubleMatrix activation=currR.add(secondFigure);
    activation.muli((derivative.applyDerivative(nextAct)));
    R.add(activation);
  }
  DoubleMatrix currR=R.get(R.size() - 1).mmul(outputLayer.getW());
  DoubleMatrix nextAct=acts.get(acts.size() - 1);
  DoubleMatrix currAct=acts.get(acts.size() - 2);
  DoubleMatrix secondFigure=currAct.mmul(vWvB.get(vWvB.size() - 1).getFirst().addRowVector(vWvB.get(vWvB.size() - 1).getSecond()));
  DoubleMatrix activation=currR.add(secondFigure);
  activation.muli((outputLayer.getActivationFunction().applyDerivative(nextAct)));
  R.add(activation);
  return R;
}
