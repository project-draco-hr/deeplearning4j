{
  float[][] list=new float[neuralNets.length * 2 + 2][];
  int deltaCount=0;
  for (int i=0; i < list.length - 1; i+=2) {
    if (deltaCount >= neuralNets.length) {
      list[i]=getOutputLayer().getW().dup().reshape(1,getOutputLayer().getW().length()).data();
      list[i + 1]=getOutputLayer().getB().dup().reshape(1,getOutputLayer().getB().length()).data();
      deltaCount++;
    }
 else {
      list[i]=neuralNets[deltaCount].getW().dup().reshape(1,neuralNets[deltaCount].getW().length()).data();
      list[i + 1]=neuralNets[deltaCount].gethBias().dup().reshape(1,neuralNets[deltaCount].gethBias().length()).data();
      deltaCount++;
    }
  }
  INDArray ret=NDArrays.create(ArrayUtil.combine(list));
  return ret.reshape(1,ret.length());
}
