{
  List<INDArray> deltas=new ArrayList<>();
  computeDeltas(deltas);
  List<Pair<INDArray,INDArray>> vWvB=new ArrayList<>();
  for (int i=0; i < neuralNets.length; i++) {
    vWvB.add(new Pair<>(neuralNets[i].getW(),neuralNets[i].gethBias()));
  }
  vWvB.add(new Pair<>(getOutputLayer().getW(),getOutputLayer().getB()));
  List<Pair<INDArray,INDArray>> list=new ArrayList<>();
  for (int l=0; l < getnLayers(); l++) {
    INDArray gradientChange=deltas.get(l);
    if (gradientChange.length() != getNeuralNets()[l].getW().length())     throw new IllegalStateException("Gradient change not equal to weight change");
    INDArray deltaColumnSums=deltas.get(l).mean(1);
    list.add(new Pair<>(gradientChange,deltaColumnSums));
  }
  INDArray logLayerGradient=deltas.get(getnLayers());
  INDArray biasGradient=deltas.get(getnLayers()).mean(1);
  if (mask == null)   initMask();
  list.add(new Pair<>(logLayerGradient,biasGradient));
  INDArray gradient=pack(list);
  gradient.addi(mask.mul(params()).mul(defaultConfiguration.getL2()));
  list=unPack(gradient);
  return list;
}
