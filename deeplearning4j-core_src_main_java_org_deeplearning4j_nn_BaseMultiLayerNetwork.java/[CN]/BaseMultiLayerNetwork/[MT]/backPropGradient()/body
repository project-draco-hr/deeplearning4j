{
  List<DoubleMatrix> deltas=new ArrayList<>();
  computeDeltas(deltas);
  List<Pair<DoubleMatrix,DoubleMatrix>> vWvB=new ArrayList<>();
  for (int i=0; i < layers.length; i++) {
    vWvB.add(new Pair<>(layers[i].getW(),layers[i].gethBias()));
  }
  vWvB.add(new Pair<>(outputLayer.getW(),outputLayer.getB()));
  List<Pair<DoubleMatrix,DoubleMatrix>> list=new ArrayList<>();
  for (int l=0; l < getnLayers(); l++) {
    DoubleMatrix gradientChange=deltas.get(l);
    if (gradientChange.length != getLayers()[l].getW().length)     throw new IllegalStateException("Gradient change not equal to weight change");
    DoubleMatrix deltaColumnSums=deltas.get(l).columnMeans();
    list.add(new Pair<>(gradientChange,deltaColumnSums));
  }
  DoubleMatrix logLayerGradient=deltas.get(getnLayers());
  DoubleMatrix biasGradient=deltas.get(getnLayers()).columnSums();
  if (getOutputLayer().getB().length != biasGradient.length) {
    DoubleMatrix add=DoubleMatrix.ones(getOutputLayer().getB().rows,getOutputLayer().getB().columns);
    add.addi(biasGradient.sum());
    biasGradient=add;
  }
  list.add(new Pair<>(logLayerGradient,biasGradient));
  return list;
}
