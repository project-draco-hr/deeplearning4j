{
  INDArray currInput=NDArrays.concatHorizontally(this.input,NDArrays.ones(input.rows(),1));
  if (this.input.columns() != nIns)   throw new IllegalStateException("Illegal input length");
  List<INDArray> activations=new ArrayList<>();
  activations.add(currInput);
  for (int i=0; i < getnLayers(); i++) {
    NeuralNetwork layer=getLayers()[i];
    Layer l=getSigmoidHiddeenLayers()[i];
    layer.setInput(currInput);
    l.setInput(currInput);
    if (getSampleOrActivate() != null && getSampleOrActivate().get(i) != null && getSampleOrActivate().get(i))     currInput=getSigmoidHiddeenLayers()[i].activate(layer.sampleHiddenGivenVisible(currInput).getSecond());
 else     if (sampleFromHiddenActivations)     currInput=layer.sampleHiddenGivenVisible(l.getActivationFunction().apply(currInput)).getSecond();
 else     currInput=layer.sampleHiddenGivenVisible(currInput).getSecond();
    applyDropConnectIfNecessary(currInput);
    activations.add(currInput);
  }
  if (getOutputLayer() != null) {
    getOutputLayer().setInput(activations.get(activations.size() - 1));
    if (getOutputLayer().getActivationFunction() == null)     if (outputActivationFunction != null)     outputLayer.setActivationFunction(outputActivationFunction);
 else     outputLayer.setActivationFunction(Activations.sigmoid());
    activations.add(getOutputLayer().output(activations.get(activations.size() - 1)));
  }
  return activations;
}
