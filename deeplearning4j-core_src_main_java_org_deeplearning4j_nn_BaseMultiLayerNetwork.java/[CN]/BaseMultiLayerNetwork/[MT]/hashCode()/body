{
  int result;
  long temp;
  result=nIns;
  result=31 * result + (hiddenLayerSizes != null ? Arrays.hashCode(hiddenLayerSizes) : 0);
  result=31 * result + nOuts;
  result=31 * result + (sigmoidLayers != null ? Arrays.hashCode(sigmoidLayers) : 0);
  result=31 * result + (outputLayer != null ? outputLayer.hashCode() : 0);
  temp=Double.doubleToLongBits(momentum);
  result=31 * result + (int)(temp ^ (temp >>> 32));
  result=31 * result + (input != null ? input.hashCode() : 0);
  result=31 * result + (labels != null ? labels.hashCode() : 0);
  result=31 * result + (optimizer != null ? optimizer.hashCode() : 0);
  result=31 * result + (activation != null ? activation.hashCode() : 0);
  temp=Double.doubleToLongBits(l2);
  result=31 * result + (int)(temp ^ (temp >>> 32));
  result=31 * result + (shouldInit ? 1 : 0);
  temp=Double.doubleToLongBits(fanIn);
  result=31 * result + (int)(temp ^ (temp >>> 32));
  result=31 * result + renderWeightsEveryNEpochs;
  result=31 * result + (useRegularization ? 1 : 0);
  result=31 * result + (weightTransforms != null ? weightTransforms.hashCode() : 0);
  result=31 * result + (hiddenBiasTransforms != null ? hiddenBiasTransforms.hashCode() : 0);
  result=31 * result + (visibleBiasTransforms != null ? visibleBiasTransforms.hashCode() : 0);
  result=31 * result + (shouldBackProp ? 1 : 0);
  result=31 * result + (forceNumEpochs ? 1 : 0);
  temp=Double.doubleToLongBits(sparsity);
  result=31 * result + (int)(temp ^ (temp >>> 32));
  result=31 * result + (columnSums != null ? columnSums.hashCode() : 0);
  result=31 * result + (columnMeans != null ? columnMeans.hashCode() : 0);
  result=31 * result + (columnStds != null ? columnStds.hashCode() : 0);
  result=31 * result + (initCalled ? 1 : 0);
  result=31 * result + (useHiddenActivationsForwardProp ? 1 : 0);
  result=31 * result + (useAdaGrad ? 1 : 0);
  result=31 * result + (activationFunctionForLayer != null ? activationFunctionForLayer.hashCode() : 0);
  temp=Double.doubleToLongBits(learningRateUpdate);
  result=31 * result + (int)(temp ^ (temp >>> 32));
  result=31 * result + (layers != null ? Arrays.hashCode(layers) : 0);
  temp=Double.doubleToLongBits(errorTolerance);
  result=31 * result + (int)(temp ^ (temp >>> 32));
  temp=Double.doubleToLongBits(dropOut);
  result=31 * result + (int)(temp ^ (temp >>> 32));
  result=31 * result + (normalizeByInputRows ? 1 : 0);
  result=31 * result + (optimizationAlgorithm != null ? optimizationAlgorithm.hashCode() : 0);
  result=31 * result + (lossFunction != null ? lossFunction.hashCode() : 0);
  result=31 * result + (outputLossFunction != null ? outputLossFunction.hashCode() : 0);
  result=31 * result + (outputActivationFunction != null ? outputActivationFunction.hashCode() : 0);
  return result;
}
