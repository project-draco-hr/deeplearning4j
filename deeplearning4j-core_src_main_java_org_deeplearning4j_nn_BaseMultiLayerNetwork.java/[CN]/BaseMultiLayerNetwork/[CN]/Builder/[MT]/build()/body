{
  try {
    E ret;
    Constructor<?> c=Dl4jReflection.getEmptyConstructor(clazz);
    c.setAccessible(true);
    ret=(E)c.newInstance();
    ret.setDefaultConfiguration(conf);
    ret.useGaussNewtonVectorProductBackProp=useGaussNewtonVectorProductBackProp;
    ret.setUseDropConnect(useDropConnect);
    ret.setInput(this.input);
    ret.setLabels(this.labels);
    ret.setHiddenLayerSizes(this.hiddenLayerSizes);
    ret.setnLayers(this.nLayers);
    ret.setShouldBackProp(this.backProp);
    ret.setLayerWiseConfigurations(layerWiseConfiguration);
    ret.neuralNets=new NeuralNetwork[nLayers];
    ret.setInput(this.input);
    ret.setLineSearchBackProp(lineSearchBackProp);
    ret.setLabels(labels);
    ret.setForceNumEpochs(shouldForceEpochs);
    ret.getWeightTransforms().putAll(weightTransforms);
    ret.getVisibleBiasTransforms().putAll(visibleBiasTransforms);
    ret.getHiddenBiasTransforms().putAll(hiddenBiasTransforms);
    if (hiddenLayerSizes == null)     throw new IllegalStateException("Unable to build network, no hidden layer sizes defined");
    return ret;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
