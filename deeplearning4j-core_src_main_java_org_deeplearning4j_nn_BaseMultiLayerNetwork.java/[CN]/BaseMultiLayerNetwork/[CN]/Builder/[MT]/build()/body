{
  try {
    E ret;
    Constructor<?> c=Dl4jReflection.getEmptyConstructor(clazz);
    c.setAccessible(true);
    ret=(E)c.newInstance();
    ret.constrainGradientToUnitNorm=constrainGradientToUnitNorm;
    ret.concatBiases=concatBiases;
    ret.useGaussNewtonVectorProductBackProp=useGaussNewtonVectorProductBackProp;
    ret.setUseDropConnect(useDropConnect);
    ret.setOutputLayerDropout(outputLayerDropout);
    ret.setResetAdaGradIterations(resetAdaGradIterations);
    ret.setResetAdaGradIterationsByLayer(resetAdaGradIterationsByLayer);
    ret.setMomentumAfter(momentumAfter);
    ret.setMomentumAfterByLayer(momentumAfterByLayer);
    ret.setLossFunctionByLayer(lossFunctionByLayer);
    ret.setSampleOrActivate(sampleOrActivateByLayer);
    ret.setRenderByLayer(renderByLayer);
    ret.setNormalizeByInputRows(normalizeByInputRows);
    ret.setInput(this.input);
    ret.setnOuts(this.nOuts);
    ret.setnIns(this.nIns);
    ret.setLabels(this.labels);
    ret.setHiddenLayerSizes(this.hiddenLayerSizes);
    ret.setnLayers(this.nLayers);
    ret.setRng(this.rng);
    ret.setShouldBackProp(this.backProp);
    ret.setSigmoidLayers(new HiddenLayer[ret.getnLayers()]);
    ret.setSampleFromHiddenActivations(useHiddenActivationsForwardProp);
    ret.setInput(this.input);
    ret.setLineSearchBackProp(lineSearchBackProp);
    ret.setMomentum(momentum);
    ret.setLabels(labels);
    ret.activationFunctionForLayer.putAll(activationForLayer);
    ret.setSparsity(sparsity);
    ret.setRenderWeightsEveryNEpochs(renderWeithsEveryNEpochs);
    ret.setL2(l2);
    ret.setForceNumEpochs(shouldForceEpochs);
    ret.setUseRegularization(useRegularization);
    ret.setUseAdaGrad(useAdaGrad);
    ret.setDropOut(dropOut);
    ret.setOptimizationAlgorithm(optimizationAlgo);
    ret.setLossFunction(lossFunction);
    ret.setOutputActivationFunction(outputActivationFunction);
    ret.setOutputLossFunction(outputLossFunction);
    if (activation != null)     ret.setActivation(activation);
    if (dist != null)     ret.setDist(dist);
    ret.getWeightTransforms().putAll(weightTransforms);
    ret.getVisibleBiasTransforms().putAll(visibleBiasTransforms);
    ret.getHiddenBiasTransforms().putAll(hiddenBiasTransforms);
    ret.getLayerLearningRates().putAll(layerLearningRates);
    if (hiddenLayerSizes == null)     throw new IllegalStateException("Unable to build network, no hidden layer sizes defined");
    return ret;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
