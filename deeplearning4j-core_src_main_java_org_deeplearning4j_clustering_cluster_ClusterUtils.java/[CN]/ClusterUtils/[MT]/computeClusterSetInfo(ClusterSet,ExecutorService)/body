{
  final ClusterSetInfo info=new ClusterSetInfo(true);
  int clusterCount=clusterSet.getClusterCount();
  List<Runnable> tasks=new ArrayList<>();
  for (int i=0; i < clusterCount; i++) {
    final Cluster cluster=clusterSet.getClusters().get(i);
    tasks.add(new Runnable(){
      public void run(){
        info.getClustersInfos().put(cluster.getId(),computeClusterInfos(cluster,clusterSet.getAccumulation()));
      }
    }
);
  }
  MultiThreadUtils.parallelTasks(tasks,executorService);
  tasks=new ArrayList<>();
  for (int i=0; i < clusterCount; i++) {
    final int clusterIdx=i;
    final Cluster fromCluster=clusterSet.getClusters().get(i);
    tasks.add(new Runnable(){
      public void run(){
        try {
          for (int k=clusterIdx + 1, l=clusterSet.getClusterCount(); k < l; k++) {
            Cluster toCluster=clusterSet.getClusters().get(k);
            double distance=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createAccum(clusterSet.getAccumulation(),fromCluster.getCenter(),toCluster.getCenter())).currentResult().doubleValue();
            info.getDistancesBetweenClustersCenters().put(fromCluster.getId(),toCluster.getId(),distance);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
  }
  MultiThreadUtils.parallelTasks(tasks,executorService);
  return info;
}
