{
  if (groupId == null)   groupId="dl4j-serving";
  if (zooKeeperHost == null)   zooKeeperHost="localhost";
  String kafkaUri=String.format("kafka:%s?topic=%s&groupId=%s&zookeeperHost=%s&zookeeperPort=%d&serializerClass=%s&keySerializerClass=%s",kafkaBroker,consumingTopic,groupId,zooKeeperHost,zooKeeperPort,StringEncoder.class.getName(),StringEncoder.class.getName());
  if (beforeProcessor == null) {
    beforeProcessor=new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
      }
    }
;
  }
  from(kafkaUri).process(beforeProcessor).process(new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      INDArray predict;
      if (exchange.getIn().getBody() instanceof byte[]) {
        byte[] o=(byte[])exchange.getIn().getBody();
        byte[] arr=Base64.decodeBase64(new String(o));
        ByteArrayInputStream bis=new ByteArrayInputStream(arr);
        DataInputStream dis=new DataInputStream(bis);
        predict=Nd4j.read(dis);
      }
 else       predict=(INDArray)exchange.getIn().getBody();
      if (computationGraph) {
        ComputationGraph graph=ModelSerializer.restoreComputationGraph(modelUri);
        INDArray[] output=graph.output(predict);
        exchange.getOut().setBody(output);
        exchange.getIn().setBody(output);
      }
 else {
        MultiLayerNetwork network=ModelSerializer.restoreMultiLayerNetwork(modelUri);
        INDArray output=network.output(predict);
        exchange.getOut().setBody(output);
        exchange.getIn().setBody(output);
      }
    }
  }
).process(finalProcessor).to(outputUri);
}
