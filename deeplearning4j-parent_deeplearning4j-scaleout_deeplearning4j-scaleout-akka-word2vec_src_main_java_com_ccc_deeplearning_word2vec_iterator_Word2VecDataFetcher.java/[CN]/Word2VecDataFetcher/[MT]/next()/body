{
  if (cache.size() >= batch || !files.hasNext())   return fromCache();
  File f=files.next();
  try {
    LineIterator lines=FileUtils.lineIterator(f);
    DoubleMatrix outcomes=null;
    DoubleMatrix input=null;
    while (lines.hasNext()) {
      List<Window> windows=Windows.windows(lines.nextLine());
      if (windows.isEmpty() && lines.hasNext())       continue;
      if (windows.size() < batch) {
        input=new DoubleMatrix(windows.size(),vec.getSyn1().columns * vec.getWindow());
        outcomes=new DoubleMatrix(batch,labels.size());
        for (int i=0; i < windows.size(); i++) {
          input.putRow(i,new DoubleMatrix(WindowConverter.asExample(windows.get(i),vec)));
          int idx=labels.indexOf(windows.get(i).getLabel());
          if (idx < 0)           idx=0;
          DoubleMatrix outcomeRow=MatrixUtil.toOutcomeVector(idx,labels.size());
          outcomes.putRow(i,outcomeRow);
        }
        return new DataSet(input,outcomes);
      }
 else {
        input=new DoubleMatrix(batch,vec.getSyn1().columns * vec.getWindow());
        outcomes=new DoubleMatrix(batch,labels.size());
        for (int i=0; i < batch; i++) {
          input.putRow(i,new DoubleMatrix(WindowConverter.asExample(windows.get(i),vec)));
          int idx=labels.indexOf(windows.get(i).getLabel());
          if (idx < 0)           idx=0;
          DoubleMatrix outcomeRow=MatrixUtil.toOutcomeVector(idx,labels.size());
          outcomes.putRow(i,outcomeRow);
        }
        if (windows.size() > batch) {
          List<Window> leftOvers=windows.subList(batch,windows.size());
          cache.addAll(leftOvers);
        }
        return new DataSet(input,outcomes);
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return null;
}
