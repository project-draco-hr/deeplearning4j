{
  LFWDataSetIterator iter=new LFWDataSetIterator(10,10,new int[]{28,28,1},true,1.0);
  DataSet d=iter.next();
  d.normalizeZeroMeanZeroUnitVariance();
  int nOut=600;
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().layer(new org.deeplearning4j.nn.conf.layers.RBM.Builder(org.deeplearning4j.nn.conf.layers.RBM.HiddenUnit.RECTIFIED,org.deeplearning4j.nn.conf.layers.RBM.VisibleUnit.GAUSSIAN).nIn(d.numInputs()).nOut(nOut).weightInit(WeightInit.VI).lossFunction(LossFunctions.LossFunction.RMSE_XENT).build()).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).learningRate(1e-3f).build();
  int numParams=conf.getLayer().initializer().numParams(conf,true);
  INDArray params=Nd4j.create(1,numParams);
  RBM rbm=(RBM)conf.getLayer().instantiate(conf,Arrays.<IterationListener>asList(new ScoreIterationListener(1)),0,params,true);
  rbm.fit(d.getFeatureMatrix());
}
