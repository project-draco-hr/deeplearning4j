{
  MnistDataFetcher fetcher=new MnistDataFetcher(true);
  RandomGenerator gen=new MersenneTwister(123);
  Nd4j.ENFORCE_NUMERICAL_STABILITY=true;
  LayerFactory layerFactory=LayerFactories.getFactory(RBM.class);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().iterations(30).constrainGradientToUnitNorm(true).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createNormal(1,1e-5)).optimizationAlgo(OptimizationAlgorithm.ITERATION_GRADIENT_DESCENT).iterationListener(new ComposableIterationListener(new NeuralNetPlotterIterationListener(10),new ScoreIterationListener(5))).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).learningRate(1e-1f).nIn(784).nOut(600).layerFactory(layerFactory).build();
  fetcher.fetch(10);
  DataSet d2=fetcher.next();
  System.out.println(conf.getDist().sample(new int[]{conf.getnIn(),conf.getnOut()}));
  INDArray input=d2.getFeatureMatrix();
  RBM rbm=layerFactory.create(conf);
  rbm.fit(input);
}
