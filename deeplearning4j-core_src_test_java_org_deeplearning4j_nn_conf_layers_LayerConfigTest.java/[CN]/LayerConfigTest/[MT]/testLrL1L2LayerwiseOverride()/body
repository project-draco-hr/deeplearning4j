{
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().learningRate(0.3).list().layer(0,new DenseLayer.Builder().nIn(2).nOut(2).build()).layer(1,new DenseLayer.Builder().nIn(2).nOut(2).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  assertEquals(0.3,conf.getConf(0).getLayer().getLearningRate(),0.0);
  assertEquals(0.3,conf.getConf(1).getLayer().getLearningRate(),0.0);
  conf=new NeuralNetConfiguration.Builder().learningRate(0.3).list().layer(0,new DenseLayer.Builder().nIn(2).nOut(2).build()).layer(1,new DenseLayer.Builder().nIn(2).nOut(2).learningRate(0.2).build()).build();
  net=new MultiLayerNetwork(conf);
  net.init();
  assertEquals(0.3,conf.getConf(0).getLayer().getLearningRate(),0.0);
  assertEquals(0.2,conf.getConf(1).getLayer().getLearningRate(),0.0);
  conf=new NeuralNetConfiguration.Builder().regularization(true).l1(0.1).l2(0.2).list().layer(0,new DenseLayer.Builder().nIn(2).nOut(2).build()).layer(1,new DenseLayer.Builder().nIn(2).nOut(2).build()).build();
  net=new MultiLayerNetwork(conf);
  net.init();
  assertEquals(0.1,conf.getConf(0).getLayer().getL1(),0.0);
  assertEquals(0.1,conf.getConf(1).getLayer().getL1(),0.0);
  assertEquals(0.2,conf.getConf(0).getLayer().getL2(),0.0);
  assertEquals(0.2,conf.getConf(1).getLayer().getL2(),0.0);
  conf=new NeuralNetConfiguration.Builder().regularization(true).l1(0.1).l2(0.2).list().layer(0,new DenseLayer.Builder().nIn(2).nOut(2).l1(0.9).build()).layer(1,new DenseLayer.Builder().nIn(2).nOut(2).l2(0.8).build()).build();
  net=new MultiLayerNetwork(conf);
  net.init();
  assertEquals(0.9,conf.getConf(0).getLayer().getL1(),0.0);
  assertEquals(0.1,conf.getConf(1).getLayer().getL1(),0.0);
  assertEquals(0.2,conf.getConf(0).getLayer().getL2(),0.0);
  assertEquals(0.8,conf.getConf(1).getLayer().getL2(),0.0);
}
