{
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().learningRate(0.3).list(2).layer(0,new DenseLayer.Builder().nIn(2).nOut(2).build()).layer(1,new DenseLayer.Builder().nIn(2).nOut(2).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  assertEquals(conf.getConf(0).getLr(),0.3,0.0);
  assertEquals(conf.getConf(1).getLr(),0.3,0.0);
  conf=new NeuralNetConfiguration.Builder().learningRate(0.3).list(2).layer(0,new DenseLayer.Builder().nIn(2).nOut(2).build()).layer(1,new DenseLayer.Builder().nIn(2).nOut(2).learningRate(0.2).build()).build();
  net=new MultiLayerNetwork(conf);
  net.init();
  assertEquals(conf.getConf(0).getLr(),0.3,0.0);
  assertEquals(conf.getConf(1).getLr(),0.2,0.0);
  conf=new NeuralNetConfiguration.Builder().l1(0.1).l2(0.2).list(2).layer(0,new DenseLayer.Builder().nIn(2).nOut(2).build()).layer(1,new DenseLayer.Builder().nIn(2).nOut(2).build()).build();
  net=new MultiLayerNetwork(conf);
  net.init();
  assertEquals(conf.getConf(0).getL1(),0.1,0.0);
  assertEquals(conf.getConf(1).getL1(),0.1,0.0);
  assertEquals(conf.getConf(0).getL2(),0.2,0.0);
  assertEquals(conf.getConf(1).getL2(),0.2,0.0);
  conf=new NeuralNetConfiguration.Builder().l1(0.1).l2(0.2).list(2).layer(0,new DenseLayer.Builder().nIn(2).nOut(2).l1(0.9).build()).layer(1,new DenseLayer.Builder().nIn(2).nOut(2).l2(0.8).build()).build();
  net=new MultiLayerNetwork(conf);
  net.init();
  assertEquals(conf.getConf(0).getL1(),0.9,0.0);
  assertEquals(conf.getConf(1).getL1(),0.1,0.0);
  assertEquals(conf.getConf(0).getL2(),0.2,0.0);
  assertEquals(conf.getConf(1).getL2(),0.8,0.0);
}
