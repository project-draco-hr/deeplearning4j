{
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue).gradientNormalizationThreshold(10).list(2).layer(0,new DenseLayer.Builder().nIn(2).nOut(2).build()).layer(1,new DenseLayer.Builder().nIn(2).nOut(2).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  assertEquals(GradientNormalization.ClipElementWiseAbsoluteValue,conf.getConf(0).getLayer().getGradientNormalization());
  assertEquals(GradientNormalization.ClipElementWiseAbsoluteValue,conf.getConf(1).getLayer().getGradientNormalization());
  assertEquals(10,conf.getConf(0).getLayer().getGradientNormalizationThreshold(),0.0);
  assertEquals(10,conf.getConf(1).getLayer().getGradientNormalizationThreshold(),0.0);
  conf=new NeuralNetConfiguration.Builder().gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue).gradientNormalizationThreshold(10).list(2).layer(0,new DenseLayer.Builder().nIn(2).nOut(2).build()).layer(1,new DenseLayer.Builder().nIn(2).nOut(2).gradientNormalization(GradientNormalization.None).gradientNormalizationThreshold(2.5).build()).build();
  net=new MultiLayerNetwork(conf);
  net.init();
  assertEquals(GradientNormalization.ClipElementWiseAbsoluteValue,conf.getConf(0).getLayer().getGradientNormalization());
  assertEquals(GradientNormalization.None,conf.getConf(1).getLayer().getGradientNormalization());
  assertEquals(10,conf.getConf(0).getLayer().getGradientNormalizationThreshold(),0.0);
  assertEquals(2.5,conf.getConf(1).getLayer().getGradientNormalizationThreshold(),0.0);
}
