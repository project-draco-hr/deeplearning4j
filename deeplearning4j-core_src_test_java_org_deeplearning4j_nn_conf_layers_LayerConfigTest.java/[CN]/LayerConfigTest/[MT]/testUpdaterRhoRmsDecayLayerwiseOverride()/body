{
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().updater(Updater.ADADELTA).rho(0.5).list().layer(0,new DenseLayer.Builder().nIn(2).nOut(2).build()).layer(1,new DenseLayer.Builder().nIn(2).nOut(2).rho(0.01).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  assertEquals("ADADELTA",conf.getConf(0).getLayer().getUpdater().toString());
  assertEquals("ADADELTA",conf.getConf(1).getLayer().getUpdater().toString());
  assertEquals(0.5,conf.getConf(0).getLayer().getRho(),0.0);
  assertEquals(0.01,conf.getConf(1).getLayer().getRho(),0.0);
  conf=new NeuralNetConfiguration.Builder().updater(Updater.RMSPROP).rmsDecay(2.0).list().layer(0,new DenseLayer.Builder().nIn(2).nOut(2).rmsDecay(1.0).build()).layer(1,new DenseLayer.Builder().nIn(2).nOut(2).updater(Updater.ADADELTA).rho(0.5).build()).build();
  net=new MultiLayerNetwork(conf);
  net.init();
  assertEquals("RMSPROP",conf.getConf(0).getLayer().getUpdater().toString());
  assertEquals("ADADELTA",conf.getConf(1).getLayer().getUpdater().toString());
  assertEquals(0.5,conf.getConf(1).getLayer().getRho(),0.0);
  assertEquals(1.0,conf.getConf(0).getLayer().getRmsDecay(),0.0);
  assertEquals(2.0,conf.getConf(1).getLayer().getRmsDecay(),0.0);
}
