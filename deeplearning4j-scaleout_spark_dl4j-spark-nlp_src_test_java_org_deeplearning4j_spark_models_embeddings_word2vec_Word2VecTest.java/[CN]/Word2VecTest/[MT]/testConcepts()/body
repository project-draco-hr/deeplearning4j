{
  SparkConf sparkConf=new SparkConf().setMaster("local[8]").setAppName("sparktest");
  JavaSparkContext sc=new JavaSparkContext(sparkConf);
  String dataPath=new ClassPathResource("/big/raw_sentences.txt").getFile().getAbsolutePath();
  JavaRDD<String> corpus=sc.textFile(dataPath);
  TokenizerFactory t=new DefaultTokenizerFactory();
  t.setTokenPreProcessor(new CommonPreprocessor());
  Word2Vec word2Vec=new Word2Vec.Builder().setNGrams(1).tokenizerFactory(t).seed(42L).negative(0).useAdaGrad(false).layerSize(150).windowSize(5).learningRate(0.025).minLearningRate(0.0001).iterations(1).batchSize(100).minWordFrequency(5).stopWords(Arrays.asList("three")).useUnknown(true).build();
  word2Vec.train(corpus);
  System.out.println("UNK: " + word2Vec.getWordVectorMatrix("UNK"));
  InMemoryLookupTable<VocabWord> table=(InMemoryLookupTable<VocabWord>)word2Vec.lookupTable();
  double sim=word2Vec.similarity("day","night");
  System.out.println("day/night similarity: " + sim);
  Collection<String> words=word2Vec.wordsNearest("day",10);
  printWords("day",words,word2Vec);
  assertTrue(words.contains("night"));
  assertTrue(words.contains("week"));
  assertTrue(words.contains("year"));
  sim=word2Vec.similarity("two","four");
  System.out.println("two/four similarity: " + sim);
  words=word2Vec.wordsNearest("two",10);
  printWords("two",words,word2Vec);
  assertFalse(words.contains("three"));
  assertTrue(words.contains("five"));
  assertTrue(words.contains("four"));
  sc.stop();
  File tempFile=File.createTempFile("temp","tmp");
  tempFile.deleteOnExit();
  int idx1=word2Vec.vocab().wordFor("day").getIndex();
  INDArray array1=word2Vec.getWordVectorMatrix("day").dup();
  VocabWord word1=word2Vec.vocab().elementAtIndex(0);
  WordVectorSerializer.writeWordVectors(word2Vec.getLookupTable(),tempFile);
  WordVectors vectors=WordVectorSerializer.loadTxtVectors(tempFile);
  VocabWord word2=((VocabCache<VocabWord>)vectors.vocab()).elementAtIndex(0);
  VocabWord wordIT=((VocabCache<VocabWord>)vectors.vocab()).wordFor("it");
  int idx2=vectors.vocab().wordFor("day").getIndex();
  INDArray array2=vectors.getWordVectorMatrix("day").dup();
  System.out.println("word 'i': " + word2);
  System.out.println("word 'it': " + wordIT);
  assertEquals(idx1,idx2);
  assertEquals(word1,word2);
  assertEquals(array1,array2);
}
