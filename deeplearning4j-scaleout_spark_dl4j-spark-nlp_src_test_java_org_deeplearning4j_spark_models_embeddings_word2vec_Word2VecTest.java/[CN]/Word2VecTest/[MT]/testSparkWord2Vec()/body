{
  JavaRDD<String> corpus=sc.textFile(new ClassPathResource("basic/word2vec.txt").getFile().getAbsolutePath());
  Random random=Nd4j.getRandom();
  random.setSeed(123);
  org.deeplearning4j.models.word2vec.Word2Vec vec=new org.deeplearning4j.models.word2vec.Word2Vec.Builder().iterate(new CollectionSentenceIterator(Arrays.asList("She found not one but two ."))).layerSize(100).minWordFrequency(1).iterations(5).build();
  vec.fit();
  InMemoryLookupTable table=(InMemoryLookupTable)vec.lookupTable();
  random.setSeed(123);
  Word2Vec word2Vec=new Word2Vec();
  sc.getConf().set(Word2VecPerformer.NEGATIVE,String.valueOf(0));
  sc.getConf().set(TextPipeline.MIN_WORDS,String.valueOf("1"));
  Pair<VocabCache,WeightLookupTable> pair=word2Vec.train(corpus);
  InMemoryLookupTable table2=(InMemoryLookupTable)pair.getSecond();
  assertEquals(vec.getVectorizer().vocab(),pair.getFirst());
  assertTrue(table.getSyn0().eps(table2.getSyn0()).sum(Integer.MAX_VALUE).getDouble(0) == table.getSyn0().length());
}
