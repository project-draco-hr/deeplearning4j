{
  Set<String> encountered=new HashSet<>();
  if (message instanceof VocabWork) {
    List<VocabWord> document=new ArrayList<>();
    VocabWork work=(VocabWork)message;
    if (work.getWork() == null || work.getWork().isEmpty())     return;
    String sentence=work.getWork();
    if (sentence.isEmpty() || sentence.length() <= 2) {
      work.countDown();
      return;
    }
    Tokenizer t=tokenizer.create(sentence);
    while (t.hasMoreTokens()) {
      String token=t.nextToken();
      processToken(token,encountered,document);
    }
    index.addWordsToDoc(index.numDocuments(),document);
    numWordsEncountered.set(numWordsEncountered.get() + document.size());
    work.countDown();
    lastUpdate.getAndSet(System.currentTimeMillis());
  }
 else   if (message instanceof StreamWork) {
    StreamWork work=(StreamWork)message;
    List<VocabWord> document=new ArrayList<>();
    InputStream is=work.getIs();
    if (is == null)     return;
    boolean tryRead=false;
    try {
      if (is.available() > 0) {
        tryRead=true;
      }
    }
 catch (    Exception e) {
      tryRead=false;
    }
    if (!tryRead)     return;
    Tokenizer t=tokenizer.create(is);
    while (t.hasMoreTokens()) {
      String token=t.nextToken();
      if (token == null || token.isEmpty())       break;
      processToken(token,encountered,document);
    }
    index.addWordsToDoc(index.numDocuments(),document);
    numWordsEncountered.set(numWordsEncountered.get() + document.size());
    IOUtils.closeQuietly(is);
    work.countDown();
    lastUpdate.getAndSet(System.currentTimeMillis());
  }
 else   unhandled(message);
}
