{
  if (!(conf.getLayer() instanceof org.deeplearning4j.nn.conf.layers.FeedForwardLayer))   throw new IllegalArgumentException("unsupported layer type: " + conf.getLayer().getClass().getName());
  int length=numParams(conf,true);
  if (paramsView.length() != length)   throw new IllegalStateException("Expected params view of length " + length + ", got length "+ paramsView);
  org.deeplearning4j.nn.conf.layers.FeedForwardLayer layerConf=(org.deeplearning4j.nn.conf.layers.FeedForwardLayer)conf.getLayer();
  int nIn=layerConf.getNIn();
  int nOut=layerConf.getNOut();
  int nWeightParams=nIn * nOut;
  INDArray weightView=paramsView.get(NDArrayIndex.point(0),NDArrayIndex.interval(0,nWeightParams));
  INDArray biasView=paramsView.get(NDArrayIndex.point(0),NDArrayIndex.interval(nWeightParams,nWeightParams + nOut));
  params.put(WEIGHT_KEY,createWeightMatrix(conf,weightView));
  params.put(BIAS_KEY,createBias(conf,biasView));
  conf.addVariable(WEIGHT_KEY);
  conf.addVariable(BIAS_KEY);
}
