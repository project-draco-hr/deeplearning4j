{
  log.warn("[dl4j] - executing local ... ");
  log.warn("using training input: " + this.input);
  File inputFile=new File(this.input);
  InputSplit split=new FileSplit(inputFile);
  InputFormat inputFormat=this.createInputFormat();
  RecordReader reader=null;
  try {
    reader=inputFormat.createReader(split);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (type.equals("multi")) {
    try {
      MultiLayerConfiguration conf=MultiLayerConfiguration.fromJson(FileUtils.readFileToString(new File(modelPath)));
      DataSetIterator iter=new RecordReaderDataSetIterator(reader,conf.getConf(0).getBatchSize(),-1,conf.getConf(conf.getConfs().size() - 1).getNOut());
      MultiLayerNetwork network=new MultiLayerNetwork(conf);
      if (verbose) {
        network.init();
        network.setListeners(Collections.<IterationListener>singletonList(new ScoreIterationListener(1)));
      }
      network.fit(iter);
      if (saveMode.equals("binary")) {
        BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(this.outputDirectory + File.separator + "outputmodel.bin"));
        DataOutputStream dos=new DataOutputStream(bos);
        Nd4j.write(network.params(),dos);
      }
 else {
        Nd4j.writeTxt(network.params(),outputDirectory + File.separator + "outputmodel.txt",",");
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else {
    try {
      NeuralNetConfiguration conf=NeuralNetConfiguration.fromJson(FileUtils.readFileToString(new File(modelPath)));
      LayerFactory factory=LayerFactories.getFactory(conf);
      Layer l=factory.create(conf);
      DataSetIterator iter=new RecordReaderDataSetIterator(reader,conf.getBatchSize());
      while (iter.hasNext()) {
        l.fit(iter.next().getFeatureMatrix());
      }
      if (saveMode.equals("binary")) {
        BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(this.outputDirectory));
        DataOutputStream dos=new DataOutputStream(bos);
        Nd4j.write(l.params(),dos);
      }
 else {
        Nd4j.writeTxt(l.params(),outputDirectory,",");
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}
