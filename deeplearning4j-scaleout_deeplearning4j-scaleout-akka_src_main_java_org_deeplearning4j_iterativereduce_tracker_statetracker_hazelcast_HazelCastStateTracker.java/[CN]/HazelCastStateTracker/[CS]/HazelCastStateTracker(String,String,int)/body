{
  if (type.equals("master") && !PortTaken.portTaken(stateTrackerPort)) {
    this.hazelCastPort=stateTrackerPort;
    config=hazelcast();
    h=Hazelcast.newHazelcastInstance(config);
    h.getCluster().addMembershipListener(new MembershipListener(){
      @Override public void memberAdded(      MembershipEvent membershipEvent){
        log.info("Member added " + membershipEvent.toString());
      }
      @Override public void memberRemoved(      MembershipEvent membershipEvent){
        log.info("Member removed " + membershipEvent.toString());
      }
      @Override public void memberAttributeChanged(      MemberAttributeEvent memberAttributeEvent){
        log.info("Member changed " + memberAttributeEvent.toString());
      }
    }
);
  }
 else {
    log.info("Connecting to hazelcast on " + connectionString);
    ClientConfig client=new ClientConfig();
    client.getNetworkConfig().addAddress(connectionString);
    h=HazelcastClient.newHazelcastClient(client);
  }
  this.type=type;
  jobs=h.getList(JOBS);
  workers=h.getList(WORKERS);
  if (!this.type.equals("master")) {
    while (workers.isEmpty()) {
      log.warn("Waiting for data sync...");
      Thread.sleep(1000);
    }
    log.info("Workers is " + workers.size());
  }
  topics=h.getList(TOPICS);
  heartbeat=h.getMap(HEART_BEAT);
  master=h.getAtomicReference(RESULT);
  isPretrain=h.getAtomicReference(IS_PRETRAIN);
  numTimesPretrain=h.getAtomicReference(NUM_TIMES_RUN_PRETRAIN);
  numTimesPretrainRan=h.getAtomicReference(NUM_TIMES_PRETRAIN_RAN);
  if (type.equals("master")) {
    numTimesPretrainRan.set(0);
    numTimesPretrain.set(1);
    isPretrain.set(true);
  }
}
