{
  MnistDataFetcher fetcher=new MnistDataFetcher(true);
  LayerFactory layerFactory=LayerFactories.getFactory(AutoEncoder.class);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().momentum(0.9f).optimizationAlgo(OptimizationAlgorithm.GRADIENT_DESCENT).corruptionLevel(0.6).iterations(100).iterationListener(new IterationListener(){
    @Override public void iterationDone(    Model model,    int iteration){
      if (iteration > 0 && iteration % 20 == 0) {
        NeuralNetPlotter plotter=new NeuralNetPlotter();
        Layer l=(Layer)model;
        plotter.renderFilter(l.getParam(PretrainParamInitializer.WEIGHT_KEY));
        INDArray gradient=l.gradient().gradient();
        GradientAdjustment.updateGradientAccordingToParams(l.conf(),0,l.getOptimizer().getAdaGrad(),gradient,l.params(),l.batchSize());
      }
    }
  }
).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).learningRate(1e-1f).nIn(784).nOut(600).layerFactory(layerFactory).build();
  fetcher.fetch(100);
  DataSet d2=fetcher.next();
  INDArray input=d2.getFeatureMatrix();
  AutoEncoder da=layerFactory.create(conf);
  assertEquals(da.params(),da.params());
  assertEquals(471784,da.params().length());
  da.setParams(da.params());
  da.fit(input);
}
