{
  Sequence<T> sequence=new Sequence<>();
  int[] visitedHops=new int[walkLength];
  Arrays.fill(visitedHops,-1);
  int startPosition=position.getAndIncrement();
  int lastId=-1;
  int startPoint=order[startPosition];
  for (int i=0; i < walkLength; i++) {
    int currentPosition=startPosition;
    Vertex<T> vertex=sourceGraph.getVertex(order[currentPosition]);
    sequence.addElement(vertex.getValue());
    visitedHops[i]=vertex.vertexID();
switch (walkDirection) {
case RANDOM:
case FORWARD_ONLY:
case FORWARD_PREFERRED:
{
        PriorityQueue<Node<T>> queue=new PriorityQueue<Node<T>>();
        int[] connections=ArrayUtils.removeElements(sourceGraph.getConnectedVertexIndices(vertex.vertexID()),visitedHops);
        int start=0;
        int stop=0;
        if (connections.length > 0) {
          for (          int connected : connections) {
            queue.add(new Node<T>(connected,sourceGraph.getConnectedVertices(connected).size()),sourceGraph.getConnectedVertices(connected).size());
          }
          spread=spread > connections.length ? connections.length : spread;
switch (popularityMode) {
case MAXIMUM:
            start=0;
          stop=start + spread - 1;
        break;
case MINIMUM:
      start=connections.length - spread;
    stop=connections.length - 1;
  break;
case AVERAGE:
int mid=connections.length / 2;
start=mid - (spread / 2);
stop=mid + (spread / 2);
break;
}
logger.info("Spread: [" + spread + "], Connections: ["+ connections.length+ "], Start: ["+ start+ "], Stop: ["+ stop+ "]");
int cnt=0;
logger.info("Queue: " + queue);
logger.info("Queue size: " + queue.size());
while (queue.hasNext()) {
connections[cnt]=queue.next().getVertexId();
cnt++;
}
int con=0;
switch (spectrum) {
case PLAIN:
con=RandomUtils.nextInt(start,stop + 1);
break;
case PROPORTIONAL:
break;
}
logger.info("Picked selection: " + con);
Vertex<T> nV=sourceGraph.getVertex(connections[con]);
startPosition=nV.vertexID();
}
 else {
switch (noEdgeHandling) {
case EXCEPTION_ON_DISCONNECTED:
throw new NoEdgesException("No more edges at vertex [" + currentPosition + "]");
case CUTOFF_ON_DISCONNECTED:
i+=walkLength;
break;
case SELF_LOOP_ON_DISCONNECTED:
startPosition=currentPosition;
break;
default :
throw new UnsupportedOperationException("Unsupported noEdgeHandling: [" + noEdgeHandling + "]");
}
}
}
break;
default :
throw new UnsupportedOperationException("Unknown WalkDirection: [" + walkDirection + "]");
}
}
return sequence;
}
