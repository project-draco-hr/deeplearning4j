{
  DoubleMatrix newInput=new DoubleMatrix(list.size(),list.get(0).getFirst().columns);
  DoubleMatrix newOutput=new DoubleMatrix(list.size(),list.get(0).getSecond().columns);
  for (int i=0; i < list.size(); i++) {
    newInput.putRow(i,list.get(i).getFirst());
    newOutput.putRow(i,list.get(i).getSecond());
  }
  this.combinedInput=newInput;
  this.outcomes=newOutput;
  Future<UpdateableImpl> f=Futures.future(new Callable<UpdateableImpl>(){
    @Override public UpdateableImpl call() throws Exception {
      UpdateableImpl work=compute();
      return work;
    }
  }
,getContext().dispatcher());
  f.onComplete(new OnComplete<UpdateableImpl>(){
    @Override public void onComplete(    Throwable arg0,    UpdateableImpl work) throws Throwable {
      if (arg0 != null)       throw arg0;
      log.info("Updating parent actor...");
      mediator.tell(new DistributedPubSubMediator.Publish(MasterActor.MASTER,work),getSelf());
    }
  }
,context().dispatcher());
}
