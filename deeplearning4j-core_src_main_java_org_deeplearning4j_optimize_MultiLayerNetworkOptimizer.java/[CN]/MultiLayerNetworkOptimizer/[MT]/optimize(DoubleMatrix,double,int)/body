{
  network.getLogLayer().setLabels(labels);
  List<DoubleMatrix> activations=network.feedForward(network.getInput());
  DoubleMatrix train=sampleHiddenGivenVisible();
  if (!network.isForceNumEpochs()) {
    network.getLogLayer().trainTillConvergence(train,labels,lr,epochs);
    if (network.isShouldBackProp())     network.backProp(lr,epochs);
  }
 else {
    log.info("Training for " + epochs + " epochs");
    for (int i=0; i < epochs; i++) {
      network.getLogLayer().train(activations.get(activations.size() - 2),labels,lr);
    }
    if (network.isShouldBackProp())     network.backProp(lr,epochs);
  }
}
