{
  int miniBatch=input.size(0);
  int inH=input.size(2);
  int inW=input.size(3);
  int outDepth=weights.size(0);
  int inDepth=weights.size(1);
  int kH=weights.size(2);
  int kW=weights.size(3);
  int[] srcStride=input.stride();
  if (Nd4j.getExecutioner() instanceof GridExecutioner)   ((GridExecutioner)Nd4j.getExecutioner()).flushQueue();
  checkCudnn(cudnnSetTensor4dDescriptorEx(cudnnContext.srcTensorDesc,dataType,miniBatch,inDepth,inH,inW,srcStride[0],srcStride[1],srcStride[2],srcStride[3]));
  checkCudnn(cudnnSetFilter4dDescriptor(cudnnContext.filterDesc,dataType,tensorFormat,outDepth,inDepth,kH,kW));
  checkCudnn(cudnnSetConvolution2dDescriptor(cudnnContext.convDesc,pad[0],pad[1],strides[0],strides[1],1,1,CUDNN_CROSS_CORRELATION));
  int[] algo=new int[1], n=new int[1], c=new int[1], h=new int[1], w=new int[1];
  checkCudnn(cudnnGetConvolution2dForwardOutputDim(cudnnContext.convDesc,cudnnContext.srcTensorDesc,cudnnContext.filterDesc,n,c,h,w));
  INDArray z=Nd4j.createUninitialized(new int[]{n[0],c[0],h[0],w[0]},'c');
  int[] dstStride=z.stride();
  checkCudnn(cudnnSetTensor4dDescriptorEx(cudnnContext.dstTensorDesc,dataType,n[0],c[0],h[0],w[0],dstStride[0],dstStride[1],dstStride[2],dstStride[3]));
  checkCudnn(cudnnGetConvolutionForwardAlgorithm(cudnnContext,cudnnContext.srcTensorDesc,cudnnContext.filterDesc,cudnnContext.convDesc,cudnnContext.dstTensorDesc,CUDNN_CONVOLUTION_FWD_PREFER_FASTEST,0,algo));
  Allocator allocator=AtomicAllocator.getInstance();
  CudaContext context=allocator.getFlowController().prepareAction(input,weights,bias,z);
  Pointer srcData=allocator.getPointer(input,context);
  Pointer filterData=allocator.getPointer(weights,context);
  Pointer biasData=allocator.getPointer(bias,context);
  Pointer dstData=allocator.getPointer(z,context);
  checkCudnn(cudnnSetStream(cudnnContext,new CUstream_st(context.getOldStream())));
  checkCudnn(cudnnGetConvolutionForwardWorkspaceSize(cudnnContext,cudnnContext.srcTensorDesc,cudnnContext.filterDesc,cudnnContext.convDesc,cudnnContext.dstTensorDesc,algo[0],sizeInBytes));
  if (sizeInBytes.get(0) > workSpace.capacity()) {
    workSpace.deallocate();
    workSpace=new WorkSpace(sizeInBytes.get(0));
  }
  checkCudnn(cudnnConvolutionForward(cudnnContext,alpha,cudnnContext.srcTensorDesc,srcData,cudnnContext.filterDesc,filterData,cudnnContext.convDesc,algo[0],workSpace,workSpace.capacity(),beta,cudnnContext.dstTensorDesc,dstData));
  checkCudnn(cudnnSetTensor4dDescriptor(cudnnContext.biasTensorDesc,tensorFormat,dataType,1,c[0],1,1));
  checkCudnn(cudnnAddTensor(cudnnContext,alpha,cudnnContext.biasTensorDesc,biasData,alpha,cudnnContext.dstTensorDesc,dstData));
  allocator.registerAction(context,input,weights,bias,z);
  return z;
}
