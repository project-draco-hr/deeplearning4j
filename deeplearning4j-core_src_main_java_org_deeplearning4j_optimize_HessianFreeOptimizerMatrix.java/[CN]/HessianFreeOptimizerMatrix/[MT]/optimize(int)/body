{
  myName=Thread.currentThread().getName();
  if (converged)   return true;
  long last=System.currentTimeMillis();
  if (xi == null) {
    fp=optimizable.getValue();
    xi=optimizable.getValueGradient(0);
    g=xi.dup();
    h=xi.dup();
    iterations=0;
  }
  long curr=0;
  for (int iterationCount=0; iterationCount < numIterations; iterationCount++) {
    curr=System.currentTimeMillis();
    logger.info(myName + " ConjugateGradient: At iteration " + iterations+ ", cost = "+ fp+ " -"+ (curr - last));
    last=curr;
    optimizable.setCurrentIteration(iterationCount);
    try {
      step=lineMaximizer.optimize(xi,iterationCount,step);
    }
 catch (    Throwable e) {
      logger.warn("Error during computation",e);
    }
    fret=optimizable.getValue();
    xi=optimizable.getValueGradient(iterationCount);
    if ((0 < tolerance) && (2.0 * Math.abs(fret - fp) <= tolerance * (Math.abs(fret) + Math.abs(fp) + eps))) {
      logger.info("ConjugateGradient converged: old value= " + fp + " new value= "+ fret+ " tolerance="+ tolerance);
      converged=true;
      return true;
    }
    fp=fret;
    double twoNorm=xi.norm2();
    if (twoNorm < gradientTolerance) {
      logger.info("ConjugateGradient converged: gradient two norm " + twoNorm + ", less than "+ gradientTolerance);
      converged=true;
      if (listener != null) {
        listener.iterationDone(iterationCount);
      }
      return true;
    }
    dgg=gg=0.0;
    gg=MatrixFunctions.pow(g,2).sum();
    dgg=xi.mul(xi.sub(g)).sum();
    gam=dgg / gg;
    g=xi.dup();
    h=xi.add(h.mul(gam));
    assert(!MatrixUtil.isNaN(h));
    if (SimpleBlas.dot(xi,h) > 0) {
      xi=h.dup();
    }
 else {
      logger.warn("Reverting back to GA");
      h=xi.dup();
    }
    iterations++;
    if (iterations > maxIterations) {
      logger.info("Passed max number of iterations");
      converged=true;
      if (listener != null) {
        listener.iterationDone(iterationCount);
      }
      return true;
    }
    if (listener != null) {
      listener.iterationDone(iterationCount);
    }
    if (eval != null && eval.shouldStop(iterations)) {
      return true;
    }
  }
  return false;
}
