{
  if (trainingSystem == null)   trainingSystem=ActorSystem.create();
  if (stopWords == null)   readStopWords();
  log.info("Training word2vec multithreaded");
  MapFactory<String,Double> factory=new MapFactory<String,Double>(){
    private static final long serialVersionUID=5447027920163740307L;
    @Override public Map<String,Double> buildMap(){
      return new java.util.concurrent.ConcurrentHashMap<String,Double>();
    }
  }
;
  final Counter<String> totalWords=new Counter<String>(factory);
  if (syn0.rows != this.vocab.size())   throw new IllegalStateException("We appear to be missing vectors here. Unable to train. Please ensure vectors were loaded properly.");
  sentenceIter.reset();
  while (sentenceIter.hasNext()) {
    final String sentence=sentenceIter.nextSentence();
    Futures.future(new Callable<Void>(){
      @Override public Void call() throws Exception {
        processSentence(sentence,totalWords);
        numSentencesProcessed++;
        return null;
      }
    }
,trainingSystem.dispatcher());
  }
  while (sentenceIter.hasNext()) {
    try {
      Thread.sleep(150000);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
  if (trainingSystem != null)   trainingSystem.shutdown();
}
