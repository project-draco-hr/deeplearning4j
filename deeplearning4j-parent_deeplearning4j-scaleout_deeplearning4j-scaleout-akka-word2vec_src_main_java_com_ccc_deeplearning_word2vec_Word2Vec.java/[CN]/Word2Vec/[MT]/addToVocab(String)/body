{
  if (!sentences.isEmpty())   throw new IllegalStateException("Only one method (complete sentences passed in) or streaming is allowed. Please clear sentences and pass in a file iterator to use the other method");
  int count=0;
  numLines++;
  StringTokenizer tokenizer=new StringTokenizer(new InputHomogenization(words).transform());
  this.allWordsCount+=tokenizer.countTokens();
  count++;
  if (count % 10000 == 0)   log.info("Processed  sentence " + count + " current word count "+ allWordsCount);
  while (tokenizer.hasMoreTokens()) {
    String token=tokenizer.nextToken();
    if (stopWords.contains(token))     token="STOP";
    VocabWord word=rawVocab.get(token);
    if (word != null)     word.increment();
 else {
      word=new VocabWord(1.0,layerSize);
      rawVocab.put(token,word);
    }
    if (word.getWordFrequency() >= minWordFrequency) {
      word.setIndex(wordIndex.size());
      wordIndex.add(token);
      this.vocab.put(token,word);
    }
  }
}
