{
  int miniBatch=input.size(0);
  int inDepth=input.size(1);
  int inH=input.size(2);
  int inW=input.size(3);
  int[] srcStride=input.stride();
  checkCudnn(cudnnSetTensor4dDescriptorEx(cudnnContext.srcTensorDesc,dataType,miniBatch,inDepth,inH,inW,srcStride[0],srcStride[1],srcStride[2],srcStride[3]));
  activations=Nd4j.createUninitialized(new int[]{miniBatch,inDepth,inH,inW},'c');
  int[] dstStride=activations.stride();
  checkCudnn(cudnnSetTensor4dDescriptorEx(cudnnContext.dstTensorDesc,dataType,miniBatch,inDepth,inH,inW,dstStride[0],dstStride[1],dstStride[2],dstStride[3]));
  checkCudnn(cudnnSetLRNDescriptor(cudnnContext.lrnDesc,(int)n,alpha,beta,k));
  Allocator allocator=AtomicAllocator.getInstance();
  CudaContext context=allocator.getFlowController().prepareAction(input,activations);
  Pointer srcData=allocator.getPointer(input,context);
  Pointer dstData=allocator.getPointer(activations,context);
  checkCudnn(cudnnSetStream(cudnnContext,new CUstream_st(context.getOldStream())));
  checkCudnn(cudnnLRNCrossChannelForward(cudnnContext,cudnnContext.lrnDesc,CUDNN_LRN_CROSS_CHANNEL_DIM1,this.alpha,cudnnContext.srcTensorDesc,srcData,this.beta,cudnnContext.dstTensorDesc,dstData));
  allocator.registerAction(context,input,activations);
  return activations;
}
