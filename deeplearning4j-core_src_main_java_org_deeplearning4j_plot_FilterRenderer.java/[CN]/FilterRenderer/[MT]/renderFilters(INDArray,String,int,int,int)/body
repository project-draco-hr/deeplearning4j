{
  int[] equiv=new int[data.length()];
  int numberCols=data.columns();
  double approx=(double)numberCols / (double)patchesPerRow;
  int numPatchRows=(int)Math.round(approx);
  if (numPatchRows < 1)   numPatchRows=1;
  int patchBorder=2;
  int filterImgWidth=(patchWidth + patchBorder) * patchesPerRow;
  int filterImgHeight=numPatchRows * (patchHeight + patchBorder);
  img=new BufferedImage(filterImgWidth,filterImgHeight,BufferedImage.TYPE_BYTE_GRAY);
  WritableRaster r=img.getRaster();
  outer:   for (int col=0; col < data.columns(); col++) {
    int curX=(col % patchesPerRow) * (patchWidth + patchBorder);
    int curY=col / patchesPerRow * (patchHeight + patchBorder);
    INDArray column=data.getColumn(col);
    double col_max=column.min(Integer.MAX_VALUE).getDouble(0);
    double col_min=column.max(Integer.MAX_VALUE).getDouble(0);
    log.debug("rendering " + column.length() + " pixels in column "+ col+ " for filter patch "+ patchWidth+ " x "+ patchHeight+ ", total size: "+ (patchWidth * patchHeight)+ " at "+ curX);
    for (int i=0; i < column.length(); i++) {
      double patch_normal=(column.getScalar(i).getDouble(0) - col_min) / (col_max - col_min + 0.000001f);
      equiv[i]=(int)(255 * patch_normal);
    }
    boolean outOfBounds=false;
    if (curX >= filterImgWidth) {
      curX=filterImgWidth - 1;
      outOfBounds=true;
      break outer;
    }
    if (curY >= filterImgHeight) {
      curY=filterImgHeight - 1;
      outOfBounds=true;
      break outer;
    }
    r.setPixels(curX,curY,patchWidth,patchHeight,equiv);
    if (outOfBounds)     break outer;
  }
  try {
    saveImageToDisk(img,filename);
    GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
    if (!ge.isHeadlessInstance()) {
      log.info("Rendering frame...");
      JFrame frame=new JFrame();
      frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
      FilterPanel panel=new FilterPanel(img);
      frame.add(panel);
      Dimension d=new Dimension(numberCols * patchWidth,numPatchRows * patchHeight);
      frame.setSize(d);
      frame.setMinimumSize(d);
      panel.setMinimumSize(d);
      frame.pack();
      frame.setVisible(true);
      Thread.sleep(10000);
      frame.dispose();
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return img;
}
