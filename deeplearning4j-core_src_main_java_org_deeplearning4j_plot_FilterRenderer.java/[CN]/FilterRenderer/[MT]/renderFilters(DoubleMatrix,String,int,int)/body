{
  int[] equiv=new int[data.getColumn(0).length];
  int numberCols=data.columns;
  int patchesPerRow=10;
  double approx=(double)numberCols / (double)patchesPerRow;
  int numPatchRows=(int)Math.round(approx);
  if (numPatchRows < 1)   numPatchRows=1;
  int patchBorder=2;
  int filterImgWidth=(patchWidth + patchBorder) * patchesPerRow;
  int filterImgHeight=numPatchRows * (patchHeight + patchBorder);
  log.debug("Filter Width: " + filterImgWidth);
  log.debug("Filter Height: " + filterImgHeight);
  log.debug("Patch array size: " + equiv.length);
  img=new BufferedImage(filterImgWidth,filterImgHeight,BufferedImage.TYPE_BYTE_GRAY);
  WritableRaster r=img.getRaster();
  for (int col=0; col < data.columns; col++) {
    int curX=(col % patchesPerRow) * (patchWidth + patchBorder);
    int curY=col / patchesPerRow * (patchHeight + patchBorder);
    DoubleMatrix column=data.getColumn(col);
    double col_max=MatrixUtil.min(column);
    double col_min=MatrixUtil.max(column);
    log.debug("rendering " + column.length + " pixels in column "+ col+ " for filter patch "+ patchWidth+ " x "+ patchHeight+ ", total size: "+ (patchWidth * patchHeight)+ " at "+ curX);
    for (int i=0; i < column.length; i++) {
      double patch_normal=(column.get(i) - col_min) / (col_max - col_min + 0.000001);
      equiv[i]=(int)(255 * patch_normal);
    }
    r.setPixels(curX,curY,patchWidth,patchHeight,equiv);
  }
  try {
    saveImageToDisk(img,filename);
    GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
    if (!ge.isHeadlessInstance()) {
      log.info("Rendering frame...");
      JFrame frame=new JFrame();
      frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
      FilterPanel panel=new FilterPanel(img);
      frame.add(panel);
      Dimension d=new Dimension(numberCols * patchWidth,numPatchRows * patchHeight);
      frame.setSize(d);
      frame.setMinimumSize(d);
      panel.setMinimumSize(d);
      frame.pack();
      frame.setVisible(true);
      Thread.sleep(10000);
      frame.dispose();
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
