{
  Map<Integer,Integer> mapHistory=this.generateHistogramBuckets(data,numberBins);
  double min=data.min(Integer.MAX_VALUE).getDouble(0);
  double max=data.max(Integer.MAX_VALUE).getDouble(0);
  double range=max - min;
  double stepSize=range / numberBins;
  int xOffset=50;
  int yOffset=-50;
  int graphWidth=600;
  int graphHeight=400;
  BufferedImage img=new BufferedImage(graphWidth,graphHeight,BufferedImage.TYPE_INT_RGB);
  Graphics2D g2d=img.createGraphics();
  final int BAR_WIDTH=40;
  final int X_POSITION=0;
  final int Y_POSITION=200;
  int MIN_BAR_WIDTH=4;
  g2d.setColor(Color.LIGHT_GRAY);
  g2d.fillRect(0,0,graphWidth,graphHeight);
  int barWidth=BAR_WIDTH;
  int maxValue=0;
  for (  Integer key : mapHistory.keySet()) {
    int value=mapHistory.get(key);
    maxValue=Math.max(maxValue,value);
  }
  double plotAreaHeight=(graphHeight + yOffset);
  double yScaleStepSize=plotAreaHeight / 4;
  double yLabelStepSize=(double)maxValue / 4.0f;
  for (int yStep=0; yStep < 5; yStep++) {
    double curLabel=yStep * yLabelStepSize;
    long curY=(graphHeight + yOffset) - Math.round(((int)(curLabel) / (double)maxValue) * (graphHeight + yOffset - 20));
    g2d.setColor(Color.BLACK);
    g2d.drawString("" + curLabel,10,curY);
  }
  int xPos=xOffset;
  for (  Integer key : mapHistory.keySet()) {
    long value=mapHistory.get(key);
    String bucket_label=this.buildBucketLabel(key,stepSize,min);
    long barHeight=Math.round(((double)value / (double)maxValue) * (graphHeight + yOffset - 20));
    g2d.setColor(Color.BLUE);
    long yPos=graphHeight + yOffset - barHeight;
    g2d.fillRect(xPos,(int)yPos,barWidth,(int)barHeight);
    g2d.setColor(Color.DARK_GRAY);
    g2d.drawRect(xPos,(int)yPos,barWidth,(int)barHeight);
    g2d.setColor(Color.BLACK);
    g2d.drawString(bucket_label,xPos + ((barWidth / 2) - 10),barHeight + 20 + yPos);
    xPos+=barWidth + 10;
  }
  try {
    saveImageToDisk(img,filename);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  g2d.dispose();
}
