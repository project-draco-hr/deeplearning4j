{
  _dict=new HashMap<String,Double>();
  HashMap<String,List<Double>> _temp=new HashMap<String,List<Double>>();
  ClassPathResource resource=new ClassPathResource(sentiWordNetPath);
  BufferedReader csv=null;
  try {
    csv=new BufferedReader(new InputStreamReader(resource.getInputStream()));
    String line="";
    while ((line=csv.readLine()) != null) {
      if (line.isEmpty())       continue;
      String[] data=line.split("\t");
      if (data[2].isEmpty() || data[3].isEmpty())       continue;
      Double score=Double.parseDouble(data[2]) - Double.parseDouble(data[3]);
      String[] words=data[4].split(" ");
      for (      String w : words) {
        if (w.isEmpty())         continue;
        String[] w_n=w.split("#");
        w_n[0]+="#" + data[0];
        int index=Integer.parseInt(w_n[1]) - 1;
        if (_temp.containsKey(w_n[0])) {
          List<Double> l=_temp.get(w_n[0]);
          if (index > l.size())           for (int i=l.size(); i < index; i++)           l.add(0.0);
          l.add(index,score);
          _temp.put(w_n[0],l);
        }
 else {
          List<Double> l=new ArrayList<Double>();
          for (int i=0; i < index; i++)           l.add(0.0);
          l.add(index,score);
          _temp.put(w_n[0],l);
        }
      }
    }
    Set<String> temp=_temp.keySet();
    for (Iterator<String> iterator=temp.iterator(); iterator.hasNext(); ) {
      String word=iterator.next();
      List<Double> l=_temp.get(word);
      double score=0.0;
      double sum=0.0;
      for (int i=0; i < l.size(); i++)       score+=((double)1 / (double)(i + 1)) * l.get(i);
      for (int i=1; i <= l.size(); i++)       sum+=(double)1 / (double)i;
      score/=sum;
      _dict.put(word,score);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    if (csv != null) {
      try {
        csv.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}
