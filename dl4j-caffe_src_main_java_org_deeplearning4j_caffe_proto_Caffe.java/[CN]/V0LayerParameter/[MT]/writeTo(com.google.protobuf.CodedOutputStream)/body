{
  getSerializedSize();
  if (((bitField0_ & 0x00000001) == 0x00000001)) {
    output.writeBytes(1,getNameBytes());
  }
  if (((bitField0_ & 0x00000002) == 0x00000002)) {
    output.writeBytes(2,getTypeBytes());
  }
  if (((bitField0_ & 0x00000004) == 0x00000004)) {
    output.writeUInt32(3,numOutput_);
  }
  if (((bitField0_ & 0x00000008) == 0x00000008)) {
    output.writeBool(4,biasterm_);
  }
  if (((bitField0_ & 0x00000010) == 0x00000010)) {
    output.writeMessage(5,weightFiller_);
  }
  if (((bitField0_ & 0x00000020) == 0x00000020)) {
    output.writeMessage(6,biasFiller_);
  }
  if (((bitField0_ & 0x00000040) == 0x00000040)) {
    output.writeUInt32(7,pad_);
  }
  if (((bitField0_ & 0x00000080) == 0x00000080)) {
    output.writeUInt32(8,kernelsize_);
  }
  if (((bitField0_ & 0x00000100) == 0x00000100)) {
    output.writeUInt32(9,group_);
  }
  if (((bitField0_ & 0x00000200) == 0x00000200)) {
    output.writeUInt32(10,stride_);
  }
  if (((bitField0_ & 0x00000400) == 0x00000400)) {
    output.writeEnum(11,pool_.getNumber());
  }
  if (((bitField0_ & 0x00000800) == 0x00000800)) {
    output.writeFloat(12,dropoutRatio_);
  }
  if (((bitField0_ & 0x00001000) == 0x00001000)) {
    output.writeUInt32(13,localSize_);
  }
  if (((bitField0_ & 0x00002000) == 0x00002000)) {
    output.writeFloat(14,alpha_);
  }
  if (((bitField0_ & 0x00004000) == 0x00004000)) {
    output.writeFloat(15,beta_);
  }
  if (((bitField0_ & 0x00010000) == 0x00010000)) {
    output.writeBytes(16,getSourceBytes());
  }
  if (((bitField0_ & 0x00020000) == 0x00020000)) {
    output.writeFloat(17,scale_);
  }
  if (((bitField0_ & 0x00040000) == 0x00040000)) {
    output.writeBytes(18,getMeanfileBytes());
  }
  if (((bitField0_ & 0x00080000) == 0x00080000)) {
    output.writeUInt32(19,batchsize_);
  }
  if (((bitField0_ & 0x00100000) == 0x00100000)) {
    output.writeUInt32(20,cropsize_);
  }
  if (((bitField0_ & 0x00200000) == 0x00200000)) {
    output.writeBool(21,mirror_);
  }
  if (((bitField0_ & 0x00008000) == 0x00008000)) {
    output.writeFloat(22,k_);
  }
  for (int i=0; i < blobs_.size(); i++) {
    output.writeMessage(50,blobs_.get(i));
  }
  for (int i=0; i < blobsLr_.size(); i++) {
    output.writeFloat(51,blobsLr_.get(i));
  }
  for (int i=0; i < weightDecay_.size(); i++) {
    output.writeFloat(52,weightDecay_.get(i));
  }
  if (((bitField0_ & 0x00400000) == 0x00400000)) {
    output.writeUInt32(53,randSkip_);
  }
  if (((bitField0_ & 0x00800000) == 0x00800000)) {
    output.writeFloat(54,detFgThreshold_);
  }
  if (((bitField0_ & 0x01000000) == 0x01000000)) {
    output.writeFloat(55,detBgThreshold_);
  }
  if (((bitField0_ & 0x02000000) == 0x02000000)) {
    output.writeFloat(56,detFgFraction_);
  }
  if (((bitField0_ & 0x04000000) == 0x04000000)) {
    output.writeUInt32(58,detContextPad_);
  }
  if (((bitField0_ & 0x08000000) == 0x08000000)) {
    output.writeBytes(59,getDetCropModeBytes());
  }
  if (((bitField0_ & 0x10000000) == 0x10000000)) {
    output.writeInt32(60,newNum_);
  }
  if (((bitField0_ & 0x20000000) == 0x20000000)) {
    output.writeInt32(61,newChannels_);
  }
  if (((bitField0_ & 0x40000000) == 0x40000000)) {
    output.writeInt32(62,newHeight_);
  }
  if (((bitField0_ & 0x80000000) == 0x80000000)) {
    output.writeInt32(63,newWidth_);
  }
  if (((bitField1_ & 0x00000001) == 0x00000001)) {
    output.writeBool(64,shuffleImages_);
  }
  if (((bitField1_ & 0x00000002) == 0x00000002)) {
    output.writeUInt32(65,concatDim_);
  }
  if (((bitField1_ & 0x00000004) == 0x00000004)) {
    output.writeMessage(1001,hdf5OutputParam_);
  }
  getUnknownFields().writeTo(output);
}
