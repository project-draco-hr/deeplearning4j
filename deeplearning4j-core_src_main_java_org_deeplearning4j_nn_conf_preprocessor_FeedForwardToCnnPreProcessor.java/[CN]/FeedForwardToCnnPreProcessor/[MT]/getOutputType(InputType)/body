{
switch (inputType.getType()) {
case FF:
    InputType.InputTypeFeedForward c=(InputType.InputTypeFeedForward)inputType;
  int expSize=inputHeight * inputWidth * numChannels;
if (c.getSize() != expSize) {
  throw new IllegalStateException("Invalid input: expected FeedForward input of size " + expSize + " = (d="+ numChannels+ " * w="+ inputWidth+ " * h="+ inputHeight+ "), got "+ inputType);
}
return InputType.convolutional(inputHeight,inputWidth,numChannels);
case CNN:
InputType.InputTypeConvolutional c2=(InputType.InputTypeConvolutional)inputType;
if (c2.getDepth() != numChannels || c2.getHeight() != inputHeight || c2.getWidth() != inputWidth) {
throw new IllegalStateException("Invalid input: Got CNN input type with (d,w,h)=(" + c2.getDepth() + ","+ c2.getWidth()+ ","+ c2.getHeight()+ ") but expected ("+ numChannels+ ","+ inputHeight+ ","+ inputWidth+ ")");
}
return c2;
case CNNFlat:
InputType.InputTypeConvolutionalFlat c3=(InputType.InputTypeConvolutionalFlat)inputType;
if (c3.getDepth() != numChannels || c3.getHeight() != inputHeight || c3.getWidth() != inputWidth) {
throw new IllegalStateException("Invalid input: Got CNN input type with (d,w,h)=(" + c3.getDepth() + ","+ c3.getWidth()+ ","+ c3.getHeight()+ ") but expected ("+ numChannels+ ","+ inputHeight+ ","+ inputWidth+ ")");
}
return c3.getUnflattenedType();
default :
throw new IllegalStateException("Invalid input type: got " + inputType);
}
}
