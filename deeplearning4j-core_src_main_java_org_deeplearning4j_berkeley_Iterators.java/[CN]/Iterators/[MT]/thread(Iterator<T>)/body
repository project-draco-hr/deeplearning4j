{
  return new Iterator<T>(){
    ArrayBlockingQueue<T> els=new ArrayBlockingQueue<>(2);
    private boolean finishedLoading=false;
    private boolean running=false;
    Thread thread=new Thread(new Runnable(){
      public void run(){
        while (base.hasNext()) {
          try {
            els.put(base.next());
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
        }
        finishedLoading=true;
      }
    }
);
    public boolean hasNext(){
      return !(finishedLoading && els.isEmpty());
    }
    public T next(){
      if (!running)       thread.start();
      running=true;
      try {
        return els.take();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
