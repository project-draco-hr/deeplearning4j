{
  int timeSeriesLength=12;
  int miniBatchSize=7;
  int nIn=5;
  int nOut=4;
  int nTimeSlices=5;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).list(3).layer(0,new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(nIn).nOut(7).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).layer(1,new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(7).nOut(8).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).layer(2,new RnnOutputLayer.Builder(LossFunction.MCXENT).weightInit(WeightInit.DISTRIBUTION).nIn(8).nOut(nOut).activation("softmax").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).build();
  Nd4j.getRandom().setSeed(12345);
  MultiLayerNetwork mln=new MultiLayerNetwork(conf);
  mln.init();
  INDArray inputLong=Nd4j.rand(new int[]{miniBatchSize,nIn,nTimeSlices * timeSeriesLength});
  INDArray input=inputLong.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(0,timeSeriesLength));
  List<INDArray> outStandard=mln.feedForward(input,true);
  List<INDArray> outRnnAct=mln.rnnActivateUsingStoredState(input,true,true);
  assertTrue(outStandard.equals(outRnnAct));
  for (int i=0; i < 3; i++) {
    assertTrue(outStandard.equals(mln.rnnActivateUsingStoredState(input,true,true)));
  }
  List<INDArray> outStandardLong=mln.feedForward(inputLong,true);
  BaseRecurrentLayer<?> l0=((BaseRecurrentLayer<?>)mln.getLayer(0));
  BaseRecurrentLayer<?> l1=((BaseRecurrentLayer<?>)mln.getLayer(1));
  for (int i=0; i < nTimeSlices; i++) {
    INDArray inSlice=inputLong.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(i * timeSeriesLength,(i + 1) * timeSeriesLength));
    List<INDArray> outSlice=mln.rnnActivateUsingStoredState(inSlice,true,true);
    List<INDArray> expOut=new ArrayList<>();
    for (    INDArray temp : outStandardLong) {
      expOut.add(temp.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(i * timeSeriesLength,(i + 1) * timeSeriesLength)));
    }
    assertTrue(expOut.equals(outSlice));
    for (int j=0; j < 3; j++) {
      outSlice=mln.rnnActivateUsingStoredState(inSlice,true,true);
      assertTrue(expOut.equals(outSlice));
    }
    l0.rnnSetPreviousState(l0.rnnGetTBPTTState());
    l1.rnnSetPreviousState(l1.rnnGetTBPTTState());
  }
}
