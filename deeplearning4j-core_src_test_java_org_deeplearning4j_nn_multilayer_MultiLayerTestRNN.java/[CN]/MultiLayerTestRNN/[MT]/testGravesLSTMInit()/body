{
  int nIn=8;
  int nOut=25;
  int nHiddenUnits=17;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().list(2).layer(0,new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(nIn).nOut(nHiddenUnits).weightInit(WeightInit.DISTRIBUTION).activation("tanh").build()).layer(1,new OutputLayer.Builder(LossFunctions.LossFunction.SQUARED_LOSS).nIn(nHiddenUnits).nOut(nOut).weightInit(WeightInit.DISTRIBUTION).activation("tanh").build()).build();
  MultiLayerNetwork network=new MultiLayerNetwork(conf);
  network.init();
  Layer layer=network.getLayer(0);
  assertTrue(layer instanceof GravesLSTM);
  Map<String,INDArray> paramTable=layer.paramTable();
  assertTrue(paramTable.size() == 3);
  INDArray recurrentWeights=paramTable.get(GravesLSTMParamInitializer.RECURRENT_WEIGHT_KEY);
  assertArrayEquals(recurrentWeights.shape(),new int[]{nHiddenUnits,4 * nHiddenUnits + 3});
  INDArray inputWeights=paramTable.get(GravesLSTMParamInitializer.INPUT_WEIGHT_KEY);
  assertArrayEquals(inputWeights.shape(),new int[]{nIn,4 * nHiddenUnits});
  INDArray biases=paramTable.get(GravesLSTMParamInitializer.BIAS_KEY);
  assertArrayEquals(biases.shape(),new int[]{1,4 * nHiddenUnits});
  INDArray forgetGateBiases=biases.get(new INDArrayIndex[]{NDArrayIndex.interval(nHiddenUnits,2 * nHiddenUnits)});
  assertTrue(forgetGateBiases.gt(0).sum(Integer.MAX_VALUE).getDouble(0) == nHiddenUnits);
  int nParams=recurrentWeights.length() + inputWeights.length() + biases.length();
  assertTrue(nParams == layer.numParams());
}
