{
  int nIn=8;
  int nOut=25;
  int[] nHiddenUnits={17,19,23};
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().activationFunction("tanh").list(4).layer(0,new org.deeplearning4j.nn.conf.layers.GRU.Builder().nIn(nIn).nOut(17).weightInit(WeightInit.DISTRIBUTION).build()).layer(1,new org.deeplearning4j.nn.conf.layers.GRU.Builder().nIn(17).nOut(19).weightInit(WeightInit.DISTRIBUTION).build()).layer(2,new org.deeplearning4j.nn.conf.layers.GRU.Builder().nIn(19).nOut(23).weightInit(WeightInit.DISTRIBUTION).build()).layer(3,new OutputLayer.Builder(LossFunctions.LossFunction.SQUARED_LOSS).nIn(23).nOut(nOut).weightInit(WeightInit.DISTRIBUTION).build()).build();
  MultiLayerNetwork network=new MultiLayerNetwork(conf);
  network.init();
  for (int i=0; i < nHiddenUnits.length; i++) {
    Layer layer=network.getLayer(i);
    assertTrue(layer instanceof GRU);
    Map<String,INDArray> paramTable=layer.paramTable();
    assertTrue(paramTable.size() == 3);
    int layerNIn=(i == 0 ? nIn : nHiddenUnits[i - 1]);
    INDArray recurrentWeights=paramTable.get(GRUParamInitializer.RECURRENT_WEIGHTS);
    assertArrayEquals(recurrentWeights.shape(),new int[]{nHiddenUnits[i],3 * nHiddenUnits[i]});
    INDArray inputWeights=paramTable.get(GRUParamInitializer.INPUT_WEIGHTS);
    assertArrayEquals(inputWeights.shape(),new int[]{layerNIn,3 * nHiddenUnits[i]});
    INDArray biases=paramTable.get(GRUParamInitializer.BIAS);
    assertArrayEquals(biases.shape(),new int[]{1,3 * nHiddenUnits[i]});
    int nParams=recurrentWeights.length() + inputWeights.length() + biases.length();
    assertTrue(nParams == layer.numParams());
  }
}
