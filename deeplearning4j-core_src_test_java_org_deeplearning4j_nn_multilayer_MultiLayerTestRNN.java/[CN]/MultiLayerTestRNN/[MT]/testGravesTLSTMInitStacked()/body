{
  int nIn=8;
  int nOut=25;
  int[] nHiddenUnits={17,19,23};
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().layer(new org.deeplearning4j.nn.conf.layers.GravesLSTM()).nIn(nIn).nOut(nOut).activationFunction("tanh").list(nHiddenUnits.length + 1).hiddenLayerSizes(nHiddenUnits).override(nHiddenUnits.length,new ClassifierOverride()).build();
  MultiLayerNetwork network=new MultiLayerNetwork(conf);
  network.init();
  for (int i=0; i < nHiddenUnits.length; i++) {
    Layer layer=network.getLayer(i);
    assertTrue(layer instanceof GravesLSTM);
    Map<String,INDArray> paramTable=layer.paramTable();
    assertTrue(paramTable.size() == 3);
    int layerNIn=(i == 0 ? nIn : nHiddenUnits[i - 1]);
    INDArray recurrentWeights=paramTable.get(GravesLSTMParamInitializer.RECURRENT_WEIGHTS);
    assertArrayEquals(recurrentWeights.shape(),new int[]{nHiddenUnits[i],4 * nHiddenUnits[i] + 3});
    INDArray inputWeights=paramTable.get(GravesLSTMParamInitializer.INPUT_WEIGHTS);
    assertArrayEquals(inputWeights.shape(),new int[]{layerNIn,4 * nHiddenUnits[i]});
    INDArray biases=paramTable.get(GravesLSTMParamInitializer.BIAS);
    assertArrayEquals(biases.shape(),new int[]{1,4 * nHiddenUnits[i]});
    INDArray forgetGateBiases=biases.get(new NDArrayIndex[]{NDArrayIndex.interval(nHiddenUnits[i],2 * nHiddenUnits[i]),new NDArrayIndex(0)});
    assertTrue(forgetGateBiases.gt(0).sum(0).getDouble(0) == nHiddenUnits[i]);
    int nParams=recurrentWeights.length() + inputWeights.length() + biases.length();
    assertTrue(nParams == layer.numParams());
  }
}
