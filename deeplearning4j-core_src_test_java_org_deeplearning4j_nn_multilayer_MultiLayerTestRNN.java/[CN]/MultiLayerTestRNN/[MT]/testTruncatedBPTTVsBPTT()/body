{
  int timeSeriesLength=12;
  int miniBatchSize=7;
  int nIn=5;
  int nOut=4;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).list(3).layer(0,new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(nIn).nOut(7).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).layer(1,new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(7).nOut(8).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).layer(2,new RnnOutputLayer.Builder(LossFunction.MCXENT).weightInit(WeightInit.DISTRIBUTION).nIn(8).nOut(nOut).activation("softmax").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).backprop(true).build();
  assertEquals(BackpropType.Standard,conf.getBackpropType());
  MultiLayerConfiguration confTBPTT=new NeuralNetConfiguration.Builder().seed(12345).list(3).layer(0,new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(nIn).nOut(7).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).layer(1,new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(7).nOut(8).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).layer(2,new RnnOutputLayer.Builder(LossFunction.MCXENT).weightInit(WeightInit.DISTRIBUTION).nIn(8).nOut(nOut).activation("softmax").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).backprop(true).backpropType(BackpropType.TruncatedBPTT).tBPTTBackwardLength(timeSeriesLength).tBPTTForwardLength(timeSeriesLength).build();
  Nd4j.getRandom().setSeed(12345);
  MultiLayerNetwork mln=new MultiLayerNetwork(conf);
  mln.init();
  Nd4j.getRandom().setSeed(12345);
  MultiLayerNetwork mlnTBPTT=new MultiLayerNetwork(confTBPTT);
  mlnTBPTT.init();
  assertTrue(mlnTBPTT.getLayerWiseConfigurations().getBackpropType() == BackpropType.TruncatedBPTT);
  assertTrue(mlnTBPTT.getLayerWiseConfigurations().getTbpttFwdLength() == timeSeriesLength);
  assertTrue(mlnTBPTT.getLayerWiseConfigurations().getTbpttBackLength() == timeSeriesLength);
  INDArray inputData=Nd4j.rand(new int[]{miniBatchSize,nIn,timeSeriesLength});
  INDArray labels=Nd4j.rand(new int[]{miniBatchSize,nOut,timeSeriesLength});
  mln.setInput(inputData);
  mln.setLabels(labels);
  mlnTBPTT.setInput(inputData);
  mlnTBPTT.setLabels(labels);
  mln.computeGradientAndScore();
  mlnTBPTT.computeGradientAndScore();
  Pair<Gradient,Double> mlnPair=mln.gradientAndScore();
  Pair<Gradient,Double> tbpttPair=mln.gradientAndScore();
  assertEquals(mlnPair.getFirst(),tbpttPair.getFirst());
  assertEquals(mlnPair.getSecond(),tbpttPair.getSecond());
  Map<String,INDArray> l0StateMLN=mln.rnnGetPreviousState(0);
  Map<String,INDArray> l0StateTBPTT=mlnTBPTT.rnnGetPreviousState(0);
  Map<String,INDArray> l1StateMLN=mln.rnnGetPreviousState(0);
  Map<String,INDArray> l1StateTBPTT=mlnTBPTT.rnnGetPreviousState(0);
  Map<String,INDArray> l0TBPTTStateMLN=((BaseRecurrentLayer<?>)mln.getLayer(0)).rnnGetTBPTTState();
  Map<String,INDArray> l0TBPTTStateTBPTT=((BaseRecurrentLayer<?>)mlnTBPTT.getLayer(0)).rnnGetTBPTTState();
  Map<String,INDArray> l1TBPTTStateMLN=((BaseRecurrentLayer<?>)mln.getLayer(1)).rnnGetTBPTTState();
  Map<String,INDArray> l1TBPTTStateTBPTT=((BaseRecurrentLayer<?>)mlnTBPTT.getLayer(1)).rnnGetTBPTTState();
  assertTrue(l0StateMLN.isEmpty());
  assertTrue(l0StateTBPTT.isEmpty());
  assertTrue(l1StateMLN.isEmpty());
  assertTrue(l1StateTBPTT.isEmpty());
  assertTrue(l0TBPTTStateMLN.isEmpty());
  assertTrue(l0TBPTTStateTBPTT.size() == 2);
  assertTrue(l1TBPTTStateMLN.isEmpty());
  assertTrue(l1TBPTTStateTBPTT.size() == 2);
  INDArray tbpttActL0=l0TBPTTStateTBPTT.get(GravesLSTM.STATE_KEY_PREV_ACTIVATION);
  INDArray tbpttActL1=l1TBPTTStateTBPTT.get(GravesLSTM.STATE_KEY_PREV_ACTIVATION);
  List<INDArray> activations=mln.feedForward(inputData,true);
  INDArray l0Act=activations.get(1);
  INDArray l1Act=activations.get(2);
  INDArray expL0Act=l0Act.tensorAlongDimension(timeSeriesLength - 1,1,0);
  INDArray expL1Act=l1Act.tensorAlongDimension(timeSeriesLength - 1,1,0);
  assertEquals(tbpttActL0,expL0Act);
  assertEquals(tbpttActL1,expL1Act);
}
