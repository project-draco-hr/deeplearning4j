{
  int timeSeriesLength=12;
  int miniBatchSize=7;
  int nIn=5;
  int nOut=4;
  int nTimeSlices=20;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).list(3).layer(0,new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(nIn).nOut(7).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).layer(1,new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(7).nOut(8).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).layer(2,new RnnOutputLayer.Builder(LossFunction.MCXENT).weightInit(WeightInit.DISTRIBUTION).nIn(8).nOut(nOut).activation("softmax").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).pretrain(false).backprop(true).backpropType(BackpropType.TruncatedBPTT).tBPTTBackwardLength(timeSeriesLength).tBPTTForwardLength(timeSeriesLength).build();
  Nd4j.getRandom().setSeed(12345);
  MultiLayerNetwork mln=new MultiLayerNetwork(conf);
  mln.init();
  INDArray inputLong=Nd4j.rand(new int[]{miniBatchSize,nIn,nTimeSlices * timeSeriesLength});
  INDArray labelsLong=Nd4j.rand(new int[]{miniBatchSize,nOut,nTimeSlices * timeSeriesLength});
  mln.fit(inputLong,labelsLong);
}
