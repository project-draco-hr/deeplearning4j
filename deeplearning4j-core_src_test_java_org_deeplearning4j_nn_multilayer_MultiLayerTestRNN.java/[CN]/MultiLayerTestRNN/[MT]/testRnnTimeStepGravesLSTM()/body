{
  Nd4j.getRandom().setSeed(12345);
  int timeSeriesLength=12;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).list(4).layer(0,new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(5).nOut(7).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).layer(1,new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(7).nOut(8).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).layer(2,new DenseLayer.Builder().nIn(8).nOut(9).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).layer(3,new RnnOutputLayer.Builder(LossFunction.MCXENT).weightInit(WeightInit.DISTRIBUTION).nIn(9).nOut(4).activation("softmax").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).inputPreProcessor(2,new RnnToFeedForwardPreProcessor()).inputPreProcessor(3,new FeedForwardToRnnPreProcessor()).build();
  MultiLayerNetwork mln=new MultiLayerNetwork(conf);
  INDArray input=Nd4j.rand(new int[]{3,5,timeSeriesLength});
  List<INDArray> allOutputActivations=mln.feedForward(input,true);
  INDArray fullOutL0=allOutputActivations.get(1);
  INDArray fullOutL1=allOutputActivations.get(2);
  INDArray fullOutL3=allOutputActivations.get(4);
  int[] inputLengths={1,2,3,4,6,12};
  for (int i=0; i < inputLengths.length; i++) {
    int inLength=inputLengths[i];
    int nSteps=timeSeriesLength / inLength;
    mln.rnnClearPreviousState();
    mln.setInputMiniBatchSize(1);
    for (int j=0; j < nSteps; j++) {
      int startTimeRange=j * inLength;
      int endTimeRange=startTimeRange + inLength;
      INDArray inputSubset;
      if (inLength == 1) {
        int[] sizes=new int[]{input.size(0),input.size(1),1};
        inputSubset=Nd4j.create(sizes);
        inputSubset.tensorAlongDimension(0,1,0).assign(input.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.point(startTimeRange)));
      }
 else {
        inputSubset=input.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(startTimeRange,endTimeRange));
      }
      if (inLength > 1)       assertTrue(inputSubset.size(2) == inLength);
      INDArray out=mln.rnnTimeStep(inputSubset);
      INDArray expOutSubset;
      if (inLength == 1) {
        int[] sizes=new int[]{fullOutL3.size(0),fullOutL3.size(1),1};
        expOutSubset=Nd4j.create(sizes);
        expOutSubset.tensorAlongDimension(0,1,0).assign(fullOutL3.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.point(startTimeRange)));
      }
 else {
        expOutSubset=fullOutL3.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(startTimeRange,endTimeRange));
      }
      assertTrue(out.equals(expOutSubset));
      Map<String,INDArray> currL0State=mln.rnnGetPreviousState(0);
      Map<String,INDArray> currL1State=mln.rnnGetPreviousState(1);
      INDArray lastActL0=currL0State.get(GravesLSTM.STATE_KEY_PREV_ACTIVATION);
      INDArray lastActL1=currL1State.get(GravesLSTM.STATE_KEY_PREV_ACTIVATION);
      INDArray expLastActL0=fullOutL0.tensorAlongDimension(endTimeRange - 1,1,0);
      INDArray expLastActL1=fullOutL1.tensorAlongDimension(endTimeRange - 1,1,0);
      assertTrue(lastActL0.equals(expLastActL0));
      assertTrue(lastActL1.equals(expLastActL1));
    }
  }
}
