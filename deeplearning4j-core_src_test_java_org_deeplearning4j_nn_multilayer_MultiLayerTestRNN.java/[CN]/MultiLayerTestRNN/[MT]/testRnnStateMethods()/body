{
  Nd4j.getRandom().setSeed(12345);
  int timeSeriesLength=6;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().list().layer(0,new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(5).nOut(7).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).layer(1,new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(7).nOut(8).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).layer(2,new RnnOutputLayer.Builder(LossFunction.MCXENT).weightInit(WeightInit.DISTRIBUTION).nIn(8).nOut(4).activation("softmax").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build()).build();
  MultiLayerNetwork mln=new MultiLayerNetwork(conf);
  INDArray input=Nd4j.rand(new int[]{3,5,timeSeriesLength});
  List<INDArray> allOutputActivations=mln.feedForward(input,true);
  INDArray outAct=allOutputActivations.get(3);
  INDArray outRnnTimeStep=mln.rnnTimeStep(input);
  assertTrue(outAct.equals(outRnnTimeStep));
  Map<String,INDArray> currStateL0=mln.rnnGetPreviousState(0);
  Map<String,INDArray> currStateL1=mln.rnnGetPreviousState(1);
  assertTrue(currStateL0.size() == 2);
  assertTrue(currStateL1.size() == 2);
  INDArray lastActL0=currStateL0.get(GravesLSTM.STATE_KEY_PREV_ACTIVATION);
  INDArray lastMemL0=currStateL0.get(GravesLSTM.STATE_KEY_PREV_MEMCELL);
  assertTrue(lastActL0 != null && lastMemL0 != null);
  INDArray lastActL1=currStateL1.get(GravesLSTM.STATE_KEY_PREV_ACTIVATION);
  INDArray lastMemL1=currStateL1.get(GravesLSTM.STATE_KEY_PREV_MEMCELL);
  assertTrue(lastActL1 != null && lastMemL1 != null);
  INDArray expectedLastActL0=allOutputActivations.get(1).tensorAlongDimension(timeSeriesLength - 1,1,0);
  assertTrue(expectedLastActL0.equals(lastActL0));
  INDArray expectedLastActL1=allOutputActivations.get(2).tensorAlongDimension(timeSeriesLength - 1,1,0);
  assertTrue(expectedLastActL1.equals(lastActL1));
  mln.rnnClearPreviousState();
  assertTrue(mln.rnnGetPreviousState(0).isEmpty());
  assertTrue(mln.rnnGetPreviousState(1).isEmpty());
  mln.rnnSetPreviousState(0,currStateL0);
  assertTrue(mln.rnnGetPreviousState(0).size() == 2);
  mln.rnnSetPreviousState(1,currStateL1);
  assertTrue(mln.rnnGetPreviousState(1).size() == 2);
}
