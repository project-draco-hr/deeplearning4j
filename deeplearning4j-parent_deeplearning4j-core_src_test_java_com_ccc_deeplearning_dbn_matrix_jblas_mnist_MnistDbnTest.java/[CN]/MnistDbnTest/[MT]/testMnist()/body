{
  MnistDataSetIterator fetcher=new MnistDataSetIterator(300,300);
  DataSet first=fetcher.next();
  int numIns=first.getFirst().columns;
  int numLabels=first.getSecond().columns;
  int[] layerSizes={1000,500,250};
  double lr=0.001;
  DBN dbn=new DBN.Builder().numberOfInputs(numIns).renderWeights(2000).withMomentum(0).useRegularization(false).numberOfOutPuts(numLabels).withRng(new MersenneTwister(123)).hiddenLayerSizes(layerSizes).build();
  do {
    dbn.pretrain(first.getFirst(),1,lr,2000);
    dbn.finetune(first.getSecond(),lr,2000);
    DoubleMatrix predicted=dbn.predict(first.getFirst());
    log.info("Predicting\n " + first.getSecond().toString().replaceAll(";","\n"));
    Evaluation eval=new Evaluation();
    eval.eval(first.getSecond(),predicted);
    log.info(eval.stats());
    if (fetcher.hasNext())     first=fetcher.next();
  }
 while (fetcher.hasNext());
}
