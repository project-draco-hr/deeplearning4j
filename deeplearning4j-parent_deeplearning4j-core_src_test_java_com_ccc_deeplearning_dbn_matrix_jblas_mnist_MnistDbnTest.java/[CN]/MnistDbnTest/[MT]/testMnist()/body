{
  MnistDataSetIterator fetcher=new MnistDataSetIterator(4,4);
  DataSet first=fetcher.next();
  int numIns=first.getFirst().columns;
  int numLabels=first.getSecond().columns;
  int[] layerSizes={400,400,400};
  double lr=0.01;
  DBN dbn=new DBN.Builder().numberOfInputs(numIns).withFanIn(0.022).renderWeights(100).numberOfOutPuts(numLabels).withRng(new MersenneTwister(123)).hiddenLayerSizes(layerSizes).build();
  do {
    dbn.pretrain(first.getFirst(),1,lr,2000);
    dbn.finetune(first.getSecond(),lr,2000);
    RBM r=(RBM)dbn.layers[0];
    DoubleMatrix reconstruct=r.reconstruct(first.getFirst());
    for (int j=0; j < first.numExamples(); j++) {
      DoubleMatrix draw1=first.get(j).getFirst().mul(255);
      DoubleMatrix reconstructed2=reconstruct.getRow(j);
      DoubleMatrix draw2=MatrixUtil.binomial(reconstructed2,1,new MersenneTwister(123)).mul(255);
      DrawMnistGreyScale d=new DrawMnistGreyScale(draw1);
      d.title="REAL";
      d.draw();
      DrawMnistGreyScale d2=new DrawMnistGreyScale(draw2,100,100);
      d2.title="TEST";
      d2.draw();
      Thread.sleep(1000);
      d.frame.dispose();
      d2.frame.dispose();
    }
    DoubleMatrix predicted=dbn.predict(first.getFirst());
    Evaluation eval=new Evaluation();
    eval.eval(first.getSecond(),predicted);
    log.info(eval.stats());
    if (fetcher.hasNext())     first=fetcher.next();
  }
 while (fetcher.hasNext());
}
