{
  ClassPathResource resource=new ClassPathResource("big/raw_sentences.txt");
  File file=resource.getFile();
  BasicLineIterator underlyingIterator=new BasicLineIterator(file);
  TokenizerFactory t=new DefaultTokenizerFactory();
  t.setTokenPreProcessor(new CommonPreprocessor());
  SentenceTransformer transformer=new SentenceTransformer.Builder().iterator(underlyingIterator).tokenizerFactory(t).build();
  AbstractSequenceIterator<VocabWord> sequenceIterator=new AbstractSequenceIterator.Builder<VocabWord>(transformer).build();
  SequenceVectors<VocabWord> vectors=new SequenceVectors.Builder<VocabWord>(new VectorsConfiguration()).minWordFrequency(5).iterate(sequenceIterator).batchSize(250).iterations(1).epochs(3).elementsLearningAlgorithm(new GloVe<VocabWord>()).resetModel(true).trainElementsRepresentation(true).build();
  vectors.fit();
  double sim=vectors.similarity("day","night");
  logger.info("Day/night similarity: " + sim);
  Collection<String> labels=vectors.wordsNearest("day",10);
  logger.info("Nearest labels to 'day': " + labels);
  assertTrue(sim > 0.6d);
}
