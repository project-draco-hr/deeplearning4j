{
  List<Integer> is=new ArrayList<>();
  List<DoubleMatrix> xs=new ArrayList<>();
  DoubleMatrix r=network.getBackPropRGradient(x0).subi(b);
  DoubleMatrix y=r.div(preCon);
  double deltaNew=r.mul(y).sum();
  DoubleMatrix p=y.neg();
  DoubleMatrix x=x0;
  for (int iterationCount=0; iterationCount < numIterations; iterationCount++) {
    if (MatrixUtil.isNaN(p)) {
      log.warn("P is NaN breaking");
      break;
    }
    DoubleMatrix Ap=network.getBackPropRGradient(p);
    double pAp=Ap.mul(p).sum();
    if (pAp < 0) {
      log.info("Negative slope: " + pAp + " breaking");
    }
    double val=0.5 * SimpleBlas.dot(b.neg().add(r).transpose(),x);
    log.info("Iteration on conjugate gradient " + iterationCount + " with value "+ val);
    double alpha=deltaNew / pAp;
    x.addi(p.mul(alpha));
    DoubleMatrix rNew=r.add(Ap.mul(alpha));
    DoubleMatrix yNew=rNew.div(preCon);
    double deltaOld=deltaNew;
    deltaNew=rNew.mul(yNew).sum();
    double beta=deltaNew / deltaOld;
    p=yNew.neg().add(p.mul(beta));
    r=rNew;
    is.add(iterationCount);
    xs.add(x.dup());
  }
  return new Pair<>(is,xs);
}
