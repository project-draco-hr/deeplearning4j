{
  myName=Thread.currentThread().getName();
  if (converged)   return true;
  Triple<DoubleMatrix,List<DoubleMatrix>,DoubleMatrix> cg=runConjugateGradient(numIterations);
  Pair<DoubleMatrix,Double> cgBackTrack=cgBackTrack(cg.getFirst(),cg.getSecond(),network.getInput(),network.getLabels());
  double rho=network.reductionRatio(cgBackTrack.getFirst(),network.score(),cgBackTrack.getSecond(),xi);
  VectorizedBackTrackLineSearch l=new VectorizedBackTrackLineSearch(optimizable);
  double step=l.optimize(cg.getFirst(),numIterations,rho);
  network.dampingUpdate(rho,boost,decrease);
  xi.addi(cgBackTrack.getFirst().mul(step * network.getLearningRateUpdate()));
  return true;
}
