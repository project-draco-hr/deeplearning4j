{
  Nd4j.ENFORCE_NUMERICAL_STABILITY=true;
  final int numRows=28;
  final int numColumns=28;
  int nChannels=1;
  int outputNum=10;
  int iterations=10;
  int seed=123;
  MultiLayerConfiguration.Builder conf=new NeuralNetConfiguration.Builder().seed(seed).iterations(iterations).optimizationAlgo(OptimizationAlgorithm.LINE_GRADIENT_DESCENT).list(3).layer(0,new ConvolutionLayer.Builder(new int[]{10,10}).nIn(nChannels).nOut(6).build()).layer(1,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX,new int[]{2,2}).weightInit(WeightInit.XAVIER).activation("relu").build()).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nIn(150).nOut(outputNum).weightInit(WeightInit.XAVIER).activation("softmax").build()).backprop(backprop).pretrain(pretrain);
  new ConvolutionLayerSetup(conf,numRows,numColumns,1);
  MultiLayerNetwork model=new MultiLayerNetwork(conf.build());
  model.init();
  return model;
}
