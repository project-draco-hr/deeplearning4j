{
  Layer layer=getContainedConfig();
  INDArray input=getContainedData();
  int inputWidth=input.shape()[0];
  int featureMapWidth=(inputWidth + layer.conf().getPadding()[0] * 2 - layer.conf().getKernelSize()[0]) / layer.conf().getStride()[0] + 1;
  INDArray expectedOutput=Nd4j.create(new double[]{1,1,1,1,3,3,3,3,1,1,1,1,3,3,3,3,1,1,1,1,3,3,3,3,1,1,1,1,3,3,3,3,2,2,2,2,4,4,4,4,2,2,2,2,4,4,4,4,2,2,2,2,4,4,4,4,2,2,2,2,4,4,4,4},new int[]{1,1,2,2,4,4});
  layer.setInput(input);
  org.deeplearning4j.nn.layers.convolution.ConvolutionLayer layer2=(org.deeplearning4j.nn.layers.convolution.ConvolutionLayer)layer;
  INDArray featureMaps=layer2.createFeatureMapColumn();
  assertEquals(featureMapWidth,featureMaps.shape()[4]);
  assertEquals(expectedOutput.shape(),featureMaps.shape());
  assertEquals(expectedOutput,featureMaps);
}
