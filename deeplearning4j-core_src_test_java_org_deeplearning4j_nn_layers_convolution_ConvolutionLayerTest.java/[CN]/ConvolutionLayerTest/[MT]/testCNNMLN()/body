{
  Nd4j.ENFORCE_NUMERICAL_STABILITY=true;
  final int numRows=28;
  final int numColumns=28;
  int nChannels=1;
  int outputNum=10;
  int numSamples=10;
  int batchSize=10;
  int iterations=10;
  int seed=123;
  int listenerFreq=iterations / 5;
  DataSetIterator mnistIter=new MnistDataSetIterator(batchSize,numSamples,true);
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(seed).batchSize(batchSize).iterations(iterations).weightInit(WeightInit.XAVIER).activationFunction("relu").optimizationAlgo(OptimizationAlgorithm.LINE_GRADIENT_DESCENT).list(3).layer(0,new ConvolutionLayer.Builder(new int[]{10,10}).nIn(nChannels).nOut(6).build()).layer(1,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX,new int[]{2,2}).build()).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nIn(150).nOut(outputNum).activation("softmax").build()).inputPreProcessor(0,new FeedForwardToCnnPreProcessor(numRows,numColumns,1)).inputPreProcessor(2,new CnnToFeedForwardPreProcessor()).backprop(true).pretrain(false).build();
  MultiLayerNetwork model=new MultiLayerNetwork(conf);
  model.init();
  model.setListeners(Arrays.asList((IterationListener)new ScoreIterationListener(listenerFreq)));
  model.fit(mnistIter);
  DataSet data=mnistIter.next();
}
