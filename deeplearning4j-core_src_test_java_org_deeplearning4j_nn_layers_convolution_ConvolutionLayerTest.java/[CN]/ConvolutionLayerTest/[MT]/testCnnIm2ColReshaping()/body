{
  INDArray input=getInput();
  INDArray col=Nd4j.create(new int[]{miniBatch,outH,outW,inDepth,kH,kW},'c');
  INDArray col2=col.permute(0,3,4,5,1,2);
  Convolution.im2col(input,kH,kW,strides[0],strides[1],pad[0],pad[1],false,col2);
  INDArray reshapedCol=Shape.newShapeNoCopy(col,new int[]{miniBatch * outH * outW,inDepth * kH * kW},false);
  INDArray exp2d=Nd4j.create(outW * outH * miniBatch,inDepth * kH * kW);
  exp2d.putRow(0,Nd4j.create(new double[]{0,1,3,4,9,10,12,13}));
  exp2d.putRow(1,Nd4j.create(new double[]{1,2,4,5,10,11,13,14}));
  exp2d.putRow(2,Nd4j.create(new double[]{3,4,6,7,12,13,15,16}));
  exp2d.putRow(3,Nd4j.create(new double[]{4,5,7,8,13,14,16,17}));
  exp2d.putRow(4,Nd4j.create(new double[]{18,19,21,22,27,28,30,31}));
  exp2d.putRow(5,Nd4j.create(new double[]{19,20,22,23,28,29,31,32}));
  exp2d.putRow(6,Nd4j.create(new double[]{21,22,24,25,30,31,33,34}));
  exp2d.putRow(7,Nd4j.create(new double[]{22,23,25,26,31,32,34,35}));
  assertEquals(exp2d,reshapedCol);
  INDArray colBackprop=Nd4j.create(new int[]{miniBatch,outH,outW,inDepth,kH,kW},'c');
  INDArray colBackprop2=colBackprop.permute(0,3,4,5,1,2);
  Convolution.im2col(input,kH,kW,strides[0],strides[1],pad[0],pad[1],false,colBackprop2);
  INDArray reshapedColBackprop=Shape.newShapeNoCopy(colBackprop,new int[]{miniBatch * outH * outW,inDepth * kH * kW},false);
  INDArray exp2dv2=Nd4j.create(outW * outH * miniBatch,inDepth * kH * kW);
  exp2dv2.putRow(0,Nd4j.create(new double[]{0,1,3,4,9,10,12,13}));
  exp2dv2.putRow(1,Nd4j.create(new double[]{1,2,4,5,10,11,13,14}));
  exp2dv2.putRow(2,Nd4j.create(new double[]{3,4,6,7,12,13,15,16}));
  exp2dv2.putRow(3,Nd4j.create(new double[]{4,5,7,8,13,14,16,17}));
  exp2dv2.putRow(4,Nd4j.create(new double[]{18,19,21,22,27,28,30,31}));
  exp2dv2.putRow(5,Nd4j.create(new double[]{19,20,22,23,28,29,31,32}));
  exp2dv2.putRow(6,Nd4j.create(new double[]{21,22,24,25,30,31,33,34}));
  exp2dv2.putRow(7,Nd4j.create(new double[]{22,23,25,26,31,32,34,35}));
  assertEquals(exp2dv2,reshapedColBackprop);
}
