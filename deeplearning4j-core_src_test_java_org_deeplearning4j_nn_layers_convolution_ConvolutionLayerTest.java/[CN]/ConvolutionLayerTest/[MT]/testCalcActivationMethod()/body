{
  Layer layer=getContainedConfig();
  INDArray input=getContainedData();
  int inputWidth=input.shape()[0];
  int featureMapWidth=(inputWidth + layer.conf().getPadding()[0] * 2 - layer.conf().getKernelSize()[0]) / layer.conf().getStride()[0] + 1;
  INDArray W=Nd4j.create(new double[]{0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5},new int[]{2,1,2,2});
  INDArray b=Nd4j.create(new double[]{1,1});
  INDArray featureMaps=Nd4j.create(new double[]{1,1,1,1,3,3,3,3,1,1,1,1,3,3,3,3,1,1,1,1,3,3,3,3,1,1,1,1,3,3,3,3,2,2,2,2,4,4,4,4,2,2,2,2,4,4,4,4,2,2,2,2,4,4,4,4,2,2,2,2,4,4,4,4},new int[]{1,1,2,2,4,4});
  INDArray expectedOutput=Nd4j.create(new double[]{4.,4.,4.,4.,4.,4.,4.,4.,8.,8.,8.,8.,8.,8.,8.,8.,4.,4.,4.,4.,4.,4.,4.,4.,8.,8.,8.,8.,8.,8.,8.,8.},new int[]{1,4,4,2});
  org.deeplearning4j.nn.layers.convolution.ConvolutionLayer layer2=(org.deeplearning4j.nn.layers.convolution.ConvolutionLayer)layer;
  INDArray activation=layer2.calculateActivation(featureMaps,W,b);
  assertEquals(expectedOutput.shape(),activation.shape());
  assertEquals(expectedOutput,activation);
}
