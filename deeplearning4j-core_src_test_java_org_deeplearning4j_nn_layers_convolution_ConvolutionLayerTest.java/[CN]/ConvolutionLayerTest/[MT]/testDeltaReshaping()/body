{
  int miniBatch=3;
  int depth=2;
  int outW=3;
  int outH=3;
  INDArray deltaOrig=Nd4j.create(new int[]{miniBatch,depth,outH,outW},'c');
  deltaOrig.put(new INDArrayIndex[]{NDArrayIndex.point(0),NDArrayIndex.point(0),NDArrayIndex.all(),NDArrayIndex.all()},Nd4j.create(new double[][]{{0,1,2},{3,4,5},{6,7,8}}));
  deltaOrig.put(new INDArrayIndex[]{NDArrayIndex.point(0),NDArrayIndex.point(1),NDArrayIndex.all(),NDArrayIndex.all()},Nd4j.create(new double[][]{{9,10,11},{12,13,14},{15,16,17}}));
  deltaOrig.put(new INDArrayIndex[]{NDArrayIndex.point(1),NDArrayIndex.point(0),NDArrayIndex.all(),NDArrayIndex.all()},Nd4j.create(new double[][]{{18,19,20},{21,22,23},{24,25,26}}));
  deltaOrig.put(new INDArrayIndex[]{NDArrayIndex.point(1),NDArrayIndex.point(1),NDArrayIndex.all(),NDArrayIndex.all()},Nd4j.create(new double[][]{{27,28,29},{30,31,32},{33,34,35}}));
  deltaOrig.put(new INDArrayIndex[]{NDArrayIndex.point(2),NDArrayIndex.point(0),NDArrayIndex.all(),NDArrayIndex.all()},Nd4j.create(new double[][]{{36,37,38},{39,40,41},{42,43,44}}));
  deltaOrig.put(new INDArrayIndex[]{NDArrayIndex.point(2),NDArrayIndex.point(1),NDArrayIndex.all(),NDArrayIndex.all()},Nd4j.create(new double[][]{{45,46,47},{48,49,50},{51,52,53}}));
  INDArray deltaPermute=deltaOrig.permute(1,0,2,3).dup('c');
  INDArray delta2d=Shape.newShapeNoCopy(deltaPermute,new int[]{depth,miniBatch * outW * outH},false);
  INDArray exp=Nd4j.create(new double[][]{{0,1,2,3,4,5,6,7,8,18,19,20,21,22,23,24,25,26,36,37,38,39,40,41,42,43,44},{9,10,11,12,13,14,15,16,17,27,28,29,30,31,32,33,34,35,45,46,47,48,49,50,51,52,53}});
  assertEquals(exp,delta2d);
}
