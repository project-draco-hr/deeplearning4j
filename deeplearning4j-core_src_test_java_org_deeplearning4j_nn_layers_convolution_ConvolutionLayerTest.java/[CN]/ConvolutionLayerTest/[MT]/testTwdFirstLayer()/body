{
  MultiLayerConfiguration.Builder builder=new NeuralNetConfiguration.Builder().seed(123).iterations(5).batchSize(100).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).constrainGradientToUnitNorm(true).l2(2e-4).regularization(true).useDropConnect(true).list(4).layer(0,new ConvolutionLayer.Builder(8,8).stride(4,4).nOut(16).dropOut(0.5).activation("relu").weightInit(WeightInit.XAVIER).build()).layer(1,new ConvolutionLayer.Builder(4,4).stride(2,2).nOut(32).dropOut(0.5).activation("relu").weightInit(WeightInit.XAVIER).build()).layer(2,new DenseLayer.Builder().nOut(256).activation("relu").weightInit(WeightInit.XAVIER).dropOut(0.5).build()).layer(3,new OutputLayer.Builder(LossFunctions.LossFunction.SQUARED_LOSS).nOut(10).weightInit(WeightInit.XAVIER).activation("softmax").build()).backprop(true).pretrain(false);
  new ConvolutionLayerSetup(builder,28,28,1);
  DataSetIterator iter=new MnistDataSetIterator(10,10);
  MultiLayerConfiguration conf=builder.build();
  MultiLayerNetwork network=new MultiLayerNetwork(conf);
  network.init();
  network.fit(iter.next());
}
