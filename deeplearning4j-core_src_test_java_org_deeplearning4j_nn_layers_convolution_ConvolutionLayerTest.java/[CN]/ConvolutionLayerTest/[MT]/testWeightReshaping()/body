{
  int depthOut=2;
  int depthIn=3;
  int kH=2;
  int kW=2;
  INDArray weightOrig=Nd4j.create(new int[]{depthOut,depthIn,kH,kW},'c');
  weightOrig.put(new INDArrayIndex[]{NDArrayIndex.point(0),NDArrayIndex.point(0),NDArrayIndex.all(),NDArrayIndex.all()},Nd4j.create(new double[][]{{0,1},{2,3}}));
  weightOrig.put(new INDArrayIndex[]{NDArrayIndex.point(0),NDArrayIndex.point(1),NDArrayIndex.all(),NDArrayIndex.all()},Nd4j.create(new double[][]{{4,5},{6,7}}));
  weightOrig.put(new INDArrayIndex[]{NDArrayIndex.point(0),NDArrayIndex.point(2),NDArrayIndex.all(),NDArrayIndex.all()},Nd4j.create(new double[][]{{8,9},{10,11}}));
  weightOrig.put(new INDArrayIndex[]{NDArrayIndex.point(1),NDArrayIndex.point(0),NDArrayIndex.all(),NDArrayIndex.all()},Nd4j.create(new double[][]{{12,13},{14,15}}));
  weightOrig.put(new INDArrayIndex[]{NDArrayIndex.point(1),NDArrayIndex.point(1),NDArrayIndex.all(),NDArrayIndex.all()},Nd4j.create(new double[][]{{16,17},{18,19}}));
  weightOrig.put(new INDArrayIndex[]{NDArrayIndex.point(1),NDArrayIndex.point(2),NDArrayIndex.all(),NDArrayIndex.all()},Nd4j.create(new double[][]{{20,21},{22,23}}));
  INDArray weightPermute=weightOrig.permute(3,2,1,0);
  INDArray w2d=Shape.newShapeNoCopy(weightPermute,new int[]{depthIn * kH * kW,depthOut},true);
  assertNotNull(w2d);
  INDArray wExp=Nd4j.create(new double[][]{{0,12},{1,13},{2,14},{3,15},{4,16},{5,17},{6,18},{7,19},{8,20},{9,21},{10,22},{11,23}});
  assertEquals(wExp,w2d);
}
