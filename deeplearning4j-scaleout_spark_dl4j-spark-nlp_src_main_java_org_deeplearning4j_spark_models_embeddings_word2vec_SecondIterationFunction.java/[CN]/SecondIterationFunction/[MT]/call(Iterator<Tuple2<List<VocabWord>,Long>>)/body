{
  this.vocabHolder=VocabHolder.getInstance();
  this.vocabHolder.setSeed(seed,vectorLength);
  if (negative > 0) {
    negativeHolder=NegativeHolder.getInstance();
    negativeHolder.initHolder(vocab,expTable,this.vectorLength);
  }
  while (pairIter.hasNext()) {
    List<Pair<List<VocabWord>,Long>> batch=new ArrayList<>();
    while (pairIter.hasNext() && batch.size() < batchSize) {
      Tuple2<List<VocabWord>,Long> pair=pairIter.next();
      List<VocabWord> vocabWordsList=pair._1();
      Long sentenceCumSumCount=pair._2();
      batch.add(Pair.of(vocabWordsList,sentenceCumSumCount));
    }
    for (int i=0; i < iterations; i++) {
      for (      Pair<List<VocabWord>,Long> pair : batch) {
        List<VocabWord> vocabWordsList=pair.getKey();
        Long sentenceCumSumCount=pair.getValue();
        double currentSentenceAlpha=Math.max(minAlpha,alpha - (alpha - minAlpha) * (sentenceCumSumCount / (double)totalWordCount));
        trainSentence(vocabWordsList,currentSentenceAlpha);
      }
    }
  }
  return vocabHolder.getSplit(vocab);
}
