{
  if (w1 == null || w2 == null || w2.getIndex() < 0 || w2.getIndex() == w1.getIndex())   return;
  final int currentWordIndex=w2.getIndex();
  INDArray neu1e=Nd4j.create(vectorLength);
  INDArray l1=vocabHolder.getSyn0Vector(currentWordIndex);
  for (int i=0; i < w1.getCodeLength(); i++) {
    int code=w1.getCodes().get(i);
    int point=w1.getPoints().get(i);
    if (point < 0)     throw new IllegalStateException("Illegal point " + point);
    INDArray syn1=vocabHolder.getSyn1Vector(point);
    double dot=Nd4j.getBlasWrapper().level1().dot(vectorLength,1.0,l1,syn1);
    if (dot < -maxExp || dot >= maxExp)     continue;
    int idx=(int)((dot + maxExp) * ((double)expTable.length / maxExp / 2.0));
    if (idx > expTable.length)     continue;
    double f=expTable[idx];
    double g=(1 - code - f) * (useAdaGrad ? w1.getGradient(i,currentSentenceAlpha,currentSentenceAlpha) : currentSentenceAlpha);
    Nd4j.getBlasWrapper().level1().axpy(vectorLength,g,syn1,neu1e);
    Nd4j.getBlasWrapper().level1().axpy(vectorLength,g,l1,syn1);
  }
  int target=w1.getIndex();
  int label;
  if (negative > 0)   for (int d=0; d < negative + 1; d++) {
    if (d == 0)     label=1;
 else {
      nextRandom.set(Math.abs(nextRandom.get() * 25214903917L + 11));
      int idx=Math.abs((int)(nextRandom.get() >> 16) % negativeHolder.getTable().length());
      target=negativeHolder.getTable().getInt(idx);
      if (target <= 0)       target=(int)nextRandom.get() % (vocab.numWords() - 1) + 1;
      if (target == w1.getIndex())       continue;
      label=0;
    }
    if (target >= negativeHolder.getSyn1Neg().rows() || target < 0)     continue;
    double f=Nd4j.getBlasWrapper().dot(l1,negativeHolder.getSyn1Neg().slice(target));
    double g;
    if (f > maxExp)     g=useAdaGrad ? w1.getGradient(target,(label - 1),alpha) : (label - 1) * alpha;
 else     if (f < -maxExp)     g=label * (useAdaGrad ? w1.getGradient(target,alpha,alpha) : alpha);
 else {
      int idx=(int)((f + maxExp) * (expTable.length / maxExp / 2));
      if (idx >= expTable.length)       continue;
      g=useAdaGrad ? w1.getGradient(target,label - expTable[idx],alpha) : (label - expTable[idx]) * alpha;
    }
    Nd4j.getBlasWrapper().level1().axpy(vectorLength,g,negativeHolder.getSyn1Neg().slice(target),neu1e);
    Nd4j.getBlasWrapper().level1().axpy(vectorLength,g,l1,negativeHolder.getSyn1Neg().slice(target));
  }
  Nd4j.getBlasWrapper().level1().axpy(vectorLength,1.0f,neu1e,l1);
}
