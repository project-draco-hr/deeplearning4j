{
  int split=conf.getSplit();
  final List<List<Pair<DoubleMatrix,DoubleMatrix>>> splitList=Lists.partition(pairs,split);
  partition=splitList.size();
  log.info("Found partition of size " + partition);
  for (int i=0; i < splitList.size(); i++) {
    final int j=i;
    Futures.future(new Callable<Void>(){
      @Override public Void call() throws Exception {
        log.info("Sending off work for batch " + j);
        mediator.tell(new DistributedPubSubMediator.Publish(BROADCAST,new ArrayList<>(splitList.get(j))),getSelf());
        return null;
      }
    }
,context().system().dispatcher());
  }
}
