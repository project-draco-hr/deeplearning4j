{
  int nVertices=20;
  Graph<String,String> graph=generateRandomGraph(nVertices,8);
  int vectorSize=5;
  int windowSize=2;
  DeepWalk<String,String> deepWalk=new DeepWalk.Builder<String,String>().learningRate(0.01).vectorSize(vectorSize).windowSize(windowSize).learningRate(0.01).build();
  deepWalk.initialize(graph);
  deepWalk.fit(graph,10);
  int topN=5;
  int nearestTo=4;
  int[] nearest=deepWalk.verticesNearest(nearestTo,topN);
  double[] cosSim=new double[topN];
  double minSimNearest=1;
  for (int i=0; i < topN; i++) {
    cosSim[i]=deepWalk.similarity(nearest[i],nearestTo);
    minSimNearest=Math.min(minSimNearest,cosSim[i]);
    if (i > 0)     assertTrue(cosSim[i] <= cosSim[i - 1]);
  }
  for (int i=0; i < nVertices; i++) {
    if (i == nearestTo)     continue;
    boolean skip=false;
    for (int j=0; j < nearest.length; j++) {
      if (i == nearest[j]) {
        skip=true;
        continue;
      }
    }
    if (skip)     continue;
    double sim=deepWalk.similarity(i,nearestTo);
    System.out.println(i + "\t" + nearestTo+ "\t"+ sim);
    assertTrue(sim <= minSimNearest);
  }
}
