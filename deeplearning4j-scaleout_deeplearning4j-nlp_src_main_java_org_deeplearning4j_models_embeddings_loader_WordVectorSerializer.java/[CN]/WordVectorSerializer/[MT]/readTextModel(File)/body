{
  InMemoryLookupTable lookupTable;
  VocabCache cache;
  INDArray syn0;
  BufferedReader reader=new BufferedReader(new FileReader(modelFile));
  String line=reader.readLine();
  String[] initial=line.split(" ");
  int words=Integer.parseInt(initial[0]);
  int layerSize=Integer.parseInt(initial[1]);
  syn0=Nd4j.create(words,layerSize);
  cache=new InMemoryLookupCache();
  int currLine=0;
  while ((line=reader.readLine()) != null) {
    String[] split=line.split(" ");
    String word=split[0];
    if (word.isEmpty()) {
      continue;
    }
    float[] vector=new float[split.length - 1];
    for (int i=1; i < split.length; i++) {
      vector[i]=Float.parseFloat(split[i]);
    }
    syn0.putRow(currLine,Transforms.unitVec(Nd4j.create(vector)));
    cache.addWordToIndex(cache.numWords(),word);
    cache.addToken(new VocabWord(1,word));
    cache.putVocabWord(word);
  }
  lookupTable=(InMemoryLookupTable)new InMemoryLookupTable.Builder().cache(cache).vectorLength(layerSize).build();
  lookupTable.setSyn0(syn0);
  Word2Vec ret=new Word2Vec();
  ret.setVocab(cache);
  ret.setLookupTable(lookupTable);
  reader.close();
  return ret;
}
