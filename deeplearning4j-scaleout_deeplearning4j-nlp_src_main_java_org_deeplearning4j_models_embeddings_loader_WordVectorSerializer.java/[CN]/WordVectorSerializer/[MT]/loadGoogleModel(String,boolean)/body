{
  InMemoryLookupTable lookupTable;
  VocabCache cache;
  float[] data;
  if (binary) {
    float vector;
    int words, size;
    int count=0;
    try (BufferedInputStream bis=new BufferedInputStream(path.endsWith(".gz") ? new GZIPInputStream(new FileInputStream(path)) : new FileInputStream(path));DataInputStream dis=new DataInputStream(bis)){
      words=Integer.parseInt(readString(dis));
      size=Integer.parseInt(readString(dis));
      data=new float[words * size];
      cache=new InMemoryLookupCache(false);
      lookupTable=(InMemoryLookupTable)new InMemoryLookupTable.Builder().cache(cache).vectorLength(size).build();
      String word;
      for (int i=0; i < words; i++) {
        word=readString(dis);
        log.info("Loading " + word + " with word "+ i);
        if (word.isEmpty())         continue;
        for (int j=0; j < size; j++) {
          vector=dis.readFloat();
          data[count++]=vector;
        }
        cache.addWordToIndex(cache.numWords(),word);
        cache.addToken(new VocabWord(1,word));
        cache.putVocabWord(word);
      }
    }
     Word2Vec ret=new Word2Vec();
    INDArray weightMatrix=Nd4j.create(new FloatBuffer(data),new int[]{words,size});
    lookupTable.setSyn0(weightMatrix);
    ret.setVocab(cache);
    ret.setLookupTable(lookupTable);
    return ret;
  }
 else {
    BufferedReader reader=new BufferedReader(new FileReader(new File(path)));
    String line=reader.readLine();
    String[] initial=line.split(" ");
    int words=Integer.parseInt(initial[0]);
    int layerSize=Integer.parseInt(initial[1]);
    float[] buffer=new float[words * layerSize];
    int count=0;
    cache=new InMemoryLookupCache();
    while ((line=reader.readLine()) != null) {
      String[] split=line.split(" ");
      String word=split[0];
      if (word.isEmpty())       continue;
      for (int i=1; i < split.length; i++) {
        buffer[count++]=Float.parseFloat(split[i]);
      }
      cache.addWordToIndex(cache.numWords(),word);
      cache.addToken(new VocabWord(1,word));
      cache.putVocabWord(word);
    }
    lookupTable=(InMemoryLookupTable)new InMemoryLookupTable.Builder().cache(cache).vectorLength(layerSize).build();
    lookupTable.setSyn0(Nd4j.create(new FloatBuffer(buffer),new int[]{words,layerSize}));
    Word2Vec ret=new Word2Vec();
    ret.setVocab(cache);
    ret.setLookupTable(lookupTable);
    reader.close();
    return ret;
  }
}
