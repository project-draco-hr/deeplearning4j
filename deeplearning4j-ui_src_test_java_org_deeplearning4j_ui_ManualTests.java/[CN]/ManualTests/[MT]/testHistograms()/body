{
  final int numRows=28;
  final int numColumns=28;
  int outputNum=10;
  int numSamples=60000;
  int batchSize=100;
  int iterations=10;
  int seed=123;
  int listenerFreq=batchSize / 5;
  log.info("Load data....");
  DataSetIterator iter=new MnistDataSetIterator(batchSize,numSamples,true);
  log.info("Build model....");
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(seed).gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue).gradientNormalizationThreshold(1.0).iterations(iterations).momentum(0.5).momentumAfter(Collections.singletonMap(3,0.9)).optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).list().layer(0,new RBM.Builder().nIn(numRows * numColumns).nOut(500).weightInit(WeightInit.XAVIER).lossFunction(LossFunctions.LossFunction.RMSE_XENT).visibleUnit(RBM.VisibleUnit.BINARY).hiddenUnit(RBM.HiddenUnit.BINARY).build()).layer(1,new RBM.Builder().nIn(500).nOut(250).weightInit(WeightInit.XAVIER).lossFunction(LossFunctions.LossFunction.RMSE_XENT).visibleUnit(RBM.VisibleUnit.BINARY).hiddenUnit(RBM.HiddenUnit.BINARY).build()).layer(2,new RBM.Builder().nIn(250).nOut(200).weightInit(WeightInit.XAVIER).lossFunction(LossFunctions.LossFunction.RMSE_XENT).visibleUnit(RBM.VisibleUnit.BINARY).hiddenUnit(RBM.HiddenUnit.BINARY).build()).layer(3,new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).activation("softmax").nIn(200).nOut(outputNum).build()).pretrain(true).backprop(false).build();
  ;
  UiServer server=UiServer.getInstance();
  UiConnectionInfo connectionInfo=server.getConnectionInfo();
  connectionInfo.setSessionId("my session here");
  MultiLayerNetwork model=new MultiLayerNetwork(conf);
  model.init();
  model.setListeners(Arrays.asList((IterationListener)new ScoreIterationListener(listenerFreq),(IterationListener)new HistogramIterationListener(connectionInfo,listenerFreq),new FlowIterationListener(connectionInfo,listenerFreq)));
  log.info("Train model....");
  model.fit(iter);
  log.info("Evaluate model....");
  Evaluation eval=new Evaluation(outputNum);
  DataSetIterator testIter=new MnistDataSetIterator(100,10000);
  while (testIter.hasNext()) {
    DataSet testMnist=testIter.next();
    INDArray predict2=model.output(testMnist.getFeatureMatrix());
    eval.eval(testMnist.getLabels(),predict2);
  }
  log.info(eval.stats());
  log.info("****************Example finished********************");
}
