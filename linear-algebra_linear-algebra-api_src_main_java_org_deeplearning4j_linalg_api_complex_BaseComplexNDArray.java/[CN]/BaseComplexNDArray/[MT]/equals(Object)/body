{
  IComplexNDArray n=null;
  if (!(o instanceof IComplexNDArray))   return false;
  if (n == null)   n=(IComplexNDArray)o;
  if (isScalar() && n.isScalar()) {
    IComplexNumber c=n.getComplex(0);
    return Math.abs(getComplex(0).sub(c).realComponent().floatValue()) < 1e-6;
  }
 else   if (isVector() && n.isVector()) {
    for (int i=0; i < length; i++) {
      float curr=getComplex(i).realComponent().floatValue();
      float comp=n.getComplex(i).realComponent().floatValue();
      float currImag=getComplex(i).imaginaryComponent().floatValue();
      float compImag=n.getComplex(i).imaginaryComponent().floatValue();
      if (Math.abs(curr - comp) > 1e-6 || Math.abs(currImag - compImag) > 1e-6)       return false;
    }
    return true;
  }
  if (!Shape.shapeEquals(shape(),n.shape()))   return false;
  if (isScalar()) {
    IComplexNumber c=n.getComplex(0);
    return getComplex(0).sub(c).absoluteValue().doubleValue() < 1e-6;
  }
 else   if (isVector()) {
    for (int i=0; i < length; i++) {
      IComplexNumber curr=getComplex(i);
      IComplexNumber comp=n.getComplex(i);
      if (curr.sub(comp).absoluteValue().doubleValue() > 1e-6)       return false;
    }
    return true;
  }
  for (int i=0; i < slices(); i++) {
    if (!(slice(i).equals(n.slice(i))))     return false;
  }
  return true;
}
