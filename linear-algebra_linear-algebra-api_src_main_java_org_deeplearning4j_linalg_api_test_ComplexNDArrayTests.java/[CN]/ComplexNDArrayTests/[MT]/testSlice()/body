{
  INDArray arr=NDArrays.create(NDArrays.linspace(1,24,24).data(),new int[]{4,3,2});
  IComplexNDArray arr2=NDArrays.createComplex(arr);
  assertEquals(arr,arr2.getReal());
  INDArray firstSlice=arr.slice(0);
  INDArray firstSliceTest=arr2.slice(0).getReal();
  assertEquals(firstSlice,firstSliceTest);
  INDArray secondSlice=arr.slice(1);
  INDArray secondSliceTest=arr2.slice(1).getReal();
  assertEquals(secondSlice,secondSliceTest);
  INDArray slice0=NDArrays.create(new double[]{1,2,3,4,5,6},new int[]{3,2});
  INDArray slice2=NDArrays.create(new double[]{7,8,9,10,11,12},new int[]{3,2});
  IComplexNDArray testSliceComplex=arr2.slice(0);
  IComplexNDArray testSliceComplex2=arr2.slice(1);
  INDArray testSlice0=testSliceComplex.getReal();
  INDArray testSlice1=testSliceComplex2.getReal();
  assertEquals(slice0,testSlice0);
  assertEquals(slice2,testSlice1);
  INDArray n2=NDArrays.create(NDArrays.linspace(1,30,30).data(),new int[]{3,5,2});
  INDArray swapped=n2.swapAxes(n2.shape().length - 1,1);
  INDArray firstSlice2=swapped.slice(0).slice(0);
  IComplexNDArray testSlice=NDArrays.createComplex(firstSlice2);
  IComplexNDArray testNoOffset=NDArrays.createComplex(new double[]{1,0,3,0,5,0,7,0,9,0},new int[]{5});
  assertEquals(testSlice,testNoOffset);
}
