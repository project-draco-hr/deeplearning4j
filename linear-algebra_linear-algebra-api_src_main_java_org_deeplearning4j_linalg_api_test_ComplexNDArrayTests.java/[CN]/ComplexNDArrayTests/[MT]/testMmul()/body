{
  double[] data=NDArrays.linspace(1,10,10).data();
  IComplexNDArray n=NDArrays.createComplex((NDArrays.create(data,new int[]{10})));
  IComplexNDArray transposed=n.transpose();
  assertEquals(true,n.isRowVector());
  assertEquals(true,transposed.isColumnVector());
  IComplexNDArray innerProduct=n.mmul(transposed);
  INDArray scalar=NDArrays.scalar(385);
  assertEquals(scalar,innerProduct.getReal());
  IComplexNDArray outerProduct=transposed.mmul(n);
  assertEquals(true,Shape.shapeEquals(new int[]{10,10},outerProduct.shape()));
  IComplexNDArray vectorVector=NDArrays.createComplex(NDArrays.create(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,0,6,12,18,24,30,36,42,48,54,60,66,72,78,84,90,0,7,14,21,28,35,42,49,56,63,70,77,84,91,98,105,0,8,16,24,32,40,48,56,64,72,80,88,96,104,112,120,0,9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,0,11,22,33,44,55,66,77,88,99,110,121,132,143,154,165,0,12,24,36,48,60,72,84,96,108,120,132,144,156,168,180,0,13,26,39,52,65,78,91,104,117,130,143,156,169,182,195,0,14,28,42,56,70,84,98,112,126,140,154,168,182,196,210,0,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225},new int[]{16,16}));
  IComplexNDArray n1=NDArrays.createComplex(NDArrays.create(NDArrays.linspace(0,15,16).data(),new int[]{16}));
  IComplexNDArray k1=n1.transpose();
  IComplexNDArray testVectorVector=k1.mmul(n1);
  assertEquals(vectorVector,testVectorVector);
  double[] testVector=new double[]{55.00000000,0.00000000e+00,-26.37586651,-2.13098631e+01,12.07106781,2.58578644e+00,-9.44674873,1.75576651e+00,5.00000000,-6.00000000e+00,-0.89639702,5.89790214e+00,-2.07106781,-5.41421356e+00,4.71901226,2.83227249e+00,-5.00000000,-6.12323400e-15,4.71901226,-2.83227249e+00,-2.07106781,5.41421356e+00,-0.89639702,-5.89790214e+00,5.00000000,6.00000000e+00,-9.44674873,-1.75576651e+00,12.07106781,-2.58578644e+00,-26.37586651,2.13098631e+01};
  IComplexNDArray ndArray=NDArrays.createComplex(new double[]{1.0,0.0,2.0,0.0,3.0,0.0,4.0,0.0,5.0,0.0,6.0,0.0,6.999999999999999,0.0,8.0,0.0,9.0,0.0,10.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},new int[]{16,1});
  IComplexNDArray M=NDArrays.createComplex(new double[]{1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,0.9238795325112867,-0.3826834323650898,0.7071067811865476,-0.7071067811865475,0.38268343236508984,-0.9238795325112867,6.123233995736766E-17,-1.0,-0.3826834323650897,-0.9238795325112867,-0.7071067811865475,-0.7071067811865476,-0.9238795325112867,-0.3826834323650899,-1.0,-1.2246467991473532E-16,-0.9238795325112868,0.38268343236508967,-0.7071067811865477,0.7071067811865475,-0.38268343236509034,0.9238795325112865,-1.8369701987210297E-16,1.0,0.38268343236509,0.9238795325112866,0.7071067811865474,0.7071067811865477,0.9238795325112865,0.3826834323650904,1.0,0.0,0.7071067811865476,-0.7071067811865475,6.123233995736766E-17,-1.0,-0.7071067811865475,-0.7071067811865476,-1.0,-1.2246467991473532E-16,-0.7071067811865477,0.7071067811865475,-1.8369701987210297E-16,1.0,0.7071067811865474,0.7071067811865477,1.0,2.4492935982947064E-16,0.7071067811865477,-0.7071067811865474,3.061616997868383E-16,-1.0,-0.7071067811865467,-0.7071067811865483,-1.0,-3.67394039744206E-16,-0.7071067811865471,0.7071067811865479,-4.286263797015736E-16,1.0,0.7071067811865466,0.7071067811865485,1.0,0.0,0.38268343236508984,-0.9238795325112867,-0.7071067811865475,-0.7071067811865476,-0.9238795325112868,0.38268343236508967,-1.8369701987210297E-16,1.0,0.9238795325112865,0.3826834323650904,0.7071067811865477,-0.7071067811865474,-0.3826834323650899,-0.9238795325112867,-1.0,-3.67394039744206E-16,-0.38268343236509056,0.9238795325112864,0.7071067811865466,0.7071067811865485,0.9238795325112867,-0.3826834323650897,5.51091059616309E-16,-1.0,-0.9238795325112864,-0.3826834323650907,-0.7071067811865474,0.7071067811865477,0.38268343236508956,0.9238795325112868,1.0,0.0,6.123233995736766E-17,-1.0,-1.0,-1.2246467991473532E-16,-1.8369701987210297E-16,1.0,1.0,2.4492935982947064E-16,3.061616997868383E-16,-1.0,-1.0,-3.67394039744206E-16,-4.286263797015736E-16,1.0,1.0,4.898587196589413E-16,5.51091059616309E-16,-1.0,-1.0,-6.123233995736766E-16,-2.4499125789312946E-15,1.0,1.0,7.34788079488412E-16,-9.803364199544708E-16,-1.0,-1.0,-8.572527594031472E-16,-2.6948419387607653E-15,1.0,1.0,0.0,-0.3826834323650897,-0.9238795325112867,-0.7071067811865477,0.7071067811865475,0.9238795325112865,0.3826834323650904,3.061616997868383E-16,-1.0,-0.9238795325112867,0.38268343236508984,0.7071067811865466,0.7071067811865485,0.38268343236509067,-0.9238795325112864,-1.0,-6.123233995736766E-16,0.38268343236508956,0.9238795325112868,0.7071067811865475,-0.7071067811865476,-0.923879532511287,-0.38268343236508934,-2.6948419387607653E-15,1.0,0.9238795325112876,-0.3826834323650876,-0.7071067811865461,-0.7071067811865489,-0.3826834323650912,0.9238795325112862,1.0,0.0,-0.7071067811865475,-0.7071067811865476,-1.8369701987210297E-16,1.0,0.7071067811865477,-0.7071067811865474,-1.0,-3.67394039744206E-16,0.7071067811865466,0.7071067811865485,5.51091059616309E-16,-1.0,-0.7071067811865474,0.7071067811865477,1.0,7.34788079488412E-16,-0.7071067811865464,-0.7071067811865487,-2.6948419387607653E-15,1.0,0.7071067811865476,-0.7071067811865475,-1.0,-1.1021821192326177E-15,0.707106781186546,0.707106781186549,-4.904777002955296E-16,-1.0,-0.7071067811865479,0.7071067811865471,1.0,0.0,-0.9238795325112867,-0.3826834323650899,0.7071067811865474,0.7071067811865477,-0.3826834323650899,-0.9238795325112867,-4.286263797015736E-16,1.0,0.38268343236509067,-0.9238795325112864,-0.7071067811865474,0.7071067811865477,0.9238795325112875,-0.38268343236508784,-1.0,-8.572527594031472E-16,0.9238795325112868,0.38268343236508945,-0.7071067811865461,-0.7071067811865489,0.3826834323650891,0.9238795325112871,-4.904777002955296E-16,-1.0,-0.38268343236509145,0.9238795325112861,0.7071067811865505,-0.7071067811865446,-0.9238795325112865,0.38268343236509034,1.0,0.0,-1.0,-1.2246467991473532E-16,1.0,2.4492935982947064E-16,-1.0,-3.67394039744206E-16,1.0,4.898587196589413E-16,-1.0,-6.123233995736766E-16,1.0,7.34788079488412E-16,-1.0,-8.572527594031472E-16,1.0,9.797174393178826E-16,-1.0,-1.1021821192326177E-15,1.0,1.224646799147353E-15,-1.0,-4.899825157862589E-15,1.0,1.4695761589768238E-15,-1.0,1.9606728399089416E-15,1.0,1.7145055188062944E-15,-1.0,-5.3896838775215305E-15,1.0,0.0,-0.9238795325112868,0.38268343236508967,0.7071067811865477,-0.7071067811865474,-0.38268343236509056,0.9238795325112864,5.51091059616309E-16,-1.0,0.38268343236508956,0.9238795325112868,-0.7071067811865464,-0.7071067811865487,0.9238795325112868,0.38268343236508945,-1.0,-1.1021821192326177E-15,0.9238795325112877,-0.3826834323650874,-0.7071067811865479,0.7071067811865471,0.3826834323650883,-0.9238795325112874,-3.4296300182491773E-15,1.0,-0.3826834323650885,-0.9238795325112873,0.707106781186548,0.707106781186547,-0.9238795325112851,-0.3826834323650937,1.0,0.0,-0.7071067811865477,0.7071067811865475,3.061616997868383E-16,-1.0,0.7071067811865466,0.7071067811865485,-1.0,-6.123233995736766E-16,0.7071067811865475,-0.7071067811865476,-2.6948419387607653E-15,1.0,-0.7071067811865461,-0.7071067811865489,1.0,1.224646799147353E-15,-0.7071067811865479,0.7071067811865471,-2.4554834046605894E-16,-1.0,0.7071067811865482,0.7071067811865468,-1.0,-5.3896838775215305E-15,0.7071067811865508,-0.7071067811865442,-3.919488737908119E-15,1.0,-0.7071067811865452,-0.7071067811865498,1.0,0.0,-0.38268343236509034,0.9238795325112865,-0.7071067811865467,-0.7071067811865483,0.9238795325112867,-0.3826834323650897,-2.4499125789312946E-15,1.0,-0.923879532511287,-0.38268343236508934,0.7071067811865476,-0.7071067811865475,0.3826834323650891,0.9238795325112871,-1.0,-4.899825157862589E-15,0.3826834323650883,-0.9238795325112874,0.7071067811865482,0.7071067811865468,-0.9238795325112866,0.3826834323650901,2.4431037919288234E-16,-1.0,0.9238795325112864,0.38268343236509056,-0.7071067811865486,0.7071067811865465,-0.3826834323650813,-0.9238795325112903,1.0,0.0,-1.8369701987210297E-16,1.0,-1.0,-3.67394039744206E-16,5.51091059616309E-16,-1.0,1.0,7.34788079488412E-16,-2.6948419387607653E-15,1.0,-1.0,-1.1021821192326177E-15,-4.904777002955296E-16,-1.0,1.0,1.4695761589768238E-15,-3.4296300182491773E-15,1.0,-1.0,-5.3896838775215305E-15,2.4431037919288234E-16,-1.0,1.0,2.204364238465236E-15,-4.164418097737589E-15,1.0,-1.0,9.809554005910593E-16,9.790984586812943E-16,-1.0,1.0,0.0,0.38268343236509,0.9238795325112866,-0.7071067811865471,0.7071067811865479,-0.9238795325112864,-0.3826834323650907,-9.803364199544708E-16,-1.0,0.9238795325112876,-0.3826834323650876,0.707106781186546,0.707106781186549,-0.38268343236509145,0.9238795325112861,-1.0,1.9606728399089416E-15,-0.3826834323650885,-0.9238795325112873,0.7071067811865508,-0.7071067811865442,0.9238795325112864,0.38268343236509056,-4.164418097737589E-15,1.0,-0.9238795325112868,0.38268343236508945,-0.7071067811865449,-0.7071067811865501,0.3826834323650962,-0.9238795325112841,1.0,0.0,0.7071067811865474,0.7071067811865477,-4.286263797015736E-16,1.0,-0.7071067811865474,0.7071067811865477,-1.0,-8.572527594031472E-16,-0.7071067811865461,-0.7071067811865489,-4.904777002955296E-16,-1.0,0.7071067811865505,-0.7071067811865446,1.0,1.7145055188062944E-15,0.707106781186548,0.707106781186547,-3.919488737908119E-15,1.0,-0.7071067811865486,0.7071067811865465,-1.0,9.809554005910593E-16,-0.7071067811865449,-0.7071067811865501,8.329455176111767E-15,-1.0,0.7071067811865467,-0.7071067811865483,1.0,0.0,0.9238795325112865,0.3826834323650904,0.7071067811865466,0.7071067811865485,0.38268343236508956,0.9238795325112868,-2.6948419387607653E-15,1.0,-0.3826834323650912,0.9238795325112862,-0.7071067811865479,0.7071067811865471,-0.9238795325112865,0.38268343236509034,-1.0,-5.3896838775215305E-15,-0.9238795325112851,-0.3826834323650937,-0.7071067811865452,-0.7071067811865498,-0.3826834323650813,-0.9238795325112903,9.790984586812943E-16,-1.0,0.3826834323650962,-0.9238795325112841,0.7071067811865467,-0.7071067811865483,0.9238795325112886,-0.38268343236508534},new int[]{16,16});
  IComplexNDArray transposed2=ndArray.transpose();
  IComplexNDArray testNdArrayM=transposed2.mmul(M);
  IComplexNDArray assertion=NDArrays.createComplex(testVector,new int[]{16});
  assertEquals(assertion,testNdArrayM);
  IComplexNDArray M2=NDArrays.createComplex(new double[]{1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,0.30901699437494745,-0.9510565162951535,-0.8090169943749473,-0.5877852522924732,-0.8090169943749478,0.5877852522924727,0.30901699437494723,0.9510565162951536,1.0,0.0,-0.8090169943749473,-0.5877852522924732,0.30901699437494723,0.9510565162951536,0.30901699437494856,-0.9510565162951532,-0.8090169943749477,0.5877852522924728,1.0,0.0,-0.8090169943749478,0.5877852522924727,0.30901699437494856,-0.9510565162951532,0.309016994374947,0.9510565162951538,-0.809016994374946,-0.587785252292475,1.0,0.0,0.30901699437494723,0.9510565162951536,-0.8090169943749477,0.5877852522924728,-0.809016994374946,-0.587785252292475,0.3090169943749482,-0.9510565162951533},new int[]{5,5});
  INDArray n2=NDArrays.create(NDArrays.linspace(1,30,30).data(),new int[]{3,5,2});
  INDArray swapped=n2.swapAxes(n2.shape().length - 1,1);
  INDArray firstSlice=swapped.slice(0).slice(0);
  IComplexNDArray testSlice=NDArrays.createComplex(firstSlice);
  IComplexNDArray testNoOffset=NDArrays.createComplex(new double[]{1,0,3,0,5,0,7,0,9,0},new int[]{5});
  assertEquals(testSlice,testNoOffset);
  assertEquals(testSlice.mmul(M2),testNoOffset.mmul(M2));
}
