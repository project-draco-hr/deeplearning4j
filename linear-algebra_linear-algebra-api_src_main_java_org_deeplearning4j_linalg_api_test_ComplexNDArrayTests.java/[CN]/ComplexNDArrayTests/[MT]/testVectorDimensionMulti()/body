{
  IComplexNDArray arr=NDArrays.createComplex(NDArrays.create(NDArrays.linspace(1,24,24).data(),new int[]{4,3,2}));
  final AtomicInteger count=new AtomicInteger(0);
  arr.iterateOverDimension(0,new SliceOp(){
    @Override public void operate(    DimensionSlice nd){
      IComplexNDArray test=(IComplexNDArray)nd.getResult();
      if (count.get() == 0) {
        IComplexNDArray answer=NDArrays.createComplex(new double[]{1,0,7,0,13,0,19,0},new int[]{4});
        assertEquals(answer,test);
      }
 else       if (count.get() == 1) {
        IComplexNDArray answer=NDArrays.createComplex(new double[]{2,0,8,0,14,0,20,0},new int[]{4});
        assertEquals(answer,test);
      }
 else       if (count.get() == 2) {
        IComplexNDArray answer=NDArrays.createComplex(new double[]{3,0,9,0,15,0,21,0},new int[]{4});
        assertEquals(answer,test);
      }
 else       if (count.get() == 3) {
        IComplexNDArray answer=NDArrays.createComplex(new double[]{4,0,10,0,16,0,22,0},new int[]{4});
        assertEquals(answer,test);
      }
 else       if (count.get() == 4) {
        IComplexNDArray answer=NDArrays.createComplex(new double[]{5,0,11,0,17,0,23,0},new int[]{4});
        assertEquals(answer,test);
      }
 else       if (count.get() == 5) {
        IComplexNDArray answer=NDArrays.createComplex(new double[]{6,0,12,0,18,0,24,0},new int[]{4});
        assertEquals(answer,test);
      }
      count.incrementAndGet();
    }
    /** 
 * Operates on an ndarray slice
 * @param nd the result to operate on
 */
    @Override public void operate(    INDArray nd){
    }
  }
,false);
  IComplexNDArray ret=NDArrays.createComplex(new double[]{1,0,2,0,3,0,4,0},new int[]{2,2});
  final IComplexNDArray firstRow=NDArrays.createComplex(new double[]{1,0,2,0},new int[]{2});
  final IComplexNDArray secondRow=NDArrays.createComplex(new double[]{3,0,4,0},new int[]{2});
  count.set(0);
  ret.iterateOverDimension(1,new SliceOp(){
    @Override public void operate(    DimensionSlice nd){
      IComplexNDArray c=(IComplexNDArray)nd.getResult();
      if (count.get() == 0) {
        assertEquals(firstRow,c);
      }
 else       if (count.get() == 1)       assertEquals(secondRow,c);
      count.incrementAndGet();
    }
    /** 
 * Operates on an ndarray slice
 * @param nd the result to operate on
 */
    @Override public void operate(    INDArray nd){
    }
  }
,false);
}
