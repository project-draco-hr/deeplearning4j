{
  IComplexNDArray n1=NDArrays.complexScalar(1);
  IComplexNDArray n2=NDArrays.complexScalar(2);
  assertEquals(NDArrays.complexScalar(3),n1.add(n2));
  assertFalse(n1.add(n2).equals(n1));
  IComplexNDArray n3=NDArrays.complexScalar(3);
  IComplexNDArray n4=NDArrays.complexScalar(4);
  IComplexNDArray subbed=n4.sub(n3);
  IComplexNDArray mulled=n4.mul(n3);
  IComplexNDArray div=n4.div(n3);
  assertFalse(subbed.equals(n4));
  assertFalse(mulled.equals(n4));
  assertEquals(NDArrays.complexScalar(1),subbed);
  assertEquals(NDArrays.complexScalar(12),mulled);
  assertEquals(NDArrays.complexScalar(1.3333333333333333),div);
  IComplexNDArray multiDimensionElementWise=NDArrays.createComplex(NDArrays.create(NDArrays.linspace(1,24,24).data(),new int[]{4,3,2}));
  IComplexDouble sum2=(IComplexDouble)multiDimensionElementWise.sum(Integer.MAX_VALUE).element();
  assertEquals(sum2,NDArrays.createDouble(300,0));
  IComplexNDArray added=multiDimensionElementWise.add(NDArrays.complexScalar(1));
  IComplexDouble sum3=(IComplexDouble)added.sum(Integer.MAX_VALUE).element();
  assertEquals(sum3,NDArrays.createDouble(324,0));
}
