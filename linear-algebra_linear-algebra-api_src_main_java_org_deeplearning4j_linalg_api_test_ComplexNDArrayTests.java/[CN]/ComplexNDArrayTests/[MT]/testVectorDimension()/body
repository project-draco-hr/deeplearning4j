{
  IComplexNDArray test=NDArrays.createComplex(new double[]{1,0,2,0,3,0,4,0},new int[]{2,2});
  final AtomicInteger count=new AtomicInteger(0);
  test.iterateOverDimension(1,new SliceOp(){
    @Override public void operate(    DimensionSlice nd){
      log.info("Operator " + nd);
      IComplexNDArray test=(IComplexNDArray)nd.getResult();
      if (count.get() == 0) {
        IComplexNDArray firstDimension=NDArrays.createComplex(new double[]{1,0,2,0},new int[]{2,1});
        assertEquals(firstDimension,test);
      }
 else {
        IComplexNDArray firstDimension=NDArrays.createComplex(new double[]{3,0,4,0},new int[]{2});
        assertEquals(firstDimension,test);
      }
      count.incrementAndGet();
    }
    /** 
 * Operates on an ndarray slice
 * @param nd the result to operate on
 */
    @Override public void operate(    INDArray nd){
    }
  }
,false);
  count.set(0);
  test.iterateOverDimension(0,new SliceOp(){
    @Override public void operate(    DimensionSlice nd){
      log.info("Operator " + nd);
      IComplexNDArray test=(IComplexNDArray)nd.getResult();
      if (count.get() == 0) {
        IComplexNDArray firstDimension=NDArrays.createComplex(new double[]{1,0,3,0},new int[]{2});
        assertEquals(firstDimension,test);
      }
 else {
        IComplexNDArray firstDimension=NDArrays.createComplex(new double[]{2,0,4,0},new int[]{2});
        assertEquals(firstDimension,test);
      }
      count.incrementAndGet();
    }
    /** 
 * Operates on an ndarray slice
 * @param nd the result to operate on
 */
    @Override public void operate(    INDArray nd){
    }
  }
,false);
}
