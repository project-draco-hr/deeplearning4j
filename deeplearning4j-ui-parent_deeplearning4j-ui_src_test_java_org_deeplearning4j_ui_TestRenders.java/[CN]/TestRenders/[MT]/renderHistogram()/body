{
  MnistDataFetcher fetcher=new MnistDataFetcher(true);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().momentum(0.9f).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(100).learningRate(1e-1f).layer(new org.deeplearning4j.nn.conf.layers.AutoEncoder.Builder().nIn(784).nOut(600).corruptionLevel(0.6).weightInit(WeightInit.XAVIER).lossFunction(LossFunctions.LossFunction.RMSE_XENT).build()).build();
  fetcher.fetch(100);
  DataSet d2=fetcher.next();
  INDArray input=d2.getFeatureMatrix();
  int numParams=LayerFactories.getFactory(conf).initializer().numParams(conf,true);
  INDArray params=Nd4j.create(1,numParams);
  AutoEncoder da=LayerFactories.getFactory(conf.getLayer()).create(conf,null,0,params);
  da.setListeners(new ScoreIterationListener(1),new HistogramIterationListener(5));
  da.setParams(da.params());
  da.fit(input);
}
