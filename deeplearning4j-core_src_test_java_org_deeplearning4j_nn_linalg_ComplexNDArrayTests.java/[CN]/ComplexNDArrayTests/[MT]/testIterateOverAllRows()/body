{
  ComplexNDArray c=new ComplexNDArray(new NDArray(DoubleMatrix.linspace(0,29,30).data,new int[]{3,5,2}));
  final AtomicInteger i=new AtomicInteger(0);
  final Set<ComplexNDArray> set=new HashSet<>();
  c.iterateOverAllRows(new SliceOp(){
    @Override public void operate(    DimensionSlice nd){
      ComplexNDArray result=(ComplexNDArray)nd.getResult();
      int curr=i.get();
      i.incrementAndGet();
      ComplexNDArray test=new ComplexNDArray(new double[]{curr * 2,0,curr * 2 + 1,0},new int[]{2});
      assertEquals(result,test);
      assertEquals(true,!set.contains(test));
      set.add(result);
      result.put(0,(curr + 1) * 3);
      result.put(1,(curr + 2) * 3);
      assertEquals((curr + 1) * 3,result.get(0).real(),1e-1);
      assertEquals((curr + 2) * 3,result.get(1).real(),1e-1);
    }
  }
);
  ComplexNDArray permuted=c.permute(new int[]{2,1,0});
  set.clear();
  i.set(0);
  permuted.iterateOverAllRows(new SliceOp(){
    @Override public void operate(    DimensionSlice nd){
      ComplexNDArray result=(ComplexNDArray)nd.getResult();
      int curr=i.get();
      i.incrementAndGet();
      result.put(0,(curr + 1) * 3);
      result.put(1,(curr + 2) * 3);
      assertEquals((curr + 1) * 3,result.get(0).real(),1e-1);
      assertEquals((curr + 2) * 3,result.get(1).real(),1e-1);
    }
  }
);
  ComplexNDArray swapped=c.swapAxes(2,1);
  i.set(0);
  swapped.iterateOverAllRows(new SliceOp(){
    @Override public void operate(    DimensionSlice nd){
      ComplexNDArray result=(ComplexNDArray)nd.getResult();
      int curr=i.get();
      i.incrementAndGet();
      result.put(0,(curr + 1) * 3);
      result.put(1,(curr + 2) * 3);
      assertEquals((curr + 1) * 3,result.get(0).real(),1e-1);
      assertEquals((curr + 2) * 3,result.get(1).real(),1e-1);
    }
  }
);
}
