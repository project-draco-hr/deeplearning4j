{
  Nd4j.getRandom().setSeed(12345);
  int timeSeriesLength=12;
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).graphBuilder().addInputs("in0","in1").addLayer("lstm0",new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(5).nOut(6).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build(),"in0").addLayer("lstm1",new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(4).nOut(5).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build(),"in1").addLayer("dense",new DenseLayer.Builder().nIn(6 + 5).nOut(9).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build(),"lstm0","lstm1").addLayer("out0",new RnnOutputLayer.Builder(LossFunctions.LossFunction.MCXENT).weightInit(WeightInit.DISTRIBUTION).nIn(9).nOut(3).activation("softmax").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build(),"dense").addLayer("out1",new RnnOutputLayer.Builder(LossFunctions.LossFunction.MCXENT).weightInit(WeightInit.DISTRIBUTION).nIn(9).nOut(4).activation("softmax").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build(),"dense").setOutputs("out0","out1").inputPreProcessor("dense",new RnnToFeedForwardPreProcessor()).inputPreProcessor("out0",new FeedForwardToRnnPreProcessor()).inputPreProcessor("out1",new FeedForwardToRnnPreProcessor()).pretrain(false).backprop(true).build();
  ComputationGraph graph=new ComputationGraph(conf);
  graph.init();
  INDArray input0=Nd4j.rand(new int[]{3,5,timeSeriesLength});
  INDArray input1=Nd4j.rand(new int[]{3,4,timeSeriesLength});
  Map<String,INDArray> allOutputActivations=graph.feedForward(new INDArray[]{input0,input1},true);
  INDArray fullActLSTM0=allOutputActivations.get("lstm0");
  INDArray fullActLSTM1=allOutputActivations.get("lstm1");
  INDArray fullActOut0=allOutputActivations.get("out0");
  INDArray fullActOut1=allOutputActivations.get("out1");
  assertArrayEquals(new int[]{3,6,timeSeriesLength},fullActLSTM0.shape());
  assertArrayEquals(new int[]{3,5,timeSeriesLength},fullActLSTM1.shape());
  assertArrayEquals(new int[]{3,3,timeSeriesLength},fullActOut0.shape());
  assertArrayEquals(new int[]{3,4,timeSeriesLength},fullActOut1.shape());
  int[] inputLengths={1,2,3,4,6,12};
  for (int i=0; i < inputLengths.length; i++) {
    int inLength=inputLengths[i];
    int nSteps=timeSeriesLength / inLength;
    graph.rnnClearPreviousState();
    for (int j=0; j < nSteps; j++) {
      int startTimeRange=j * inLength;
      int endTimeRange=startTimeRange + inLength;
      INDArray inputSubset0=input0.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(startTimeRange,endTimeRange));
      if (inLength > 1)       assertTrue(inputSubset0.size(2) == inLength);
      INDArray inputSubset1=input1.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(startTimeRange,endTimeRange));
      if (inLength > 1)       assertTrue(inputSubset1.size(2) == inLength);
      INDArray[] outArr=graph.rnnTimeStep(inputSubset0,inputSubset1);
      assertEquals(2,outArr.length);
      INDArray out0=outArr[0];
      INDArray out1=outArr[1];
      INDArray expOutSubset0;
      if (inLength == 1) {
        int[] sizes=new int[]{fullActOut0.size(0),fullActOut0.size(1),1};
        expOutSubset0=Nd4j.create(sizes);
        expOutSubset0.tensorAlongDimension(0,1,0).assign(fullActOut0.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.point(startTimeRange)));
      }
 else {
        expOutSubset0=fullActOut0.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(startTimeRange,endTimeRange));
      }
      INDArray expOutSubset1;
      if (inLength == 1) {
        int[] sizes=new int[]{fullActOut1.size(0),fullActOut1.size(1),1};
        expOutSubset1=Nd4j.create(sizes);
        expOutSubset1.tensorAlongDimension(0,1,0).assign(fullActOut1.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.point(startTimeRange)));
      }
 else {
        expOutSubset1=fullActOut1.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(startTimeRange,endTimeRange));
      }
      assertEquals(expOutSubset0,out0);
      assertEquals(expOutSubset1,out1);
      Map<String,INDArray> currLSTM0State=graph.rnnGetPreviousState("lstm0");
      Map<String,INDArray> currLSTM1State=graph.rnnGetPreviousState("lstm1");
      INDArray lastActL0=currLSTM0State.get(GravesLSTM.STATE_KEY_PREV_ACTIVATION);
      INDArray lastActL1=currLSTM1State.get(GravesLSTM.STATE_KEY_PREV_ACTIVATION);
      INDArray expLastActL0=fullActLSTM0.tensorAlongDimension(endTimeRange - 1,1,0);
      INDArray expLastActL1=fullActLSTM1.tensorAlongDimension(endTimeRange - 1,1,0);
      assertEquals(expLastActL0,lastActL0);
      assertEquals(expLastActL1,lastActL1);
    }
  }
}
