{
  Nd4j.getRandom().setSeed(12345);
  int timeSeriesLength=12;
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).graphBuilder().addInputs("in").addLayer("0",new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(5).nOut(7).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build(),"in").addLayer("1",new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(7).nOut(8).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build(),"0").addLayer("2",new DenseLayer.Builder().nIn(8).nOut(9).activation("tanh").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build(),"1").addLayer("3",new RnnOutputLayer.Builder(LossFunctions.LossFunction.MCXENT).weightInit(WeightInit.DISTRIBUTION).nIn(9).nOut(4).activation("softmax").weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.5)).build(),"2").setOutputs("3").inputPreProcessor("2",new RnnToFeedForwardPreProcessor()).inputPreProcessor("3",new FeedForwardToRnnPreProcessor()).pretrain(false).backprop(true).build();
  ComputationGraph graph=new ComputationGraph(conf);
  graph.init();
  INDArray input=Nd4j.rand(new int[]{3,5,timeSeriesLength});
  Map<String,INDArray> allOutputActivations=graph.feedForward(input,true);
  INDArray fullOutL0=allOutputActivations.get("0");
  INDArray fullOutL1=allOutputActivations.get("1");
  INDArray fullOutL3=allOutputActivations.get("3");
  assertArrayEquals(new int[]{3,7,timeSeriesLength},fullOutL0.shape());
  assertArrayEquals(new int[]{3,8,timeSeriesLength},fullOutL1.shape());
  assertArrayEquals(new int[]{3,4,timeSeriesLength},fullOutL3.shape());
  int[] inputLengths={1,2,3,4,6,12};
  for (int i=0; i < inputLengths.length; i++) {
    int inLength=inputLengths[i];
    int nSteps=timeSeriesLength / inLength;
    graph.rnnClearPreviousState();
    for (int j=0; j < nSteps; j++) {
      int startTimeRange=j * inLength;
      int endTimeRange=startTimeRange + inLength;
      INDArray inputSubset=input.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(startTimeRange,endTimeRange));
      if (inLength > 1)       assertTrue(inputSubset.size(2) == inLength);
      INDArray[] outArr=graph.rnnTimeStep(inputSubset);
      assertEquals(1,outArr.length);
      INDArray out=outArr[0];
      INDArray expOutSubset;
      if (inLength == 1) {
        int[] sizes=new int[]{fullOutL3.size(0),fullOutL3.size(1),1};
        expOutSubset=Nd4j.create(sizes);
        expOutSubset.tensorAlongDimension(0,1,0).assign(fullOutL3.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.point(startTimeRange)));
      }
 else {
        expOutSubset=fullOutL3.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(startTimeRange,endTimeRange));
      }
      assertEquals(expOutSubset,out);
      Map<String,INDArray> currL0State=graph.rnnGetPreviousState("0");
      Map<String,INDArray> currL1State=graph.rnnGetPreviousState("1");
      INDArray lastActL0=currL0State.get(GravesLSTM.STATE_KEY_PREV_ACTIVATION);
      INDArray lastActL1=currL1State.get(GravesLSTM.STATE_KEY_PREV_ACTIVATION);
      INDArray expLastActL0=fullOutL0.tensorAlongDimension(endTimeRange - 1,1,0);
      INDArray expLastActL1=fullOutL1.tensorAlongDimension(endTimeRange - 1,1,0);
      assertEquals(expLastActL0,lastActL0);
      assertEquals(expLastActL1,lastActL1);
    }
  }
}
