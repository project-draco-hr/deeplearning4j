{
  if (vertexInputs.length != 1) {
    throw new InvalidInputTypeException("LayerVertex expects exactly one input. Got: " + Arrays.toString(vertexInputs));
  }
  Layer layer=layerConf.getLayer();
  if (layer instanceof ConvolutionLayer || layer instanceof SubsamplingLayer) {
    InputType.InputTypeConvolutional afterPreProcessor;
    if (preProcessor != null) {
      if (preProcessor instanceof FeedForwardToCnnPreProcessor) {
        FeedForwardToCnnPreProcessor ffcnn=(FeedForwardToCnnPreProcessor)preProcessor;
        afterPreProcessor=(InputType.InputTypeConvolutional)InputType.convolutional(ffcnn.getInputHeight(),ffcnn.getInputWidth(),ffcnn.getNumChannels());
      }
 else       if (preProcessor instanceof RnnToCnnPreProcessor) {
        RnnToCnnPreProcessor rnncnn=(RnnToCnnPreProcessor)preProcessor;
        afterPreProcessor=(InputType.InputTypeConvolutional)InputType.convolutional(rnncnn.getInputHeight(),rnncnn.getInputWidth(),rnncnn.getNumChannels());
      }
 else {
        afterPreProcessor=(InputType.InputTypeConvolutional)vertexInputs[0];
      }
    }
 else {
      afterPreProcessor=(InputType.InputTypeConvolutional)vertexInputs[0];
    }
    int channelsOut;
    int[] kernel;
    int[] stride;
    int[] padding;
    if (layer instanceof ConvolutionLayer) {
      channelsOut=((ConvolutionLayer)layer).getNOut();
      kernel=((ConvolutionLayer)layer).getKernelSize();
      stride=((ConvolutionLayer)layer).getStride();
      padding=((ConvolutionLayer)layer).getPadding();
    }
 else {
      channelsOut=afterPreProcessor.getDepth();
      kernel=((SubsamplingLayer)layer).getKernelSize();
      stride=((SubsamplingLayer)layer).getStride();
      padding=((SubsamplingLayer)layer).getPadding();
    }
    int inHeight=afterPreProcessor.getHeight();
    int inWidth=afterPreProcessor.getWidth();
    new KernelValidationUtil().validateShapes(inHeight,inWidth,kernel[0],kernel[1],stride[0],stride[1],padding[0],padding[1]);
    int outWidth=(inWidth - kernel[1] + 2 * padding[1]) / stride[1] + 1;
    int outHeight=(inHeight - kernel[0] + 2 * padding[0]) / stride[0] + 1;
    return InputType.convolutional(channelsOut,outWidth,outHeight);
  }
 else   if (layer instanceof BaseRecurrentLayer) {
    return InputType.recurrent(((BaseRecurrentLayer)layer).getNOut());
  }
 else   if (layer instanceof FeedForwardLayer) {
    return InputType.feedForward(((FeedForwardLayer)layer).getNOut());
  }
 else {
    return vertexInputs[0];
  }
}
