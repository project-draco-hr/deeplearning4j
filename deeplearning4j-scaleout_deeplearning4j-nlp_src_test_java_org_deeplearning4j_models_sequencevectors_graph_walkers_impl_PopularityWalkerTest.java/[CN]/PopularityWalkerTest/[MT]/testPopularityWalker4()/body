{
  GraphWalker<VocabWord> walker=new PopularityWalker.Builder<VocabWord>(graph).setWalkDirection(WalkDirection.FORWARD_ONLY).setNoEdgeHandling(NoEdgeHandling.CUTOFF_ON_DISCONNECTED).setWalkLength(10).setPopularityMode(PopularityMode.MINIMUM).setPopularitySpread(3).setSpreadSpectrum(SpreadSpectrum.PROPORTIONAL).build();
  System.out.println("Connected [3] size: " + graph.getConnectedVertices(3).size());
  System.out.println("Connected [4] size: " + graph.getConnectedVertices(4).size());
  AtomicBoolean got3=new AtomicBoolean(false);
  AtomicBoolean got8=new AtomicBoolean(false);
  AtomicBoolean got9=new AtomicBoolean(false);
  for (int i=0; i < 50; i++) {
    Sequence<VocabWord> sequence=walker.next();
    assertEquals("0",sequence.getElements().get(0).getLabel());
    System.out.println("Position at 1: [" + sequence.getElements().get(1).getLabel() + "]");
    got3.compareAndSet(false,sequence.getElements().get(1).getLabel().equals("3"));
    got8.compareAndSet(false,sequence.getElements().get(1).getLabel().equals("8"));
    got9.compareAndSet(false,sequence.getElements().get(1).getLabel().equals("9"));
    assertTrue(sequence.getElements().get(1).getLabel().equals("8") || sequence.getElements().get(1).getLabel().equals("3") || sequence.getElements().get(1).getLabel().equals("9"));
    walker.reset(false);
  }
  assertTrue(got3.get());
  assertTrue(got8.get());
  assertTrue(got9.get());
}
