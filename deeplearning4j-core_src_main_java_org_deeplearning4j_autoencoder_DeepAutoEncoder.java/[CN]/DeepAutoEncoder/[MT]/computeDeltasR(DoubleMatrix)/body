{
  List<DoubleMatrix> deltaRet=new ArrayList<>();
  DoubleMatrix[] deltas=new DoubleMatrix[getnLayers() + 1];
  List<DoubleMatrix> activations=feedForward();
  List<DoubleMatrix> rActivations=feedForwardR(activations,v);
  List<DoubleMatrix> weights=new ArrayList<>();
  List<DoubleMatrix> biases=new ArrayList<>();
  List<ActivationFunction> activationFunctions=new ArrayList<>();
  for (int j=0; j < getLayers().length; j++) {
    weights.add(getLayers()[j].getW());
    biases.add(getLayers()[j].gethBias());
    AutoEncoder a=(AutoEncoder)getLayers()[j];
    activationFunctions.add(a.getAct());
  }
  weights.add(getOutputLayer().getW());
  biases.add(getOutputLayer().getB());
  activationFunctions.add(outputLayer.getActivationFunction());
  DoubleMatrix rix=rActivations.get(rActivations.size() - 1).div(input.rows);
  for (int i=getnLayers(); i >= 0; i--) {
    deltas[i]=activations.get(i).transpose().mmul(rix);
    applyDropConnectIfNecessary(deltas[i]);
    if (i > 0)     rix=rix.mmul(weights.get(i).addRowVector(biases.get(i)).transpose()).muli(activationFunctions.get(i - 1).applyDerivative(activations.get(i)));
  }
  for (int i=0; i < deltas.length; i++) {
    if (constrainGradientToUnitNorm)     deltaRet.add(deltas[i].div(deltas[i].norm2()));
 else     deltaRet.add(deltas[i]);
  }
  return deltaRet;
}
