{
  if (flattenedGradients == null)   initGradientsView();
  LinkedList<Triple<String,INDArray,Character>> gradients=new LinkedList<>();
  for (int i=topologicalOrder.length - 1; i >= 0; i--) {
    GraphVertex current=vertices[topologicalOrder[i]];
    if (current.isInputVertex())     continue;
    if (current.isOutputVertex()) {
      int thisOutputNumber=configuration.getNetworkOutputs().indexOf(current.getVertexName());
      if (current.getLayer() instanceof IOutputLayer) {
        IOutputLayer outputLayer=(IOutputLayer)current.getLayer();
        INDArray currLabels=labels[thisOutputNumber];
        outputLayer.setLabels(currLabels);
      }
 else {
        current.setErrors(externalEpsilons[thisOutputNumber]);
      }
    }
    Pair<Gradient,INDArray[]> pair=current.doBackward(truncatedBPTT);
    INDArray[] epsilons=pair.getSecond();
    VertexIndices[] inputVertices=current.getInputVertices();
    if (inputVertices != null) {
      int j=0;
      for (      VertexIndices v : inputVertices) {
        GraphVertex gv=vertices[v.getVertexIndex()];
        int outputNumberOfInputVertex=v.getVertexEdgeNumber();
        gv.setError(outputNumberOfInputVertex,epsilons[j++]);
      }
    }
    if (pair.getFirst() != null) {
      Gradient g=pair.getFirst();
      Map<String,INDArray> map=g.gradientForVariable();
      LinkedList<Triple<String,INDArray,Character>> tempList=new LinkedList<>();
      for (      Map.Entry<String,INDArray> entry : map.entrySet()) {
        String origName=entry.getKey();
        String newName=current.getVertexName() + "_" + origName;
        tempList.addFirst(new Triple<>(newName,entry.getValue(),g.flatteningOrderForVariable(origName)));
      }
      for (      Triple<String,INDArray,Character> t : tempList)       gradients.addFirst(t);
    }
  }
  Gradient gradient=new DefaultGradient(flattenedGradients);
  for (  Triple<String,INDArray,Character> t : gradients) {
    gradient.setGradientFor(t.getFirst(),t.getSecond(),t.getThird());
  }
  this.gradient=gradient;
}
