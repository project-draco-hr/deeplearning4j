{
  if (topologicalOrder != null)   return topologicalOrder;
  Map<String,org.deeplearning4j.nn.conf.graph.GraphVertex> nodeMap=configuration.getVertices();
  List<String> networkInputNames=configuration.getNetworkInputs();
  int numVertices=networkInputNames.size() + configuration.getVertices().size();
  int[] out=new int[numVertices];
  int outCounter=0;
  Map<Integer,String> vertexNamesMap=new HashMap<>();
  Map<String,Integer> vertexNamesMap2=new HashMap<>();
  int i=0;
  for (  String inputName : configuration.getNetworkInputs()) {
    vertexNamesMap.put(i,inputName);
    vertexNamesMap2.put(inputName,i);
    i++;
  }
  for (  Map.Entry<String,org.deeplearning4j.nn.conf.graph.GraphVertex> entry : nodeMap.entrySet()) {
    String name=entry.getKey();
    vertexNamesMap.put(i,name);
    vertexNamesMap2.put(name,i);
    i++;
  }
  Map<Integer,Set<Integer>> inputEdges=new HashMap<>();
  Map<Integer,Set<Integer>> outputEdges=new HashMap<>();
  for (  String s : configuration.getNetworkInputs()) {
    int idx=vertexNamesMap2.get(s);
    inputEdges.put(idx,null);
  }
  for (  Map.Entry<String,org.deeplearning4j.nn.conf.graph.GraphVertex> entry : nodeMap.entrySet()) {
    String thisVertexName=entry.getKey();
    int idx=vertexNamesMap2.get(thisVertexName);
    List<String> inputsToThisVertex=configuration.getVertexInputs().get(thisVertexName);
    if (inputsToThisVertex == null || inputsToThisVertex.isEmpty()) {
      inputEdges.put(idx,null);
      continue;
    }
    Set<Integer> inputSet=new HashSet<>();
    for (    String s : inputsToThisVertex) {
      Integer inputIdx=vertexNamesMap2.get(s);
      if (inputIdx == null) {
        System.out.println();
      }
      inputSet.add(inputIdx);
      Set<Integer> outputSetForInputIdx=outputEdges.get(inputIdx);
      if (outputSetForInputIdx == null) {
        outputSetForInputIdx=new HashSet<>();
        outputEdges.put(inputIdx,outputSetForInputIdx);
      }
      outputSetForInputIdx.add(idx);
    }
    inputEdges.put(idx,inputSet);
  }
  LinkedList<Integer> noIncomingEdges=new LinkedList<>();
  for (  Map.Entry<Integer,Set<Integer>> entry : inputEdges.entrySet()) {
    Set<Integer> inputsFrom=entry.getValue();
    if (inputsFrom == null || inputsFrom.isEmpty()) {
      noIncomingEdges.add(entry.getKey());
    }
  }
  while (!noIncomingEdges.isEmpty()) {
    int next=noIncomingEdges.removeFirst();
    out[outCounter++]=next;
    Set<Integer> vertexOutputsTo=outputEdges.get(next);
    if (vertexOutputsTo != null) {
      for (      Integer v : vertexOutputsTo) {
        Set<Integer> set=inputEdges.get(v);
        set.remove(next);
        if (set.isEmpty()) {
          noIncomingEdges.add(v);
        }
      }
    }
  }
  for (  Map.Entry<Integer,Set<Integer>> entry : inputEdges.entrySet()) {
    Set<Integer> set=entry.getValue();
    if (set == null)     continue;
    if (!set.isEmpty())     throw new IllegalStateException("Invalid configuration: cycle detected in graph. Cannot calculate topological ordering with graph cycle (" + "cycle includes vertex \"" + vertexNamesMap.get(entry.getKey()) + "\")");
  }
  return out;
}
