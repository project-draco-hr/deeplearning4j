{
  Map<String,Layer> layerMap=new HashMap<>();
  for (  Map.Entry<String,NeuralNetConfiguration> entry : configuration.getLayers().entrySet()) {
    String layerName=entry.getKey();
    NeuralNetConfiguration layerConf=entry.getValue();
    Layer layer=LayerFactories.getFactory(layerConf).create(layerConf,null,-1);
    layerMap.put(layerName,layer);
  }
  Map<String,GraphNode> nodeMap=new HashMap<>();
  List<String> networkInputNames=configuration.getNetworkInputs();
  Map<String,String[]> layerInputs=configuration.getLayerInputs();
  Map<String,String[]> graphNodeInputs=configuration.getGraphNodeInputs();
  int nVertices=layerMap.size() + nodeMap.size() + networkInputNames.size();
  this.vertices=new GraphVertex[nVertices];
  Map<Integer,String> allNames=new HashMap<>();
  Map<String,Integer> allNamesReverse=new HashMap<>();
  int i=0;
  for (  String name : networkInputNames) {
    int[] outVertices=null;
    GraphVertex gv=new GraphVertex(name,i,outVertices);
    allNames.put(i,name);
    allNamesReverse.put(name,i);
    vertices[i++]=gv;
  }
  for (  Map.Entry<String,Layer> layerEntry : layerMap.entrySet()) {
    int[] inputIndices=null;
    int[] outputIndices=null;
    Layer l=layerEntry.getValue();
    String name=layerEntry.getKey();
    GraphVertex gv=new GraphVertex(name,i,inputIndices,outputIndices,l);
    allNames.put(i,name);
    allNamesReverse.put(name,i);
    vertices[i++]=gv;
  }
  for (  Map.Entry<String,GraphNode> nodeEntry : nodeMap.entrySet()) {
    int[] inputIndices=null;
    int[] outputIndices=null;
    GraphNode n=nodeEntry.getValue();
    String name=nodeEntry.getKey();
    GraphVertex gv=new GraphVertex(name,i,inputIndices,outputIndices,n);
    allNames.put(i,name);
    allNamesReverse.put(name,i);
    vertices[i++]=gv;
  }
  Map<String,List<String>> verticesOutputTo=new HashMap<>();
  for (  GraphVertex gv : vertices) {
    String vertexName=gv.getVertexName();
    String[] vertexInputNames;
    if (gv.getLayer() != null) {
      vertexInputNames=layerInputs.get(vertexName);
    }
 else     if (gv.getGraphNode() != null) {
      vertexInputNames=graphNodeInputs.get(vertexName);
    }
 else {
      vertexInputNames=null;
    }
    if (vertexInputNames == null)     continue;
    int[] indices=new int[vertexInputNames.length];
    for (int j=0; j < vertexInputNames.length; j++) {
      indices[j]=allNamesReverse.get(vertexInputNames[j]);
    }
    gv.setInputIndices(indices);
    for (    String s : vertexInputNames) {
      List<String> list=verticesOutputTo.get(s);
      if (list == null) {
        list=new ArrayList<>();
        verticesOutputTo.put(s,list);
      }
      list.add(vertexName);
    }
  }
  for (  GraphVertex gv : vertices) {
    String vertexName=gv.getVertexName();
    List<String> thisVertexOutputsTo=verticesOutputTo.get(vertexName);
    if (thisVertexOutputsTo == null)     continue;
    int[] indices=new int[thisVertexOutputsTo.size()];
    int j=0;
    for (    String s : thisVertexOutputsTo) {
      indices[j++]=allNamesReverse.get(s);
    }
    gv.setOutputIndices(indices);
  }
  for (  GraphVertex gv : vertices) {
    System.out.println(gv);
  }
  topologicalOrder=topologicalSortOrder();
}
