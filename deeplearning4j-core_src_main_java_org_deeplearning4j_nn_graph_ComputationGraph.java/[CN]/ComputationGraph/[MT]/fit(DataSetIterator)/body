{
  if (numInputArrays != 1 || numOutputArrays != 1)   throw new UnsupportedOperationException("Cannot train ComputationGraph network with " + " multiple inputs or outputs using a DataSetIterator");
  if (configuration.isPretrain()) {
    throw new UnsupportedOperationException("Not implemented");
  }
  if (configuration.isBackprop()) {
    while (dataSetIterator.hasNext()) {
      DataSet next=dataSetIterator.next();
      if (next.getFeatureMatrix() == null || next.getLabels() == null)       break;
      boolean hasMaskArrays=next.hasMaskArrays();
      if (hasMaskArrays) {
        throw new UnsupportedOperationException("Training with mask arrays: not yet implemented");
      }
      if (configuration.getBackpropType() == BackpropType.TruncatedBPTT) {
        doTruncatedBPTT(new INDArray[]{next.getFeatures()},new INDArray[]{next.getLabels()},(hasMaskArrays ? new INDArray[]{next.getFeaturesMaskArray()} : null),(hasMaskArrays ? new INDArray[]{next.getLabelsMaskArray()} : null));
      }
 else {
        setInput(0,next.getFeatureMatrix());
        setLabel(0,next.getLabels());
        if (solver == null) {
          solver=new Solver.Builder().configure(defaultConfiguration).listeners(listeners).model(this).build();
        }
        solver.optimize();
      }
      if (hasMaskArrays) {
        throw new UnsupportedOperationException();
      }
    }
  }
}
