{
  boolean inputIs2d=true;
  for (  INDArray i : inputs) {
    if (i.rank() != 2) {
      inputIs2d=false;
      break;
    }
  }
  INDArray[] outputs=new INDArray[this.numOutputArrays];
  for (  int currVertexIdx : topologicalOrder) {
    GraphVertex current=vertices[currVertexIdx];
    if (current.isInputVertex()) {
      VertexIndices[] inputsTo=current.getOutputVertices();
      INDArray input=inputs[current.getIndex()];
      for (      VertexIndices v : inputsTo) {
        int vIdx=v.getVertexIndex();
        int vIdxInputNum=v.getVertexEdgeNumber();
        vertices[vIdx].setInput(vIdxInputNum,input.dup());
      }
    }
 else {
      INDArray out;
      if (current.hasLayer()) {
        Layer l=current.getLayer();
        if (l instanceof BaseRecurrentLayer<?>) {
          out=((BaseRecurrentLayer<?>)l).rnnTimeStep(current.getInputs()[0]);
        }
 else         if (l instanceof MultiLayerNetwork) {
          out=((MultiLayerNetwork)l).rnnTimeStep(current.getInputs()[0]);
        }
 else {
          out=current.doForward(false);
        }
      }
 else {
        out=current.doForward(false);
      }
      if (current.isOutputVertex()) {
        int idx=configuration.getNetworkOutputs().indexOf(current.getVertexName());
        outputs[idx]=out;
      }
      VertexIndices[] outputsTo=current.getOutputVertices();
      if (outputsTo != null) {
        int j=0;
        for (        VertexIndices v : outputsTo) {
          int vIdx=v.getVertexIndex();
          int inputNum=v.getVertexEdgeNumber();
          vertices[vIdx].setInput(inputNum,out);
        }
      }
    }
  }
  if (inputIs2d) {
    for (int i=0; i < outputs.length; i++) {
      if (outputs[i].rank() == 3 && outputs[i].size(2) == 1) {
        outputs[i]=outputs[i].tensorAlongDimension(0,1,0);
      }
    }
  }
  return outputs;
}
