{
  int d[][];
  int n;
  int m;
  int i;
  int j;
  char s_i;
  char t_j;
  n=s.length();
  m=t.length();
  if (n == 0) {
    return 0;
  }
  if (m == 0) {
    return 0;
  }
  d=new int[n + 1][m + 1];
  for (i=0; i <= n; i++) {
    d[i][0]=0;
  }
  for (j=0; j <= m; j++) {
    d[0][j]=0;
  }
  for (i=1; i <= n; i++) {
    s_i=s.charAt(i - 1);
    for (j=1; j <= m; j++) {
      t_j=t.charAt(j - 1);
      if (s_i == t_j) {
        d[i][j]=SloppyMath.max(d[i - 1][j],d[i][j - 1],d[i - 1][j - 1] + 1);
      }
 else {
        d[i][j]=Math.max(d[i - 1][j],d[i][j - 1]);
      }
    }
  }
  if (false) {
    int numChars=(int)Math.ceil(Math.log(d[n][m]) / Math.log(10));
    for (i=0; i < numChars + 3; i++) {
      System.err.print(' ');
    }
    for (j=0; j < m; j++) {
      System.err.print("" + t.charAt(j) + " ");
    }
    System.err.println();
    for (i=0; i <= n; i++) {
      System.err.print((i == 0 ? ' ' : s.charAt(i - 1)) + " ");
      for (j=0; j <= m; j++) {
        System.err.print("" + d[i][j] + " ");
      }
      System.err.println();
    }
  }
  return d[n][m];
}
