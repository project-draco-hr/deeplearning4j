{
  heartbeat=context().system().scheduler().schedule(Duration.apply(1,TimeUnit.SECONDS),Duration.apply(1,TimeUnit.SECONDS),new Runnable(){
    @Override public void run(){
      if (!tracker.isDone())       tracker.addWorker(id);
      try {
        checkJobAvailable();
        if (getCurrentJob() != null) {
          Job job=getCurrentJob();
          if (job.getWork() == null) {
            tracker.clearJob(id);
            tracker.enableWorker(id);
            log.warn("Work for worker " + id + " was null");
            return;
          }
          String id=job.workerId();
          if (id == null || id.isEmpty())           job.setWorkerId(id);
          log.info("Confirmation from " + job.workerId() + " on work");
          long start=System.currentTimeMillis();
          workerPerformer.perform(job);
          long end=System.currentTimeMillis();
          long diff=Math.abs(end - start);
          log.info("Job took " + diff + " milliseconds");
          tracker.addUpdate(id,job);
          tracker.clearJob(id);
          setCurrentJob(null);
        }
 else         if (getCurrentJob() == null || !isWorking.get() && tracker.jobFor(id) != null) {
          if (tracker.jobFor(id) != null) {
            tracker.clearJob(id);
            log.info("Clearing stale job... " + id);
          }
        }
      }
 catch (      HazelcastInstanceNotActiveException e1) {
        log.warn("Hazel cast shut down...exiting");
      }
catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
,context().dispatcher());
}
