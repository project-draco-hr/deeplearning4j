{
  heartbeat=context().system().scheduler().schedule(Duration.apply(30,TimeUnit.SECONDS),Duration.apply(30,TimeUnit.SECONDS),new Runnable(){
    @Override public void run(){
      if (!tracker.isDone())       tracker.addWorker(id);
      if (!tracker.isDone() && tracker.needsReplicate(id)) {
        try {
          log.info("Updating worker " + id);
          Job u=(Job)tracker.getCurrent();
          if (u == null) {
            return;
          }
          setCurrentJob(u);
          tracker.doneReplicating(id);
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
      try {
        checkJobAvailable();
        if (getCurrentJob() != null) {
          if (getCurrentJob().getWork() == null) {
            tracker.clearJob(id);
            tracker.enableWorker(id);
            log.warn("Work for worker " + id + " was null");
            return;
          }
          log.info("Confirmation from " + getCurrentJob().workerId() + " on work");
          workerPerformer.perform(getCurrentJob());
          tracker.addUpdate(id,getCurrentJob());
          tracker.clearJob(id);
          setCurrentJob(null);
        }
 else         if (getCurrentJob() == null || !isWorking.get() && tracker.jobFor(id) != null) {
          if (tracker.jobFor(id) != null) {
            tracker.clearJob(id);
            log.info("Clearing stale job... " + id);
          }
        }
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
,context().dispatcher());
}
