{
  MagicQueue queue=new MagicQueue.Builder().build();
  int numDevices=Nd4j.getAffinityManager().getNumberOfDevices();
  queue.add(new DataSet(Nd4j.create(new float[]{1f,2f,3f}),Nd4j.create(new float[]{1f,2f,3f})));
  queue.add(new DataSet(Nd4j.create(new float[]{1f,2f,3f}),Nd4j.create(new float[]{1f,2f,3f})));
  queue.add(new DataSet(Nd4j.create(new float[]{1f,2f,3f}),Nd4j.create(new float[]{1f,2f,3f})));
  queue.add(new DataSet(Nd4j.create(new float[]{1f,2f,3f}),Nd4j.create(new float[]{1f,2f,3f})));
  queue.add(new DataSet(Nd4j.create(new float[]{1f,2f,3f}),Nd4j.create(new float[]{1f,2f,3f})));
  queue.add(new DataSet(Nd4j.create(new float[]{1f,2f,3f}),Nd4j.create(new float[]{1f,2f,3f})));
  queue.add(new DataSet(Nd4j.create(new float[]{1f,2f,3f}),Nd4j.create(new float[]{1f,2f,3f})));
  queue.add(new DataSet(Nd4j.create(new float[]{1f,2f,3f}),Nd4j.create(new float[]{1f,2f,3f})));
  Thread.sleep(1100);
  assertEquals(8 / numDevices,queue.size());
}
