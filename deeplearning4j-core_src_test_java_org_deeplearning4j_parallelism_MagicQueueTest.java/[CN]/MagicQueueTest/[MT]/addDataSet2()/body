{
  CudaEnvironment.getInstance().getConfiguration().allowMultiGPU(true).allowCrossDeviceAccess(false);
  MagicQueue queue=new MagicQueue.Builder().build();
  int numDevices=Nd4j.getAffinityManager().getNumberOfDevices();
  DataSet dataSet_1=new DataSet(Nd4j.create(new float[]{1f,2f,3f}),Nd4j.create(new float[]{1f,2f,3f}));
  DataSet dataSet_2=new DataSet(Nd4j.create(new float[]{1f,2f,3f}),Nd4j.create(new float[]{1f,2f,3f}));
  DataSet dataSet_3=new DataSet(Nd4j.create(new float[]{1f,2f,3f}),Nd4j.create(new float[]{1f,2f,3f}));
  DataSet dataSet_4=new DataSet(Nd4j.create(new float[]{1f,2f,3f}),Nd4j.create(new float[]{1f,2f,3f}));
  DataSet dataSet_5=new DataSet(Nd4j.create(new float[]{1f,2f,3f}),Nd4j.create(new float[]{1f,2f,3f}));
  DataSet dataSet_6=new DataSet(Nd4j.create(new float[]{1f,2f,3f}),Nd4j.create(new float[]{1f,2f,3f}));
  DataSet dataSet_7=new DataSet(Nd4j.create(new float[]{1f,2f,3f}),Nd4j.create(new float[]{1f,2f,3f}));
  DataSet dataSet_8=new DataSet(Nd4j.create(new float[]{1f,2f,3f}),Nd4j.create(new float[]{1f,2f,3f}));
  AllocationPoint point_1=AtomicAllocator.getInstance().getAllocationPoint(dataSet_1.getFeatures());
  AllocationPoint point_2=AtomicAllocator.getInstance().getAllocationPoint(dataSet_2.getFeatures());
  AllocationPoint point_3=AtomicAllocator.getInstance().getAllocationPoint(dataSet_3.getFeatures());
  AllocationPoint point_4=AtomicAllocator.getInstance().getAllocationPoint(dataSet_4.getFeatures());
  assertEquals(0,point_1.getDeviceId().intValue());
  assertEquals(0,point_2.getDeviceId().intValue());
  assertEquals(0,point_3.getDeviceId().intValue());
  assertEquals(0,point_4.getDeviceId().intValue());
  queue.add(dataSet_1);
  queue.add(dataSet_2);
  queue.add(dataSet_3);
  queue.add(dataSet_4);
  queue.add(dataSet_5);
  queue.add(dataSet_6);
  queue.add(dataSet_7);
  queue.add(dataSet_8);
  Thread.sleep(500);
  assertEquals(8 / numDevices,queue.size());
  assertEquals(0,point_1.getDeviceId().intValue());
  assertEquals(1,point_2.getDeviceId().intValue());
  assertEquals(0,point_3.getDeviceId().intValue());
  assertEquals(1,point_4.getDeviceId().intValue());
}
