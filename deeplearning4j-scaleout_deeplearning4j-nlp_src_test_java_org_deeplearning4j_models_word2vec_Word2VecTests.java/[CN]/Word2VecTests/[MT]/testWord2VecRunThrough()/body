{
  ClassPathResource resource=new ClassPathResource("/basic/word2vec.txt");
  File file=resource.getFile().getParentFile();
  DocumentIterator iter=new FileDocumentIterator(file);
  new File("cache.ser").delete();
  TokenizerFactory t=new DefaultTokenizerFactory();
  InMemoryLookupCache cache=new InMemoryLookupCache(100,true,0.025f);
  Word2Vec vec=new Word2Vec.Builder().minWordFrequency(1).layerSize(100).stopWords(new ArrayList<String>()).vocabCache(cache).windowSize(5).iterate(iter).tokenizerFactory(t).build();
  assertEquals(new ArrayList<String>(),vec.getStopWords());
  vec.fit();
  assertTrue(Arrays.equals(cache.wordFor("This").getCodes(),new int[]{0}));
  assertTrue(Arrays.equals(cache.wordFor("This").getPoints(),new int[]{0}));
  assertTrue(Arrays.equals(cache.wordFor("test").getCodes(),new int[]{1}));
  assertTrue(Arrays.equals(cache.wordFor("test").getPoints(),new int[]{0}));
  assertTrue(vec.getCache().numWords() > 0);
  assertEquals(0,cache.indexOf("This"));
  assertEquals(1,cache.indexOf("test"));
  new File("cache.ser").delete();
}
