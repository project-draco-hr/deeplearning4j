{
  if (message instanceof DistributedPubSubMediator.SubscribeAck || message instanceof DistributedPubSubMediator.UnsubscribeAck) {
    DistributedPubSubMediator.SubscribeAck ack=(DistributedPubSubMediator.SubscribeAck)message;
    mediator.tell(new DistributedPubSubMediator.Publish(ClusterListener.TOPICS,message),getSelf());
    log.info("Subscribed " + ack.toString());
  }
 else   if (message instanceof WorkerState) {
    WorkerState s=(WorkerState)message;
    if (s.getWorkerId() != null) {
      this.addWorker(s);
      getSender().tell(Ack.getInstance(),getSelf());
    }
  }
 else   if (message instanceof NeedsModelMessage) {
    log.info("Sending networks over");
    getSender().tell(masterResults.get(),getSelf());
  }
 else   if (message instanceof DoneMessage) {
    log.info("Received done message");
    masterResults=this.compute(updates,updates);
    epochsComplete++;
    updates.clear();
    batchActor.tell(new MoreWorkMessage(masterResults),getSelf());
  }
 else   if (message instanceof ClearWorker) {
    log.info("Removing worker with id " + ((ClearWorker)message).getId());
    this.workers.remove(((ClearWorker)message).getId());
  }
 else   if (message instanceof String) {
    WorkerState state=this.workers.get(message.toString());
    if (state == null) {
      state=new WorkerState(message.toString(),getSender());
      state.setAvailable(true);
      log.info("Worker " + state.getWorkerId() + " available for work");
    }
 else {
      state.setAvailable(true);
      log.info("Worker " + state.getWorkerId() + " available for work");
    }
    getSender().tell(Ack.getInstance(),getSelf());
  }
 else   if (message instanceof UpdateableImpl) {
    UpdateableImpl up=(UpdateableImpl)message;
    updates.add(up);
    log.info("Num updates so far " + updates.size() + " and partition size is "+ partition);
    if (updates.size() >= partition) {
      masterResults=this.compute(updates,updates);
      for (      String key : workers.keySet()) {
        workers.get(key).setAvailable(true);
        log.info("Freeing " + key + " for work post batch completion");
      }
      epochsComplete++;
      batchActor.tell(new MoreWorkMessage(masterResults),getSelf());
      updates.clear();
      log.info("Broadcasting weights");
      mediator.tell(new DistributedPubSubMediator.Publish(BROADCAST,masterResults),getSelf());
    }
  }
 else   if (message instanceof Job) {
    Job j=(Job)message;
    if (!j.isDone()) {
      currentJobs.put(j.getWorkerId(),j);
      log.info("Ack from worker " + j.getWorkerId() + " on job");
    }
 else {
      log.info("Job " + j.getWorkerId() + " finished");
      currentJobs.remove(j.getWorkerId());
    }
  }
 else   if (message instanceof List || message instanceof Pair) {
    if (message instanceof List) {
      List<DataSet> list=(List<DataSet>)message;
      splitListIntoRows(list);
      sendToWorkers(list);
    }
 else     if (message instanceof Pair) {
      DataSet pair=(DataSet)message;
      List<DoubleMatrix> inputs=pair.getFirst().rowsAsList();
      List<DoubleMatrix> labels=pair.getSecond().rowsAsList();
      List<DataSet> pairs=new ArrayList<>();
      for (int i=0; i < inputs.size(); i++) {
        pairs.add(new DataSet(inputs.get(i),labels.get(i)));
      }
      sendToWorkers(pairs);
    }
  }
 else   unhandled(message);
}
