{
  if (message instanceof DistributedPubSubMediator.SubscribeAck || message instanceof DistributedPubSubMediator.UnsubscribeAck) {
    DistributedPubSubMediator.SubscribeAck ack=(DistributedPubSubMediator.SubscribeAck)message;
    mediator.tell(new DistributedPubSubMediator.Publish(ClusterListener.TOPICS,message),getSelf());
    log.info("Subscribed " + ack.toString());
  }
 else   if (message instanceof WorkerState) {
    WorkerState s=(WorkerState)message;
    if (s.getWorkerId() != null) {
      this.addWorker(s);
      getSender().tell(Ack.getInstance(),getSelf());
    }
  }
 else   if (message instanceof GiveMeMyJob) {
    GiveMeMyJob j=(GiveMeMyJob)message;
    List<Job> jobs=stateTracker.currentJobs();
    for (    Job j2 : jobs) {
      if (j2.getWorkerId().equals(j.getId())) {
        j.setJob(j2);
        log.info("Returning current job for worker " + j.getId());
        mediator.tell(new DistributedPubSubMediator.Publish(j.getId(),j),getSelf());
      }
    }
  }
 else   if (message instanceof NeedsModelMessage) {
    log.info("Sending networks over");
    getSender().tell(getResults().get(),getSelf());
  }
 else   if (message instanceof DoneMessage) {
    log.info("Received done message");
    UpdateableImpl masterResults=null;
    if (!updates.isEmpty()) {
      masterResults=this.compute(updates,updates);
      stateTracker.setCurrent(masterResults);
      epochsComplete++;
      updates.clear();
    }
 else     masterResults=this.getMasterResults();
    if (pretrain && stateTracker.currentJobs().isEmpty()) {
      batchActor.tell(ResetMessage.getInstance(),getSelf());
      log.info("Switching to finetune mode");
      pretrain=false;
      stateTracker.moveToFinetune();
      SerializationUtils.saveObject(masterResults.get(),new File("pretrain-model.bin"));
      Map<String,WorkerState> workers=stateTracker.currentWorkers();
      for (      String key : workers.keySet()) {
        setWorkerDone(key);
        log.info("Freeing " + key + " for work post batch completion");
      }
      batchActor.tell(ResetMessage.getInstance(),getSelf());
    }
 else     if (stateTracker.currentJobs().isEmpty()) {
      isDone=true;
      log.info("Done training!");
    }
  }
 else   if (message instanceof AlreadyWorking) {
    List<Job> jobs=stateTracker.currentJobs();
    AlreadyWorking working=(AlreadyWorking)message;
    for (    Job j : jobs) {
      if (j.getWorkerId().equals(working.getId())) {
        stateTracker.requeueJob(j);
        break;
      }
    }
  }
 else   if (message instanceof ClearWorker) {
    log.info("Removing worker with id " + ((ClearWorker)message).getId());
    ClearWorker clear=(ClearWorker)message;
    Map<String,WorkerState> workers=stateTracker.currentWorkers();
    WorkerState clear2=workers.get(clear.getId());
    if (clear != null)     stateTracker.clearWorker(clear2);
  }
 else   if (message instanceof String) {
    Map<String,WorkerState> workers=stateTracker.currentWorkers();
    WorkerState state=workers.get(message.toString());
    if (state == null) {
      state=new WorkerState(message.toString());
      state.setAvailable(true);
      addWorker(state);
      log.info("Worker " + state.getWorkerId() + " available for work");
    }
 else {
      state.setAvailable(true);
      log.info("Worker " + state.getWorkerId() + " available for work");
    }
    getSender().tell(Ack.getInstance(),getSelf());
  }
 else   if (message instanceof UpdateableImpl) {
    UpdateableImpl up=(UpdateableImpl)message;
    updates.add(up);
    log.info("Num updates so far " + updates.size() + " and partition size is "+ partition);
    List<Job> currentJobs=stateTracker.currentJobs();
    if (updates.size() >= partition || everyWorkerAvailable() || currentJobs.isEmpty())     nextIteration();
  }
 else   if (message instanceof Job) {
    Job j=(Job)message;
    if (!j.isDone()) {
      log.info("Ack from worker " + j.getWorkerId() + " on job");
    }
 else {
      log.info("Worker " + j.getWorkerId() + " is done working");
      setWorkerDone(j.getWorkerId());
      stateTracker.jobDone(j);
    }
  }
 else   if (message instanceof List || message instanceof DataSet) {
    if (message instanceof List) {
      List<DataSet> list=(List<DataSet>)message;
      splitListIntoRows(list);
      sendToWorkers(list);
    }
 else     if (message instanceof DataSet) {
      DataSet pair=(DataSet)message;
      List<DoubleMatrix> inputs=pair.getFirst().rowsAsList();
      List<DoubleMatrix> labels=pair.getSecond().rowsAsList();
      List<DataSet> pairs=new ArrayList<>();
      for (int i=0; i < inputs.size(); i++) {
        pairs.add(new DataSet(inputs.get(i),labels.get(i)));
      }
      sendToWorkers(pairs);
    }
  }
 else   unhandled(message);
}
