{
  if (message instanceof DistributedPubSubMediator.SubscribeAck || message instanceof DistributedPubSubMediator.UnsubscribeAck) {
    DistributedPubSubMediator.SubscribeAck ack=(DistributedPubSubMediator.SubscribeAck)message;
    mediator.tell(new DistributedPubSubMediator.Publish(ClusterListener.TOPICS,message),getSelf());
    log.info("Subscribed " + ack.toString());
  }
 else   if (message instanceof NoJobFound) {
    partition--;
    if (updates.size() >= partition)     nextIteration();
  }
 else   if (message instanceof DoneMessage) {
    log.info("Received done message");
    checkDone();
  }
 else   if (message instanceof String) {
    getSender().tell(Ack.getInstance(),getSelf());
  }
 else   if (message instanceof UpdateableImpl) {
    UpdateableImpl up=(UpdateableImpl)message;
    updates.add(up);
    log.info("Num updates so far " + updates.size() + " and partition size is "+ partition);
    if (updates.size() >= partition)     nextIteration();
  }
 else   if (message instanceof List || message instanceof DataSet) {
    if (message instanceof List) {
      List<DataSet> list=(List<DataSet>)message;
      splitListIntoRows(list);
      sendToWorkers(list);
    }
 else     if (message instanceof DataSet) {
      DataSet pair=(DataSet)message;
      List<DoubleMatrix> inputs=pair.getFirst().rowsAsList();
      List<DoubleMatrix> labels=pair.getSecond().rowsAsList();
      List<DataSet> pairs=new ArrayList<>();
      for (int i=0; i < inputs.size(); i++) {
        pairs.add(new DataSet(inputs.get(i),labels.get(i)));
      }
      sendToWorkers(pairs);
    }
  }
 else   unhandled(message);
}
