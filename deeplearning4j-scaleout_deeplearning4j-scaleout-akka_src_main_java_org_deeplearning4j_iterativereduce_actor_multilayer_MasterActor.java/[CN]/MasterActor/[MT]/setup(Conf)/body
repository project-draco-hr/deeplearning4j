{
  log.info("Starting workers");
  ActorSystem system=ActorSystem.create(context().system().name());
  Props p=new RoundRobinPool(Runtime.getRuntime().availableProcessors()).props(WorkerActor.propsFor(conf));
  int totalInstances=100;
  int maxInstancesPerNode=3;
  boolean allowLocalRoutees=true;
  String useRole="worker";
  system.actorOf(new ClusterRouterPool(new AdaptiveLoadBalancingPool(SystemLoadAverageMetricsSelector.getInstance(),0),new ClusterRouterPoolSettings(totalInstances,maxInstancesPerNode,allowLocalRoutees,useRole)).props(p),"worker");
  try {
    Thread.sleep(15000);
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
  log.info("Broadcasting initial master network");
  BaseMultiLayerNetwork network=this.network == null ? new BaseMultiLayerNetwork.Builder<>().numberOfInputs(conf.getnIn()).numberOfOutPuts(conf.getnOut()).withClazz(conf.getMultiLayerClazz()).hiddenLayerSizes(conf.getLayerSizes()).renderWeights(conf.getRenderWeightEpochs()).useRegularization(conf.isUseRegularization()).withSparsity(conf.getSparsity()).build() : this.network;
  masterResults=new UpdateableImpl(network);
  mediator.tell(new DistributedPubSubMediator.Publish(BROADCAST,masterResults),getSelf());
}
