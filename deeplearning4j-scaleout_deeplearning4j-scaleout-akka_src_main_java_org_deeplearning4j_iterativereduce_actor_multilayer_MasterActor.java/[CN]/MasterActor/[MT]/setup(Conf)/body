{
  log.info("Starting workers");
  ActorSystem system=context().system();
  RoundRobinPool pool=new RoundRobinPool(Runtime.getRuntime().availableProcessors());
  Props p=pool.props(WorkerActor.propsFor(conf,stateTracker));
  p=ClusterSingletonManager.defaultProps(p,"master",PoisonPill.getInstance(),"master");
  system.actorOf(p,"worker");
  try {
    Thread.sleep(30000);
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
  log.info("Broadcasting initial master network");
  BaseMultiLayerNetwork network=this.network == null ? new BaseMultiLayerNetwork.Builder<>().numberOfInputs(conf.getnIn()).numberOfOutPuts(conf.getnOut()).withClazz(conf.getMultiLayerClazz()).hiddenLayerSizes(conf.getLayerSizes()).renderWeights(conf.getRenderWeightEpochs()).useRegularization(conf.isUseRegularization()).withSparsity(conf.getSparsity()).useAdaGrad(conf.isUseAdaGrad()).withMultiLayerGradientListeners(conf.getMultiLayerGradientListeners()).withGradientListeners(conf.getGradientListeners()).build() : this.network;
  network.synchonrizeRng();
  if (conf.getColumnMeans() != null)   network.setColumnMeans(conf.getColumnMeans());
  if (conf.getColumnStds() != null)   network.setColumnStds(conf.getColumnStds());
  UpdateableImpl masterResults=new UpdateableImpl(network);
  try {
    this.stateTracker.setCurrent(masterResults);
  }
 catch (  Exception e1) {
    throw new RuntimeException(e1);
  }
  mediator.tell(new DistributedPubSubMediator.Publish(BROADCAST,masterResults),getSelf());
}
