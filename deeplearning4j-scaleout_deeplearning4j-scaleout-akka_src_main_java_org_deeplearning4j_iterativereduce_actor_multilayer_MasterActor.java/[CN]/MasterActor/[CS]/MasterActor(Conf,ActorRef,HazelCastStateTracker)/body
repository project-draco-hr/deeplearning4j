{
  super(conf,batchActor,stateTracker);
  setup(conf);
  forceNextPhase=context().system().scheduler().schedule(Duration.create(1,TimeUnit.MINUTES),Duration.create(1,TimeUnit.MINUTES),new Runnable(){
    @Override public void run(){
      try {
        List<Job> currentJobs=stateTracker.currentJobs();
        log.info("Status check on next iteration");
        if (stateTracker.getCurrent() == null) {
          try {
            log.info("State tracker did not have a network; reinitializing");
            if (network == null)             stateTracker.setCurrent(new UpdateableImpl(network));
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
        List<UpdateableImpl> updates=stateTracker.updates();
        if (updates.size() >= partition || currentJobs.isEmpty())         nextIteration();
        log.info("Current jobs left " + currentJobs);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
,context().dispatcher());
  this.clearStateWorkers=context().system().scheduler().schedule(Duration.create(1,TimeUnit.MINUTES),Duration.create(1,TimeUnit.MINUTES),new Runnable(){
    @Override public void run(){
      try {
        long now=System.currentTimeMillis();
        Map<String,Long> heartbeats=MasterActor.this.stateTracker.getHeartBeats();
        for (        String key : heartbeats.keySet()) {
          long lastChecked=heartbeats.get(key);
          long diff=now - lastChecked;
          long seconds=TimeUnit.MILLISECONDS.toSeconds(diff);
          if (seconds >= 30) {
            log.info("Removing stale worker " + key);
            MasterActor.this.stateTracker.removeWorker(key);
            partition--;
          }
        }
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
,context().dispatcher());
}
