{
  Function2 foldBetweenPartitions=new Function2<Integer,Iterator<AtomicLong>,Iterator<Long>>(){
    @Override public Iterator<Long> call(    Integer ind,    Iterator<AtomicLong> partition) throws Exception {
      int sumToAdd=0;
      Counter<Integer> maxPerPartitionCounterInScope=broadcastedMaxPerPartitionCounter.value();
      if (ind != 0) {
        for (int i=0; i < ind; i++) {
          sumToAdd+=maxPerPartitionCounterInScope.getCount(i);
        }
      }
      List<Long> itemsAddedToList=new ArrayList<>();
      while (partition.hasNext()) {
        itemsAddedToList.add(partition.next().get() + sumToAdd);
      }
      return itemsAddedToList.iterator();
    }
  }
;
  cumSumRDD=foldWithinPartitionRDD.mapPartitionsWithIndex(foldBetweenPartitions,true).setName("cumSumRDD").cache();
  foldWithinPartitionRDD.unpersist();
}
