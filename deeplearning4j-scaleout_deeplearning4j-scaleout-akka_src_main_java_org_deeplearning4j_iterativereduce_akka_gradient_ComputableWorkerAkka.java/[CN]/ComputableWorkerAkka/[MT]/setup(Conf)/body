{
  hiddenLayerSizes=conf.getLayerSizes();
  numOuts=conf.getnOut();
  numIns=conf.getnIn();
  numHiddenNeurons=hiddenLayerSizes.length;
  seed=conf.getSeed();
  this.useRegularization=conf.isUseRegularization();
  momentum=conf.getMomentum();
  this.activation=conf.getFunction();
  RandomGenerator rng=new MersenneTwister(conf.getSeed());
  network=new BaseMultiLayerNetwork.Builder<>().numberOfInputs(numIns).numberOfOutPuts(numOuts).withActivation(activation).hiddenLayerSizes(hiddenLayerSizes).withRng(rng).useRegularization(useRegularization).withMomentum(momentum).withClazz(conf.getMultiLayerClazz()).build();
  learningRate=conf.getPretrainLearningRate();
  preTrainEpochs=conf.getPretrainEpochs();
  fineTuneEpochs=conf.getFinetuneEpochs();
  corruptionLevel=conf.getCorruptionLevel();
  extraParams=conf.getDeepLearningParams();
}
