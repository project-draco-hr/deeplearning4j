{
  if (cache) {
    this.words.add(words);
    indexManager.execute(new Runnable(){
      @Override public void run(){
        try {
          if (writer == null) {
            if (!indexBeingCreated.get())             index("word2vec-path",true);
 else {
              waitOnWriter();
            }
          }
          Document d=new Document();
          for (          VocabWord word : words) {
            d.add(new TextField(WORD_FIELD,word.getWord(),Field.Store.YES));
          }
          writer.addDocument(d,analyzer);
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        initReader();
      }
    }
);
  }
 else {
    Document d=new Document();
    for (    VocabWord word : words) {
      d.add(new TextField(WORD_FIELD,word.getWord(),Field.Store.YES));
    }
    try {
      writer.addDocument(d,analyzer);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    initReader();
  }
  totalWords.set(totalWords.get() + words.size());
  for (  VocabWord word : words) {
    if (sample > 0) {
      double ran=(Math.sqrt(word.getWordFrequency() / (sample * numDocuments())) + 1) * (sample * numDocuments()) / word.getWordFrequency();
      if (ran < (nextRandom.get() & 0xFFFF) / (double)65536) {
        continue;
      }
      currMiniBatch.add(word);
    }
 else {
      currMiniBatch.add(word);
      if (currMiniBatch.size() >= batchSize) {
        miniBatches.add(new ArrayList<>(currMiniBatch));
        currMiniBatch.clear();
      }
    }
    currMiniBatch.add(word);
    if (currMiniBatch.size() >= batchSize) {
      miniBatches.add(new ArrayList<>(currMiniBatch));
      currMiniBatch.clear();
    }
  }
}
