{
  RandomGenerator gen=new MersenneTwister(123);
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().withActivationType(NeuralNetConfiguration.ActivationType.NET_ACTIVATION).momentum(9e-1f).weightInit(WeightInit.DISTRIBUTION).dist(Distributions.normal(gen,1e-1)).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).rng(gen).iterations(10).learningRate(1e-1f).nIn(784).nOut(10).list(4).hiddenLayerSizes(new int[]{500,250,200}).override(new NeuralNetConfiguration.ConfOverride(){
    @Override public void override(    int i,    NeuralNetConfiguration.Builder builder){
      if (i == 3) {
        builder.weightInit(WeightInit.ZERO);
        builder.activationFunction(Activations.softMaxRows());
        builder.lossFunction(LossFunctions.LossFunction.MCXENT);
      }
    }
  }
).build();
  DBN d=new DBN.Builder().layerWiseConfiguration(conf).build();
  NeuralNetConfiguration.setClassifier(d.getOutputLayer().conf());
  MnistDataFetcher fetcher=new MnistDataFetcher(true);
  fetcher.fetch(10);
  DataSet d2=fetcher.next();
  d.fit(d2);
  INDArray predict2=d.output(d2.getFeatureMatrix());
  Evaluation eval=new Evaluation();
  eval.eval(d2.getLabels(),predict2);
  log.info(eval.stats());
  int[] predict=d.predict(d2.getFeatureMatrix());
  log.info("Predict " + Arrays.toString(predict));
}
