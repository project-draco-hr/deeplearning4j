{
  RandomGenerator gen=new MersenneTwister(123);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().withActivationType(NeuralNetConfiguration.ActivationType.NET_ACTIVATION).momentum(9e-1f).weightInit(WeightInit.DISTRIBUTION).dist(Distributions.normal(gen,1e-1)).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).rng(gen).iterations(10).learningRate(1e-1f).nIn(784).nOut(10).build();
  DBN dbn=new DBN.Builder().configure(conf).hiddenLayerSizes(new int[]{500,250,200}).build();
  dbn.getInputLayer().conf().setRenderWeightIterations(10);
  NeuralNetConfiguration.setClassifier(dbn.getOutputLayer().conf());
  MnistDataFetcher fetcher=new MnistDataFetcher(true);
  fetcher.fetch(10);
  DataSet dataSet=fetcher.next();
  dbn.fit(dataSet);
  INDArray predictions=dbn.output(dataSet.getFeatureMatrix());
  Evaluation eval=new Evaluation();
  eval.eval(dataSet.getLabels(),predictions);
  LOG.info(eval.stats());
  int[] predict=dbn.predict(dataSet.getFeatureMatrix());
  LOG.info("Predict " + Arrays.toString(predict));
}
