{
  RandomGenerator gen=new MersenneTwister(123);
  List<NeuralNetConfiguration> conf=new NeuralNetConfiguration.Builder().iterations(1).weightInit(WeightInit.DISTRIBUTION).dist(Distributions.normal(gen,1e-2)).activationFunction(Activations.tanh()).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).optimizationAlgo(NeuralNetwork.OptimizationAlgorithm.GRADIENT_DESCENT).rng(gen).learningRate(1e-2f).nIn(4).nOut(3).list(2).override(new NeuralNetConfiguration.ConfOverride(){
    @Override public void override(    int i,    NeuralNetConfiguration.Builder builder){
      if (i == 1) {
        builder.weightInit(WeightInit.ZERO);
        builder.activationFunction(Activations.softMaxRows());
        builder.lossFunction(LossFunctions.LossFunction.MCXENT);
      }
    }
  }
).build();
  DBN d=new DBN.Builder().layerWiseConfiguration(conf).hiddenLayerSizes(new int[]{3}).build();
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  DataSet next=iter.next(100);
  next.normalizeZeroMeanZeroUnitVariance();
  d.fit(next);
  Evaluation eval=new Evaluation();
  INDArray output=d.output(next.getFeatureMatrix());
  eval.eval(next.getLabels(),output);
  log.info("Score " + eval.stats());
}
