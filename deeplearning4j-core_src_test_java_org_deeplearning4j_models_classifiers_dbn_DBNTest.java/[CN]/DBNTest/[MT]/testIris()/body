{
  RandomGenerator gen=new MersenneTwister(123);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).rng(gen).learningRate(1e-2f).nIn(4).nOut(3).build();
  DBN d=new DBN.Builder().configure(conf).hiddenLayerSizes(new int[]{3}).build();
  NeuralNetConfiguration.setClassifier(d.getOutputLayer().conf());
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  DataSet next=iter.next(150);
  next.scaleMinAndMax(0,1);
  d.fit(next);
  Evaluation eval=new Evaluation();
  INDArray output=d.output(next.getFeatureMatrix());
  eval.eval(next.getLabels(),output);
  log.info("Score " + eval.stats());
}
