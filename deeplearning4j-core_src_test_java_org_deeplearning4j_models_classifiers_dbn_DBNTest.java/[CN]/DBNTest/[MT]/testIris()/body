{
  RandomGenerator gen=new MersenneTwister(123);
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().iterations(10).weightInit(WeightInit.SIZE).optimizationAlgo(OptimizationAlgorithm.HESSIAN_FREE).activationFunction(Activations.tanh()).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).lossFunction(LossFunctions.LossFunction.RMSE_XENT).rng(gen).constrainGradientToUnitNorm(true).learningRate(1e-1f).nIn(4).nOut(3).list(3).hiddenLayerSizes(new int[]{3,2}).override(new NeuralNetConfiguration.ConfOverride(){
    @Override public void override(    int i,    NeuralNetConfiguration.Builder builder){
      if (i == 2) {
        builder.weightInit(WeightInit.ZERO);
        builder.activationFunction(Activations.softMaxRows());
        builder.lossFunction(LossFunctions.LossFunction.MCXENT);
      }
    }
  }
).build();
  DBN d=new DBN.Builder().layerWiseConfiguration(conf).build();
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  Nd4j.ENFORCE_NUMERICAL_STABILITY=true;
  DataSet next=iter.next();
  next.normalizeZeroMeanZeroUnitVariance();
  next.shuffle();
  SplitTestAndTrain split=next.splitTestAndTrain(140);
  DataSet train=split.getTrain();
  d.fit(train);
  DataSet test=split.getTest();
  Evaluation eval=new Evaluation();
  INDArray output=d.output(test.getFeatureMatrix());
  eval.eval(test.getLabels(),output);
  log.info("Score " + eval.stats());
}
