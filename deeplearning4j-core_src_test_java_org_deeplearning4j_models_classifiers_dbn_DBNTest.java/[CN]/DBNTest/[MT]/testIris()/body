{
  RandomGenerator gen=new MersenneTwister(123);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().hiddenUnit(RBM.HiddenUnit.RECTIFIED).regularization(true).useHiddenActivationsForwardProp(false).visibleUnit(RBM.VisibleUnit.GAUSSIAN).momentum(5e-1f).l2(1e-2f).activationFunction(Activations.tanh()).iterations(100).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).rng(gen).learningRate(1e-2f).nIn(4).nOut(3).build();
  DBN d=new DBN.Builder().configure(conf).hiddenLayerSizes(new int[]{3,2}).build();
  d.getOutputLayer().conf().setActivationFunction(Activations.softMaxRows());
  d.getOutputLayer().conf().setLossFunction(LossFunctions.LossFunction.MCXENT);
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  DataSet next=iter.next(150);
  next.normalizeZeroMeanZeroUnitVariance();
  d.fit(next);
  Evaluation eval=new Evaluation();
  INDArray output=d.output(next.getFeatureMatrix());
  eval.eval(next.getLabels(),output);
  log.info("Score " + eval.stats());
}
