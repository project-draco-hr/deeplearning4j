{
  super();
  setPreferredSize(new Dimension(200,200));
  setBorder(BorderFactory.createLineBorder(Color.black));
  JLabel title=new JLabel("Options");
  add(title);
  JButton next=new JButton("Next");
  JButton previous=new JButton("Previous");
  JButton setInput=new JButton("Set Input");
  JButton setOutput=new JButton("Set Output");
  JButton update=new JButton("Update");
  JButton reset=new JButton("Reset");
  next.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      input.nextImage();
      input.repaint();
    }
  }
);
  previous.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      input.previousImage();
      input.repaint();
    }
  }
);
  setInput.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      try {
        manager.setCurrent(input.imageIndex);
        int[][] image=manager.readImage();
        int size=image.length * image[0].length;
        int[] inputNodes=new int[size];
        for (int i=0; i < size; i++) {
          inputNodes[i]=i;
        }
        float[] inputValues=new float[size];
        for (int i=0; i < image.length; i++) {
          for (int j=0; j < image[0].length; j++) {
            inputValues[i * image.length + j]=(float)(image[i][j]) / 255f;
          }
        }
        network.setInput(inputNodes,inputValues);
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
      output.repaint();
    }
  }
);
  setOutput.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int size=outputRows * outputCols;
      int[] outputNodes=new int[size];
      int index=xnodes * ynodes - 1 - size;
      for (int i=0; i < size; i++) {
        outputNodes[i]=index;
        index++;
      }
      int target;
      try {
        target=manager.readLabel();
        float[][] values=new float[outputRows][outputCols];
        for (int i=0; i < outputCols; i++) {
          values[target][i]=1.0f;
        }
        float[] outputValues=new float[size];
        for (int i=0; i < outputRows; i++) {
          for (int j=0; j < outputCols; j++) {
            outputValues[i * outputCols + j]=values[i][j];
          }
        }
        network.setOutput(outputNodes,outputValues);
        input.repaint();
        output.repaint();
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  update.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      network.update();
      output.repaint();
    }
  }
);
  reset.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      network.reset();
      output.repaint();
    }
  }
);
  add(next);
  add(previous);
  add(setInput);
  add(setOutput);
  add(update);
  add(reset);
}
