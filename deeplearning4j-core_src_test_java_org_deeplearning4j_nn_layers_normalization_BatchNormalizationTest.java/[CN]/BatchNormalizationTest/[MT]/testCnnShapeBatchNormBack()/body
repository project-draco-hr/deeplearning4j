{
  Layer layer=setupActivations(2,2);
  layer.setParam("gamma",Nd4j.linspace(2,3,2));
  layer.setParam("beta",Nd4j.linspace(2,3,2));
  layer.preOutput(cnnInput);
  Pair<Gradient,INDArray> actualOut=layer.backpropGradient(cnnEpsilon);
  INDArray expectedEpsilonOut=Nd4j.create(new double[]{-7.81250620e-11,-7.81250620e-11,-7.81250620e-11,-7.81250620e-11,-7.81250620e-11,-7.81250620e-11,-7.81250620e-11,-7.81250620e-11,-7.81250620e-11,-7.81250620e-11,-7.81250620e-11,-7.81250620e-11,-7.81250620e-11,-7.81250620e-11,-7.81250620e-11,-7.81250620e-11,-1.17187149e-10,-1.17187149e-10,-1.17187149e-10,-1.17187149e-10,-1.17188037e-10,-1.17187149e-10,-1.17187149e-10,-1.17187149e-10,-1.17187149e-10,-1.17187149e-10,-1.17187149e-10,-1.17188037e-10,-1.17186261e-10,-1.17186261e-10,-1.17188037e-10,-1.17188037e-10,7.81250620e-11,7.81250620e-11,7.81246179e-11,7.81255061e-11,7.81250620e-11,7.81250620e-11,7.81246179e-11,7.81255061e-11,7.81255061e-11,7.81250620e-11,7.81246179e-11,7.81246179e-11,7.81255061e-11,7.81255061e-11,7.81250620e-11,7.81246179e-11,1.17187149e-10,1.17187149e-10,1.17188037e-10,1.17187149e-10,1.17188037e-10,1.17187149e-10,1.17187149e-10,1.17188037e-10,1.17187149e-10,1.17188037e-10,1.17187149e-10,1.17186261e-10,1.17188037e-10,1.17188037e-10,1.17188037e-10,1.17186261e-10},new int[]{2,2,4,4});
  INDArray expectedGGamma=Nd4j.create(new double[]{512,512},new int[]{1,2});
  INDArray expectedBeta=Nd4j.create(new double[]{752,1264},new int[]{1,2});
  assertEquals(expectedEpsilonOut,actualOut.getSecond());
  assertEquals(expectedGGamma,actualOut.getFirst().getGradientFor("gamma"));
  assertEquals(expectedBeta,actualOut.getFirst().getGradientFor("beta"));
}
