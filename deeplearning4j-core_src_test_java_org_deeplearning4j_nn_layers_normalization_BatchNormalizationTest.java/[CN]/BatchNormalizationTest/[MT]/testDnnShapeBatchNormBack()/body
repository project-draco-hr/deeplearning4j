{
  Layer layer=setupActivations(2,16);
  layer.setParam("gamma",Nd4j.linspace(0,15,16));
  layer.setParam("beta",Nd4j.linspace(0,15,16));
  layer.preOutput(dnnInput);
  layer.setBackpropGradientsViewArray(Nd4j.create(1,32));
  Pair<Gradient,INDArray> actualOut=layer.backpropGradient(dnnEpsilon);
  INDArray dnnExpectedEpsilonOut=Nd4j.create(new double[]{0.00000000e+00,-1.56249680e-10,-3.12499360e-10,-4.68748595e-10,-6.24998719e-10,-7.81248843e-10,-9.37497191e-10,-1.09374731e-09,-1.24999744e-09,-1.40624934e-09,-1.56249413e-09,-1.71874603e-09,-1.87499438e-09,-2.03124273e-09,-2.18749818e-09,-2.34373942e-09,0.00000000e+00,1.56249680e-10,3.12499804e-10,4.68748595e-10,6.24997831e-10,7.81248843e-10,9.37497191e-10,1.09374731e-09,1.24999744e-09,1.40624579e-09,1.56249769e-09,1.71874603e-09,1.87499438e-09,2.03124983e-09,2.18749818e-09,2.34374653e-09},new int[]{2,16});
  INDArray dnnExpectedEpsilonOutOther=Nd4j.create(new double[]{16.,15.,14.,13.,12.,11.,10.,9.,8.,7.,6.,5.,4.,3.,2.,1.,-16.,-15.,-14.,-13.,-12.,-11.,-10.,-9.,-8.,-7.,-6.,-5.,-4.,-3.,-2.,-1.},new int[]{2,16});
  INDArray expectedGGamma=Nd4j.create(new double[]{16.,16.,16.,16.,16.,16.,16.,16.,16.,16.,16.,16.,16.,16.,16.,16.},new int[]{1,16});
  INDArray expectedBeta=Nd4j.create(new double[]{16.,18.,20.,22.,24.,26.,28.,30.,32.,34.,36.,38.,40.,42.,44.,46.},new int[]{1,16});
  assertEquals(dnnExpectedEpsilonOut,actualOut.getSecond());
  assertEquals(expectedGGamma,actualOut.getFirst().getGradientFor("gamma"));
  assertEquals(expectedBeta,actualOut.getFirst().getGradientFor("beta"));
}
