{
  double eps=1e-5;
  int nIn=4;
  int hw=3;
  int minibatch=2;
  Nd4j.getRandom().setSeed(12345);
  INDArray input=Nd4j.rand('c',new int[]{minibatch,nIn,hw,hw});
  INDArray gamma=Nd4j.ones(1,nIn);
  INDArray beta=Nd4j.zeros(1,nIn);
  Layer l=getLayer(nIn,eps,false,-1,-1);
  INDArray mean=input.mean(0,2,3);
  INDArray var=input.var(false,0,2,3);
  INDArray xHat=Nd4j.getExecutioner().execAndReturn(new BroadcastSubOp(input,mean,input.dup(),1));
  Nd4j.getExecutioner().execAndReturn(new BroadcastDivOp(xHat,Transforms.sqrt(var.add(eps),true),xHat,1));
  INDArray outExpected=Nd4j.getExecutioner().execAndReturn(new BroadcastMulOp(xHat,gamma,xHat.dup(),1));
  Nd4j.getExecutioner().execAndReturn(new BroadcastAddOp(outExpected,beta,outExpected,1));
  INDArray out=l.activate(input,true);
  System.out.println(Arrays.toString(outExpected.data().asDouble()));
  System.out.println(Arrays.toString(out.data().asDouble()));
  assertEquals(outExpected,out);
  INDArray epsilon=Nd4j.rand('c',new int[]{minibatch,nIn,hw,hw});
  int effectiveMinibatch=minibatch * hw * hw;
  INDArray dldgammaExp=epsilon.mul(xHat).sum(0,2,3);
  INDArray dldbetaExp=epsilon.sum(0,2,3);
  INDArray dldxhat=Nd4j.getExecutioner().execAndReturn(new BroadcastMulOp(epsilon,gamma,epsilon.dup(),1));
  INDArray inputSubMean=Nd4j.getExecutioner().execAndReturn(new BroadcastSubOp(input,mean,input.dup(),1));
  INDArray dldvar=dldxhat.mul(inputSubMean).mul(-0.5);
  dldvar=Nd4j.getExecutioner().execAndReturn(new BroadcastMulOp(dldvar,Transforms.pow(var.add(eps),-3.0 / 2.0,true),dldvar.dup(),1));
  dldvar=dldvar.sum(0,2,3);
  INDArray dldmu=Nd4j.getExecutioner().execAndReturn(new BroadcastMulOp(dldxhat,Transforms.pow(var.add(eps),-1.0 / 2.0,true),dldxhat.dup(),1)).neg().sum(0,2,3);
  dldmu=dldmu.add(dldvar.mul(inputSubMean.mul(-2.0).sum(0,2,3).div(effectiveMinibatch)));
  INDArray dldinExp=Nd4j.getExecutioner().execAndReturn(new BroadcastMulOp(dldxhat,Transforms.pow(var.add(eps),-1.0 / 2.0,true),dldxhat.dup(),1));
  dldinExp=dldinExp.add(Nd4j.getExecutioner().execAndReturn(new BroadcastMulOp(inputSubMean.mul(2.0 / effectiveMinibatch),dldvar,inputSubMean.dup(),1)));
  dldinExp=Nd4j.getExecutioner().execAndReturn(new BroadcastAddOp(dldinExp,dldmu.mul(1.0 / effectiveMinibatch),dldinExp.dup(),1));
  Pair<Gradient,INDArray> p=l.backpropGradient(epsilon);
  INDArray dldgamma=p.getFirst().getGradientFor("gamma");
  INDArray dldbeta=p.getFirst().getGradientFor("beta");
  assertEquals(dldgammaExp,dldgamma);
  assertEquals(dldbetaExp,dldbeta);
  assertEquals(dldinExp,p.getSecond());
}
