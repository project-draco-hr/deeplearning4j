{
  Nd4j.getRandom().setSeed(12345);
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(1).updater(Updater.RMSPROP).seed(12345).list().layer(0,new BatchNormalization.Builder().nIn(3).nOut(3).eps(1e-5).decay(0.95).build()).layer(1,new OutputLayer.Builder(LossFunctions.LossFunction.MSE).weightInit(WeightInit.XAVIER).activation("identity").nOut(10).build()).backprop(true).pretrain(false).setInputType(InputType.convolutional(5,5,3)).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  int minibatch=32;
  List<DataSet> list=new ArrayList<>();
  for (int i=0; i < 100; i++) {
    list.add(new DataSet(Nd4j.rand(new int[]{minibatch,3,5,5}),Nd4j.rand(minibatch,10)));
  }
  DataSetIterator iter=new ListDataSetIterator(list);
  INDArray expMean=Nd4j.valueArrayOf(new int[]{1,3},0.5);
  INDArray expVar=Nd4j.valueArrayOf(new int[]{1,3},1 / 12.0);
  for (int i=0; i < 10; i++) {
    iter.reset();
    net.fit(iter);
  }
  INDArray estMean=net.getLayer(0).getParam(BatchNormalizationParamInitializer.GLOBAL_MEAN);
  INDArray estVar=net.getLayer(0).getParam(BatchNormalizationParamInitializer.GLOBAL_VAR);
  float[] fMeanExp=expMean.data().asFloat();
  float[] fMeanAct=estMean.data().asFloat();
  float[] fVarExp=expVar.data().asFloat();
  float[] fVarAct=estVar.data().asFloat();
  assertArrayEquals(fMeanExp,fMeanAct,0.01f);
  assertArrayEquals(fVarExp,fVarAct,0.01f);
}
