{
  Nd4j.getRandom().setSeed(12345);
  int m=2;
  int h=3;
  int w=3;
  int nOut=2;
  INDArray in=Nd4j.rand('c',m * h * w,nOut);
  INDArray in4=in.dup();
  in4=Shape.newShapeNoCopy(in4,new int[]{m,h,w,nOut},false);
  assertNotNull(in4);
  in4=in4.permute(0,3,1,2).dup();
  INDArray arr=Nd4j.rand(1,m * h * w* nOut).reshape('f',h,w,m,nOut).permute(2,3,1,0);
  in4=arr.assign(in4);
  Layer l1=getLayer(nOut);
  Layer l2=getLayer(nOut);
  INDArray out2d=l1.activate(in.dup(),true);
  INDArray out4d=l2.activate(in4.dup(),true);
  INDArray out4dAs2=out4d.permute(0,2,3,1).dup('c');
  out4dAs2=Shape.newShapeNoCopy(out4dAs2,new int[]{m * h * w,nOut},false);
  assertEquals(out2d,out4dAs2);
  INDArray epsilons2d=Nd4j.rand('c',m * h * w,nOut);
  INDArray epsilons4d=epsilons2d.dup();
  epsilons4d=Shape.newShapeNoCopy(epsilons4d,new int[]{m,h,w,nOut},false);
  assertNotNull(epsilons4d);
  epsilons4d=epsilons4d.permute(0,3,1,2).dup();
  Pair<Gradient,INDArray> b2d=l1.backpropGradient(epsilons2d);
  Pair<Gradient,INDArray> b4d=l2.backpropGradient(epsilons4d);
  INDArray e4dAs2d=b4d.getSecond().permute(0,2,3,1).dup('c');
  e4dAs2d=Shape.newShapeNoCopy(e4dAs2d,new int[]{m * h * w,nOut},false);
  assertEquals(b2d.getSecond(),e4dAs2d);
}
