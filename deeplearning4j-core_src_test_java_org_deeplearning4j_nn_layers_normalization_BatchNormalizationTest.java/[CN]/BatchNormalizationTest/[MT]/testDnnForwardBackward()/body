{
  double eps=1e-5;
  int nIn=4;
  int minibatch=2;
  Nd4j.getRandom().setSeed(12345);
  INDArray input=Nd4j.rand('c',new int[]{minibatch,nIn});
  INDArray gamma=Nd4j.ones(1,nIn);
  INDArray beta=Nd4j.zeros(1,nIn);
  Layer l=getLayer(nIn,eps,false,-1,-1);
  INDArray mean=input.mean(0);
  INDArray var=input.var(false,0);
  INDArray xHat=input.subRowVector(mean).divRowVector(Transforms.sqrt(var.add(eps),true));
  INDArray outExpected=xHat.mulRowVector(gamma).addRowVector(beta);
  INDArray out=l.activate(input,true);
  System.out.println(Arrays.toString(outExpected.data().asDouble()));
  System.out.println(Arrays.toString(out.data().asDouble()));
  assertEquals(outExpected,out);
  INDArray epsilon=Nd4j.rand(minibatch,nIn);
  INDArray dldgammaExp=epsilon.mul(xHat).sum(0);
  INDArray dldbetaExp=epsilon.sum(0);
  INDArray dldxhat=epsilon.mulRowVector(gamma);
  INDArray dldvar=dldxhat.mul(input.subRowVector(mean)).mul(-0.5).mulRowVector(Transforms.pow(var.add(eps),-3.0 / 2.0,true)).sum(0);
  INDArray dldmu=dldxhat.mulRowVector(Transforms.pow(var.add(eps),-1.0 / 2.0,true)).neg().sum(0).add(dldvar.mul(input.subRowVector(mean).mul(-2.0).sum(0).div(minibatch)));
  INDArray dldinExp=dldxhat.mulRowVector(Transforms.pow(var.add(eps),-1.0 / 2.0,true)).add(input.subRowVector(mean).mul(2.0 / minibatch).mulRowVector(dldvar)).addRowVector(dldmu.mul(1.0 / minibatch));
  Pair<Gradient,INDArray> p=l.backpropGradient(epsilon);
  INDArray dldgamma=p.getFirst().getGradientFor("gamma");
  INDArray dldbeta=p.getFirst().getGradientFor("beta");
  assertEquals(dldgammaExp,dldgamma);
  assertEquals(dldbetaExp,dldbeta);
  System.out.println("EPSILONS");
  System.out.println(Arrays.toString(dldinExp.data().asDouble()));
  System.out.println(Arrays.toString(p.getSecond().dup().data().asDouble()));
  assertEquals(dldinExp,p.getSecond());
}
