{
  Pair<Gradient,INDArray> actualOut=layer.backpropGradient(epsilon);
  INDArray expectedEpsilon=Nd4j.create(new double[]{1.,1.,1.,1.,.5,.5,.5,.5,1.,1.,1.,1.,.5,.5,.5,.5,1.,1.,1.,1.,.5,.5,.5,.5,1.,1.,1.,1.,.5,.5,.5,.5,-1.,-1.,-1.,-1.,-.5,-.5,-.5,-.5,-1.,-1.,-1.,-1.,-.5,-.5,-.5,-.5,-1.,-1.,-1.,-1.,-.5,-.5,-.5,-.5,-1.,-1.,-1.,-1.,-.5,-.5,-.5,-.5},new int[]{2,2,4,4});
  INDArray expectedGamma=Nd4j.create(new double[]{0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.},new int[]{1,32});
  INDArray expectedBeta=Nd4j.create(new double[]{0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.},new int[]{1,32});
  assertEquals(expectedEpsilon,actualOut.getSecond());
  assertEquals(expectedGamma,actualOut.getFirst().getGradientFor("gamma"));
  assertEquals(expectedGamma,actualOut.getFirst().getGradientFor("beta"));
}
