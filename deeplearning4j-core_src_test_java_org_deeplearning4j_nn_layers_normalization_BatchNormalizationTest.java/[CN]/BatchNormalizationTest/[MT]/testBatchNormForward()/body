{
  org.deeplearning4j.nn.conf.layers.BatchNormalization bN=new org.deeplearning4j.nn.conf.layers.BatchNormalization.Builder().build();
  NeuralNetConfiguration layerConf=new NeuralNetConfiguration.Builder().iterations(1).layer(bN).build();
  Layer layer=LayerFactories.getFactory(layerConf).create(layerConf);
  INDArray data=Nd4j.create(new double[]{4.,4.,4.,4.,8.,8.,8.,8.,4.,4.,4.,4.,8.,8.,8.,8.,4.,4.,4.,4.,8.,8.,8.,8.,4.,4.,4.,4.,8.,8.,8.,8,2.,2.,2.,2.,4.,4.,4.,4.,2.,2.,2.,2.,4.,4.,4.,4.,2.,2.,2.,2.,4.,4.,4.,4.,2.,2.,2.,2.,4.,4.,4.,4.},new int[]{2,2,4,4});
  INDArray actualActivation=layer.preOutput(data);
  INDArray expectedOut=Nd4j.create(new double[]{1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.,-1.},new int[]{2,2,4,4});
  assertEquals(expectedOut,actualActivation);
}
