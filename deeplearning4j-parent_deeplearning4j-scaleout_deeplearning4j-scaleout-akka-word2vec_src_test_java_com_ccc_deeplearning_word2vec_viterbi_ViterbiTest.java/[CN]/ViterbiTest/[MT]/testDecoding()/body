{
  Index labelIndex=new Index();
  labelIndex.add("NONE");
  labelIndex.add("ADDRESS");
  Index featureIndex=ViterbiUtil.featureIndexFromLabelIndex(labelIndex);
  List<String> lines=IOUtils.readLines(new ClassPathResource("/deeplearning/ADDRESS-small.split").getInputStream());
  CounterMap<Integer,Integer> transitions=new CounterMap<Integer,Integer>();
  for (  String line : lines) {
    if (line.isEmpty())     continue;
    List<Window> windows=Windows.windows(line);
    for (int i=1; i < windows.size(); i++) {
      String firstLabel=windows.get(i - 1).getLabel();
      String secondLabel=windows.get(i).getLabel();
      int first=labelIndex.indexOf(firstLabel);
      int second=labelIndex.indexOf(secondLabel);
      transitions.incrementCount(first,second,1.0);
    }
  }
  DoubleMatrix transitionWeights=CounterUtil.convert(transitions);
  Viterbi viterbi=new Viterbi(labelIndex,featureIndex,transitionWeights);
  for (  String line : lines) {
    if (line.isEmpty())     continue;
    List<Window> windows=Windows.windows(line);
    List<DoubleMatrix> classified=new ArrayList<DoubleMatrix>();
    for (    Window w : windows) {
      classified.add(MatrixUtil.toOutcomeVector(labelIndex.indexOf(w.getLabel()),labelIndex.size()));
    }
    DoubleMatrix classifiedM=new DoubleMatrix(classified.size(),classified.get(0).columns);
    for (int i=0; i < classified.size(); i++) {
      classifiedM.putRow(i,classified.get(i));
    }
    List<String> labels=new ArrayList<String>();
    labels.add("NONE");
    labels.add("ADDRESS");
    viterbi.decode(classifiedM,labels,windows);
  }
}
