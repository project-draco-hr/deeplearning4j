{
  if (!canDoBackward())   throw new IllegalStateException("Cannot do backward pass: errors not set");
  if (forwardPassShapes.length == 1) {
    return new Pair<>(null,epsilons);
  }
  INDArray[] out=new INDArray[forwardPassShapes.length];
  for (int i=0; i < out.length; i++)   out[i]=Nd4j.create(forwardPassShapes[i]);
  int cumulative=0;
switch (fwdPassRank) {
case 2:
    for (int i=0; i < forwardPassShapes.length; i++) {
      out[i].assign(epsilons[0].get(NDArrayIndex.all(),NDArrayIndex.interval(cumulative,cumulative + forwardPassShapes[i][1])));
      cumulative+=forwardPassShapes[i][1];
    }
  break;
case 3:
for (int i=0; i < forwardPassShapes.length; i++) {
  out[i].assign(epsilons[0].get(NDArrayIndex.all(),NDArrayIndex.interval(cumulative,cumulative + forwardPassShapes[i][1]),NDArrayIndex.all()));
  cumulative+=forwardPassShapes[i][1];
}
break;
case 4:
for (int i=0; i < forwardPassShapes.length; i++) {
out[i].assign(epsilons[0].get(NDArrayIndex.all(),NDArrayIndex.interval(cumulative,cumulative + forwardPassShapes[i][1]),NDArrayIndex.all(),NDArrayIndex.all()));
cumulative+=forwardPassShapes[i][1];
}
break;
default :
throw new RuntimeException("Invalid rank during forward pass (not 2, 3, 4)");
}
return new Pair<>(null,out);
}
