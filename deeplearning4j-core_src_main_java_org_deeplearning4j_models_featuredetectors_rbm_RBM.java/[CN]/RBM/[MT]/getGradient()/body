{
  int k=conf.getK();
  double learningRate=conf.getLr();
  Pair<INDArray,INDArray> probHidden=sampleHiddenGivenVisible(input);
  INDArray chainStart=probHidden.getSecond();
  Pair<Pair<INDArray,INDArray>,Pair<INDArray,INDArray>> matrices;
  INDArray nvMeans=null;
  INDArray nvSamples=null;
  INDArray nhMeans=null;
  INDArray nhSamples=null;
  for (int i=0; i < k; i++) {
    if (i == 0)     matrices=gibbhVh(chainStart);
 else     matrices=gibbhVh(nhSamples);
    nvMeans=matrices.getFirst().getFirst();
    nvSamples=matrices.getFirst().getSecond();
    nhMeans=matrices.getSecond().getFirst();
    nhSamples=matrices.getSecond().getSecond();
  }
  INDArray wGradient=input.transpose().mmul(probHidden.getSecond()).sub(nvSamples.transpose().mmul(nhMeans));
  INDArray hBiasGradient;
  if (conf.getSparsity() != 0)   hBiasGradient=probHidden.getSecond().rsubi(conf.getSparsity()).mean(0);
 else   hBiasGradient=probHidden.getSecond().sub(nhMeans).mean(0);
  INDArray vBiasGradient=input.sub(nvSamples).mean(0);
  NeuralNetworkGradient ret=new NeuralNetworkGradient(wGradient,vBiasGradient,hBiasGradient);
  return ret;
}
