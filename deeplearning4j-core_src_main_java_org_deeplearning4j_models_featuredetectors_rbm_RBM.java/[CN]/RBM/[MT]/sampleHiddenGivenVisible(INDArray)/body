{
  if (conf.getHiddenUnit() == HiddenUnit.RECTIFIED) {
    INDArray h1Mean=propUp(v);
    INDArray sigH1Mean=sigmoid(h1Mean);
    INDArray sqrtSigH1Mean=sqrt(sigH1Mean);
    INDArray sample=Sampling.normal(conf.getRng(),h1Mean,1);
    sample.muli(sqrtSigH1Mean);
    INDArray h1Sample=h1Mean.add(sample);
    h1Sample=Transforms.max(h1Sample);
    applyDropOutIfNecessary(h1Sample);
    return new Pair<>(h1Mean,h1Sample);
  }
 else   if (conf.getHiddenUnit() == HiddenUnit.GAUSSIAN) {
    INDArray h1Mean=propUp(v);
    this.hiddenSigma=h1Mean.var(1);
    INDArray h1Sample=h1Mean.addi(Sampling.normal(conf.getRng(),h1Mean,this.hiddenSigma));
    applyDropOutIfNecessary(h1Sample);
    return new Pair<>(h1Mean,h1Sample);
  }
 else   if (conf.getHiddenUnit() == HiddenUnit.SOFTMAX) {
    INDArray h1Mean=propUp(v);
    INDArray h1Sample=Activations.softMaxRows().apply(h1Mean);
    applyDropOutIfNecessary(h1Sample);
    return new Pair<>(h1Mean,h1Sample);
  }
 else   if (conf.getHiddenUnit() == HiddenUnit.BINARY) {
    INDArray h1Mean=propUp(v);
    INDArray h1Sample=Sampling.binomial(h1Mean,1,conf.getRng());
    applyDropOutIfNecessary(h1Sample);
    return new Pair<>(h1Mean,h1Sample);
  }
  throw new IllegalStateException("Hidden unit type must either be rectified linear or binary");
}
