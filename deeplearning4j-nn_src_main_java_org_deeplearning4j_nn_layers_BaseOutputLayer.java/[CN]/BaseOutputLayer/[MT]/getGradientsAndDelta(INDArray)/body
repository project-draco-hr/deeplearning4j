{
  ILossFunction lossFunction=layerConf().getLossFn();
  INDArray delta=lossFunction.computeGradient(getLabels2d(),preOut,layerConf().getActivationFunction(),maskArray);
  INDArray output=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf().getLayer().getActivationFunction(),preOut.dup()));
  Gradient gradient=new DefaultGradient();
  INDArray weightGradView=gradientViews.get(DefaultParamInitializer.WEIGHT_KEY);
  INDArray biasGradView=gradientViews.get(DefaultParamInitializer.BIAS_KEY);
  Nd4j.gemm(input,delta,weightGradView,true,false,1.0,0.0);
  biasGradView.assign(delta.sum(0));
  gradient.gradientForVariable().put(DefaultParamInitializer.WEIGHT_KEY,weightGradView);
  gradient.gradientForVariable().put(DefaultParamInitializer.BIAS_KEY,biasGradView);
  return new Triple<>(gradient,delta,output);
}
