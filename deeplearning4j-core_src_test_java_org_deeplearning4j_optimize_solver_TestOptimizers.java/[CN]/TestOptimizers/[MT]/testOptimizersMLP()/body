{
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  OptimizationAlgorithm[] toTest={OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT,OptimizationAlgorithm.LINE_GRADIENT_DESCENT,OptimizationAlgorithm.CONJUGATE_GRADIENT,OptimizationAlgorithm.LBFGS};
  DataSet ds=iter.next();
  for (  OptimizationAlgorithm oa : toTest) {
    MultiLayerNetwork network=new MultiLayerNetwork(getMLPConfigIris(oa,4));
    network.init();
    double score=network.score(ds);
    assertTrue(score != 0.0 && !Double.isNaN(score));
    if (PRINT_OPT_RESULTS) {
      System.out.println("testOptimizersMLP() - " + oa);
      System.out.println(score);
    }
    int nCallsToOptimizer=5;
    double[] scores=new double[nCallsToOptimizer + 1];
    scores[0]=score;
    for (int i=0; i < nCallsToOptimizer; i++) {
      iter.reset();
      network.fit(iter);
      double scoreAfter=network.score(ds);
      scores[i + 1]=scoreAfter;
      if (PRINT_OPT_RESULTS)       System.out.println(scoreAfter);
      assertTrue("Score is NaN after optimization",!Double.isNaN(scoreAfter));
      assertTrue("OA=" + oa + ", before="+ score+ ", after="+ scoreAfter,scoreAfter < score);
      score=scoreAfter;
    }
    if (PRINT_OPT_RESULTS)     System.out.println(oa + " - " + Arrays.toString(scores));
  }
}
