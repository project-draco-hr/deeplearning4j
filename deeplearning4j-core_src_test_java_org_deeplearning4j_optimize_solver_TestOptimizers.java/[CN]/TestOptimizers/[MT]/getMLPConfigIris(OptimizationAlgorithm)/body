{
  MultiLayerConfiguration c=new NeuralNetConfiguration.Builder().nIn(4).nOut(3).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,0.1)).activationFunction("sigmoid").lossFunction(LossFunction.MCXENT).optimizationAlgo(oa).iterations(1).batchSize(5).constrainGradientToUnitNorm(false).corruptionLevel(0.0).layer(new RBM()).learningRate(0.1).useAdaGrad(false).regularization(true).l2(0.01).applySparsity(false).sparsity(0.0).seed(12345L).list(4).hiddenLayerSizes(8,10,5).backward(true).pretrain(false).useDropConnect(false).override(3,new ConfOverride(){
    @Override public void overrideLayer(    int i,    NeuralNetConfiguration.Builder builder){
      builder.activationFunction("softmax");
      builder.layer(new OutputLayer());
      builder.weightInit(WeightInit.DISTRIBUTION);
      builder.dist(new NormalDistribution(0,0.1));
    }
  }
).build();
  return c;
}
