{
  Random rng=new DefaultRandom(12345L);
  org.nd4j.linalg.api.rng.distribution.Distribution dist=new org.nd4j.linalg.api.rng.distribution.impl.UniformDistribution(rng,-10,10);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().numLineSearchIterations(maxNumLineSearchIter).iterations(1).learningRate(0.01).layer(new RBM()).batchSize(1).build();
  conf.addVariable("x");
  Model m=new SphereFunctionModel(100,dist,conf);
  double[] scores=new double[nSteps + 1];
  scores[0]=m.score();
  ConvexOptimizer opt=getOptimizer(oa,conf,m);
  for (int i=0; i < nSteps; i++) {
    opt.optimize();
    scores[i + 1]=m.score();
  }
  if (PRINT_OPT_RESULTS) {
    System.out.println("Multiple step (" + nSteps + " steps) score vs iteration, maxNumLineSearchIter="+ maxNumLineSearchIter+ ": "+ oa);
    System.out.println(Arrays.toString(scores));
  }
  for (int i=1; i < scores.length; i++) {
    assertTrue(scores[i] < scores[i - 1] || (scores[i] == 0.0 && scores[i - 1] == 0.0));
  }
  assertTrue(scores[scores.length - 1] < 1.0);
}
