{
  if (!mnistExists()) {
    new MnistFetcher().fetchMnist();
  }
  String images;
  String labels;
  if (train) {
    images=FilenameUtils.concat(MNIST_ROOT,MnistFetcher.mnistTrainData.get("filesFilenameUnzipped"));
    labels=FilenameUtils.concat(MNIST_ROOT,MnistFetcher.mnistTrainLabel.get("filesFilenameUnzipped"));
    totalExamples=NUM_EXAMPLES;
  }
 else {
    images=FilenameUtils.concat(MNIST_ROOT,MnistFetcher.mnistTestData.get("filesFilenameUnzipped"));
    labels=FilenameUtils.concat(MNIST_ROOT,MnistFetcher.mnistTestLabel.get("filesFilenameUnzipped"));
    totalExamples=NUM_EXAMPLES_TEST;
  }
  try {
    if (train)     man=new MnistManager(images,labels,NUM_EXAMPLES);
 else     man=new MnistManager(images,labels,NUM_EXAMPLES_TEST);
  }
 catch (  Exception e) {
    FileUtils.deleteDirectory(new File(MNIST_ROOT));
    new MnistFetcher().fetchMnist();
    if (train)     man=new MnistManager(images,labels,NUM_EXAMPLES);
 else     man=new MnistManager(images,labels,NUM_EXAMPLES_TEST);
  }
  numOutcomes=10;
  this.binarize=binarize;
  cursor=0;
  inputColumns=man.getImages().getEntryLength();
  this.train=train;
  this.shuffle=shuffle;
  if (train) {
    order=new int[NUM_EXAMPLES];
  }
 else {
    order=new int[NUM_EXAMPLES_TEST];
  }
  for (int i=0; i < order.length; i++)   order[i]=i;
  rng=new Random(rngSeed);
  reset();
}
