{
  DenoisingAutoEncoder autoEncoder=new DenoisingAutoEncoder.Builder().withOptmizationAlgo(NeuralNetwork.OptimizationAlgorithm.CONJUGATE_GRADIENT).numberOfVisible(784).numHidden(600).build();
  DataSetIterator iter=new MultipleEpochsIterator(10,new CurvesDataSetIterator(10,10));
  while (iter.hasNext()) {
    DataSet next=iter.next();
    for (int i=0; i < 100; i++) {
      autoEncoder.train(next.getFeatureMatrix(),1e-1f,0.3f,i);
      log.info("Error on iteration " + i + " is "+ autoEncoder.getReConstructionCrossEntropy());
    }
  }
  iter.reset();
  FilterRenderer render=new FilterRenderer();
  render.renderFilters(autoEncoder.getW(),"example-render.jpg",28,28,10);
  while (iter.hasNext()) {
    DataSet first=iter.next();
    INDArray reconstruct=autoEncoder.transform(first.getFeatureMatrix());
    for (int j=0; j < first.numExamples(); j++) {
      INDArray draw1=first.get(j).getFeatureMatrix().mul(255);
      INDArray reconstructed2=reconstruct.getRow(j);
      INDArray draw2=Sampling.binomial(reconstructed2,1,new MersenneTwister(123)).mul(255);
      DrawReconstruction d=new DrawReconstruction(draw1);
      d.title="REAL";
      d.draw();
      DrawReconstruction d2=new DrawReconstruction(draw2,1000,1000);
      d2.title="TEST";
      d2.draw();
      Thread.sleep(10000);
      d.frame.dispose();
      d2.frame.dispose();
    }
  }
}
