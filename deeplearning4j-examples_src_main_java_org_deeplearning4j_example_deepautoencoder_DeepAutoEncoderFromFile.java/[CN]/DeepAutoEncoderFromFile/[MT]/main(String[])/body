{
  DataSetIterator iter=new MnistDataSetIterator(80,1000);
  DBN dbn=SerializationUtils.readObject(new File(args[0]));
  DeepAutoEncoder encoder=new DeepAutoEncoder(dbn,new Object[]{1,1e-1,30000});
  while (iter.hasNext()) {
    DataSet d=iter.next();
    dbn.setInput(d.getFirst());
    log.info("Training on " + d.numExamples());
    StopWatch watch=new StopWatch();
    encoder.finetune(d.getFirst(),1e-1,30000);
  }
  SerializationUtils.saveObject(encoder,new File("deepautoencoder.ser"));
  iter.reset();
  while (iter.hasNext()) {
    DataSet first=iter.next();
    DoubleMatrix reconstruct=encoder.reconstruct(first.getFirst());
    for (int j=0; j < first.numExamples(); j++) {
      DoubleMatrix draw1=first.get(j).getFirst().mul(255);
      DoubleMatrix reconstructed2=reconstruct.getRow(j);
      DoubleMatrix draw2=MatrixUtil.binomial(reconstructed2,1,new MersenneTwister(123)).mul(255);
      DrawMnistGreyScale d=new DrawMnistGreyScale(draw1);
      d.title="REAL";
      d.draw();
      DrawMnistGreyScale d2=new DrawMnistGreyScale(draw2,1000,1000);
      d2.title="TEST";
      d2.draw();
      Thread.sleep(10000);
      d.frame.dispose();
      d2.frame.dispose();
    }
  }
}
