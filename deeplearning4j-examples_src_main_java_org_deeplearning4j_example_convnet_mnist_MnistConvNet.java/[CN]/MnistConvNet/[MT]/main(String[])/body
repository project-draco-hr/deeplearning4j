{
  RandomGenerator gen=new MersenneTwister(123);
  int rows=28;
  int cols=28;
  double fanIn=28 * 28;
  double abs=Math.sqrt(6 / fanIn);
  ConvolutionalRBM r=new ConvolutionalRBM.Builder().withFilterSize(new int[]{7,7}).withNumFilters(9).withStride(new int[]{2,2}).withVisibleSize(new int[]{rows,cols}).withLossFunction(NeuralNetwork.LossFunction.NEGATIVELOGLIKELIHOOD).withOptmizationAlgo(NeuralNetwork.OptimizationAlgorithm.CONJUGATE_GRADIENT).withRandom(gen).withSparsity(5e-2).withSparseGain(5).numberOfVisible(28).numHidden(28).withMomentum(0.5).build();
  DataSetIterator iter=new MnistDataSetIterator(1,200);
  while (iter.hasNext()) {
    DataSet next=iter.next();
    log.info("Len " + next.getFirst().length);
    log.info("This is a " + next.labelDistribution());
    DoubleMatrix reshape=next.getFirst().reshape(rows,cols);
    Tensor W=(Tensor)r.getW();
    log.info("W shape " + W.shape());
    r.trainTillConvergence(reshape,5e-2,new Object[]{1,5e-2,20});
  }
  ;
  FileUtils.writeObject(new File("mnist-conv.ser"),r);
  drawFilters(r);
}
