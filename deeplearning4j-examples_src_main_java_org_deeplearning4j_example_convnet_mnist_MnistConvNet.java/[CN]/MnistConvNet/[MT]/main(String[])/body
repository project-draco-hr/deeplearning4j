{
  RandomGenerator gen=new MersenneTwister(123);
  int rows=28;
  int cols=28;
  double fanIn=28 * 28;
  double abs=Math.sqrt(6 / fanIn);
  ConvolutionalRBM r=new ConvolutionalRBM.Builder().withFilterSize(new int[]{7,7}).useAdaGrad(true).useRegularization(true).withL2(1e-2).withNumFilters(9).withStride(new int[]{2,2}).renderWeights(10).withVisibleSize(new int[]{rows,cols}).withVisible(RBM.VisibleUnit.GAUSSIAN).withOptmizationAlgo(NeuralNetwork.OptimizationAlgorithm.GRADIENT_DESCENT).withRandom(gen).withSparsity(5e-2).withSparseGain(5).withDistribution(Distributions.uniform(gen,abs)).numberOfVisible(28).numHidden(28).withMomentum(0).build();
  DataSetIterator iter=new MnistDataSetIterator(1,10);
  for (int i=0; i < 10; i++) {
    while (iter.hasNext()) {
      DataSet next=iter.next();
      log.info("Len " + next.getFirst().length);
      log.info("This is a " + next.labelDistribution());
      DoubleMatrix reshape=next.getFirst().reshape(rows,cols);
      Tensor W=(Tensor)r.getW();
      log.info("W shape " + W.shape());
      r.trainTillConvergence(reshape,5e-1,new Object[]{1,5e-1,20});
    }
    iter.reset();
  }
  iter.reset();
  for (int i=0; i < 10; i++) {
    while (iter.hasNext()) {
      DataSet next=iter.next();
      log.info("This is a " + next.labelDistribution());
      Tensor reshapePool=r.propUp(next.getFirst());
      DoubleMatrix reshapedHidden=reshapePool.reshape(reshapePool.rows() * reshapePool.columns(),reshapePool.slices());
      drawFilters(r,rows,cols);
      drawSample(r,reshapedHidden.rows,reshapedHidden.columns,reshapedHidden);
    }
    iter.reset();
  }
}
