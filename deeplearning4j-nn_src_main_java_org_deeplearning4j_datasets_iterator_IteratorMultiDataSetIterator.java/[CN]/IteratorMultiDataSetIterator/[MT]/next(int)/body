{
  if (!hasNext())   throw new NoSuchElementException();
  List<MultiDataSet> list=new ArrayList<>();
  int countSoFar=0;
  while ((!queued.isEmpty() || iterator.hasNext()) && countSoFar < batchSize) {
    MultiDataSet next;
    if (!queued.isEmpty()) {
      next=queued.removeFirst();
    }
 else {
      next=iterator.next();
    }
    int nExamples=next.getFeatures(0).size(0);
    if (countSoFar + nExamples <= batchSize) {
      list.add(next);
    }
 else {
      int nFeatures=next.numFeatureArrays();
      int nLabels=next.numLabelsArrays();
      INDArray[] fToKeep=new INDArray[nFeatures];
      INDArray[] lToKeep=new INDArray[nLabels];
      INDArray[] fToCache=new INDArray[nFeatures];
      INDArray[] lToCache=new INDArray[nLabels];
      INDArray[] fMaskToKeep=(next.getFeaturesMaskArrays() != null ? new INDArray[nFeatures] : null);
      INDArray[] lMaskToKeep=(next.getLabelsMaskArrays() != null ? new INDArray[nLabels] : null);
      INDArray[] fMaskToCache=(next.getFeaturesMaskArrays() != null ? new INDArray[nFeatures] : null);
      INDArray[] lMaskToCache=(next.getLabelsMaskArrays() != null ? new INDArray[nLabels] : null);
      for (int i=0; i < nFeatures; i++) {
        INDArray fi=next.getFeatures(i);
        INDArray li=next.getFeatures(i);
        fToKeep[i]=getRange(fi,0,batchSize - countSoFar);
        fToCache[i]=getRange(fi,batchSize - countSoFar,nExamples);
        lToKeep[i]=getRange(li,0,batchSize - countSoFar);
        lToCache[i]=getRange(li,batchSize - countSoFar,nExamples);
        if (fMaskToKeep != null) {
          INDArray fmi=next.getFeaturesMaskArray(i);
          fMaskToKeep[i]=getRange(fmi,0,batchSize - countSoFar);
          fMaskToCache[i]=getRange(fmi,batchSize - countSoFar,nExamples);
        }
        if (lMaskToKeep != null) {
          INDArray lmi=next.getLabelsMaskArray(i);
          lMaskToKeep[i]=getRange(lmi,0,batchSize - countSoFar);
          lMaskToCache[i]=getRange(lmi,batchSize - countSoFar,nExamples);
        }
      }
      MultiDataSet toKeep=new org.nd4j.linalg.dataset.MultiDataSet(fToKeep,lToKeep,fMaskToKeep,lMaskToKeep);
      MultiDataSet toCache=new org.nd4j.linalg.dataset.MultiDataSet(fToCache,lToCache,fMaskToCache,lMaskToCache);
      list.add(toKeep);
      queued.add(toCache);
    }
    countSoFar+=nExamples;
  }
  MultiDataSet out;
  if (list.size() == 1) {
    out=list.get(0);
  }
 else {
    out=org.nd4j.linalg.dataset.MultiDataSet.merge(list);
  }
  if (preProcessor != null)   preProcessor.preProcess(out);
  return out;
}
