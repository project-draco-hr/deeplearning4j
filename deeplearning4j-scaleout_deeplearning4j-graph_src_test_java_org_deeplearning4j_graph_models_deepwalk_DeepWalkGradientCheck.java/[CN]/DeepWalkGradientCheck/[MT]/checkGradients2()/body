{
  ClassPathResource cpr=new ClassPathResource("graph13.txt");
  int nVertices=13;
  Graph<String,String> graph=GraphLoader.loadUndirectedGraphEdgeListFile(cpr.getFile().getAbsolutePath(),13,",");
  int vectorSize=10;
  int windowSize=3;
  Nd4j.getRandom().setSeed(12345);
  DeepWalk<String,String> deepWalk=new DeepWalk.Builder<String,String>().learningRate(0.01).vectorSize(vectorSize).windowSize(windowSize).learningRate(0.01).build();
  deepWalk.initialize(graph);
  for (int i=0; i < nVertices; i++) {
    INDArray vector=deepWalk.getVertexVector(i);
    assertArrayEquals(new int[]{1,vectorSize},vector.shape());
    System.out.println(Arrays.toString(vector.dup().data().asFloat()));
  }
  GraphWalkIterator<String> iter=new RandomWalkIterator<>(graph,10);
  deepWalk.fit(iter);
  InMemoryGraphLookupTable table=(InMemoryGraphLookupTable)deepWalk.lookupTable();
  GraphHuffman tree=(GraphHuffman)table.getTree();
  for (int i=0; i < nVertices; i++) {
    double[] probs=new double[nVertices];
    double sumProb=0.0;
    for (int j=0; j < nVertices; j++) {
      probs[j]=table.calculateProb(i,j);
      assertTrue(probs[j] >= 0.0 && probs[j] <= 1.0);
      sumProb+=probs[j];
    }
    assertTrue("Output probabilities do not sum to 1.0 (i=" + i + "), sum="+ sumProb,Math.abs(sumProb - 1.0) < 1e-5);
    for (int j=0; j < nVertices; j++) {
      int[] pathInnerNodes=tree.getPathInnerNodes(j);
      INDArray[][] vecAndGrads=table.vectorsAndGradients(i,j);
      assertEquals(2,vecAndGrads.length);
      assertEquals(pathInnerNodes.length + 1,vecAndGrads[0].length);
      assertEquals(pathInnerNodes.length + 1,vecAndGrads[1].length);
      INDArray vertexVector=table.getVector(i);
      for (int p=0; p < pathInnerNodes.length; p++) {
        int innerNodeIdx=pathInnerNodes[p];
        INDArray innerNodeVector=table.getInnerNodeVector(innerNodeIdx);
        INDArray innerNodeGrad=vecAndGrads[1][p + 1];
        for (int v=0; v < innerNodeVector.length(); v++) {
          double backpropGradient=innerNodeGrad.getDouble(v);
          double origParamValue=innerNodeVector.getDouble(v);
          innerNodeVector.putScalar(v,origParamValue + epsilon);
          double scorePlus=table.calculateScore(i,j);
          innerNodeVector.putScalar(v,origParamValue - epsilon);
          double scoreMinus=table.calculateScore(i,j);
          innerNodeVector.putScalar(v,origParamValue);
          double numericalGradient=(scorePlus - scoreMinus) / (2 * epsilon);
          double relError;
          if (backpropGradient == 0.0 && numericalGradient == 0.0)           relError=0.0;
 else {
            relError=Math.abs(backpropGradient - numericalGradient) / (Math.abs(backpropGradient) + Math.abs(numericalGradient));
          }
          String msg="innerNode grad: i=" + i + ", j="+ j+ ", p="+ p+ ", v="+ v+ " - relError: "+ relError+ ", scorePlus="+ scorePlus+ ", scoreMinus="+ scoreMinus+ ", numGrad="+ numericalGradient+ ", backpropGrad = "+ backpropGradient;
          if (relError > MAX_REL_ERROR)           fail(msg);
 else           System.out.println(msg);
        }
      }
      INDArray vectorGrad=vecAndGrads[1][0];
      assertArrayEquals(vectorGrad.shape(),vertexVector.shape());
      for (int v=0; v < vectorGrad.length(); v++) {
        double backpropGradient=vectorGrad.getDouble(v);
        double origParamValue=vertexVector.getDouble(v);
        vertexVector.putScalar(v,origParamValue + epsilon);
        double scorePlus=table.calculateScore(i,j);
        vertexVector.putScalar(v,origParamValue - epsilon);
        double scoreMinus=table.calculateScore(i,j);
        vertexVector.putScalar(v,origParamValue);
        double numericalGradient=(scorePlus - scoreMinus) / (2 * epsilon);
        double relError;
        if (backpropGradient == 0.0 && numericalGradient == 0.0)         relError=0.0;
 else {
          relError=Math.abs(backpropGradient - numericalGradient) / (Math.abs(backpropGradient) + Math.abs(numericalGradient));
        }
        String msg="vector grad: i=" + i + ", j="+ j+ ", v="+ v+ " - relError: "+ relError+ ", scorePlus="+ scorePlus+ ", scoreMinus="+ scoreMinus+ ", numGrad="+ numericalGradient+ ", backpropGrad = "+ backpropGradient;
        if (relError > MAX_REL_ERROR)         fail(msg);
 else         System.out.println(msg);
      }
      System.out.println();
    }
  }
}
