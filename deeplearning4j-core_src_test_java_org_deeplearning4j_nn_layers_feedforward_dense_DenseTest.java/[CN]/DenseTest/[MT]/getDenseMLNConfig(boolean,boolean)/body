{
  int numInputs=150;
  int outputNum=3;
  int iterations=10;
  long seed=6;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(seed).iterations(iterations).learningRate(1e-3).l1(0.3).regularization(true).l2(1e-3).constrainGradientToUnitNorm(true).list(3).layer(0,new org.deeplearning4j.nn.conf.layers.DenseLayer.Builder().nIn(numInputs).nOut(3).activation("tanh").weightInit(WeightInit.XAVIER).build()).layer(1,new org.deeplearning4j.nn.conf.layers.DenseLayer.Builder().nIn(3).nOut(2).activation("tanh").weightInit(WeightInit.XAVIER).build()).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).weightInit(WeightInit.XAVIER).nIn(2).nOut(outputNum).build()).backprop(backprop).pretrain(pretrain).build();
  MultiLayerNetwork model=new MultiLayerNetwork(conf);
  model.init();
  return model;
}
