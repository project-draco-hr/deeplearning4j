{
  if (flattenedGradients == null)   initGradientsView();
  int timeSeriesLength=-1;
  for (  INDArray in : inputs) {
    if (in.rank() != 3)     continue;
    if (timeSeriesLength == -1)     timeSeriesLength=in.size(2);
 else     if (timeSeriesLength != in.size(2)) {
      log.warn("Cannot do TBPTT with time series of different lengths");
      return;
    }
  }
  for (  INDArray out : labels) {
    if (out.rank() != 3)     continue;
    if (timeSeriesLength == -1)     timeSeriesLength=out.size(2);
 else     if (timeSeriesLength != out.size(2)) {
      log.warn("Cannot do TBPTT with time series of different lengths");
      return;
    }
  }
  int fwdLen=configuration.getTbpttFwdLength();
  if (fwdLen > timeSeriesLength) {
    log.warn("Cannot do TBPTT: Truncated BPTT forward length (" + fwdLen + ") > input time series length ("+ timeSeriesLength+ ")");
    return;
  }
  int nSubsets=timeSeriesLength / fwdLen;
  rnnClearPreviousState();
  INDArray[] newInputs=new INDArray[inputs.length];
  INDArray[] newLabels=new INDArray[labels.length];
  INDArray[] newFeatureMasks=(featureMasks != null ? new INDArray[featureMasks.length] : null);
  INDArray[] newLabelMasks=(labelMasks != null ? new INDArray[labelMasks.length] : null);
  for (int i=0; i < nSubsets; i++) {
    int startTimeIdx=i * fwdLen;
    int endTimeIdx=startTimeIdx + fwdLen;
    for (int j=0; j < inputs.length; j++) {
      if (inputs[j].rank() != 3)       newInputs[j]=inputs[j];
 else {
        newInputs[j]=inputs[j].get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(startTimeIdx,endTimeIdx));
      }
    }
    for (int j=0; j < labels.length; j++) {
      if (labels[j].rank() != 3)       newLabels[j]=labels[j];
 else {
        newLabels[j]=labels[j].get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(startTimeIdx,endTimeIdx));
      }
    }
    if (featureMasks != null) {
      for (int j=0; j < featureMasks.length; j++) {
        if (featureMasks[j] == null)         continue;
        newFeatureMasks[j]=featureMasks[j].get(NDArrayIndex.all(),NDArrayIndex.interval(startTimeIdx,endTimeIdx));
      }
    }
    if (labelMasks != null) {
      for (int j=0; j < labelMasks.length; j++) {
        if (labelMasks[j] == null)         continue;
        newLabelMasks[j]=labelMasks[j].get(NDArrayIndex.all(),NDArrayIndex.interval(startTimeIdx,endTimeIdx));
      }
    }
    setInputs(newInputs);
    setLabels(newLabels);
    setLayerMaskArrays(newFeatureMasks,newLabelMasks);
    if (solver == null) {
      solver=new Solver.Builder().configure(conf()).listeners(getListeners()).model(this).build();
    }
    solver.optimize();
    rnnUpdateStateWithTBPTTState();
  }
  rnnClearPreviousState();
}
