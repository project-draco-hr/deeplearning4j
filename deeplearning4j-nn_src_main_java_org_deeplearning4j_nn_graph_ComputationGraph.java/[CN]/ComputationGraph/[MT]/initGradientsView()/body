{
  if (!initCalled)   init();
  int numParams=0;
  int[] numParamsForVertex=new int[topologicalOrder.length];
  int i=0;
  for (; i < configuration.getNetworkInputs().size(); i++) {
    numParamsForVertex[i]=0;
  }
  Map<String,org.deeplearning4j.nn.conf.graph.GraphVertex> configVertexMap=configuration.getVertices();
  for (  Map.Entry<String,org.deeplearning4j.nn.conf.graph.GraphVertex> nodeEntry : configVertexMap.entrySet()) {
    org.deeplearning4j.nn.conf.graph.GraphVertex n=nodeEntry.getValue();
    numParamsForVertex[i]=n.numParams(true);
    numParams+=numParamsForVertex[i];
    i++;
  }
  flattenedGradients=Nd4j.create(1,numParams);
  int paramOffsetSoFar=0;
  i=0;
  for (  int vertexIdx : topologicalOrder) {
    int nParamsThisVertex=numParamsForVertex[vertexIdx];
    if (nParamsThisVertex != 0) {
      INDArray gradientView=flattenedGradients.get(NDArrayIndex.point(0),NDArrayIndex.interval(paramOffsetSoFar,paramOffsetSoFar + nParamsThisVertex));
      vertices[vertexIdx].setBackpropGradientsViewArray(gradientView);
    }
    i++;
    paramOffsetSoFar+=nParamsThisVertex;
  }
}
