{
  if (Arrays.equals(nums,new int[]{1,2,3})) {
    return dup();
  }
 else   if (Arrays.equals(nums,new int[]{2,1,3}))   return transpose();
 else   if (Arrays.equals(nums,new int[]{3,2,1})) {
    Tensor ret=new Tensor(slices(),columns(),rows());
    for (int i=0; i < ret.slices(); i++) {
      ret.setSlice(i,getRows(i));
    }
    return ret;
  }
 else   if (Arrays.equals(nums,new int[]{2,3,1})) {
    Tensor t=new Tensor(slices(),columns(),rows());
    int currI=0, currJ=0;
    for (int i=0; i < t.slices(); i++) {
      DoubleMatrix slice=new DoubleMatrix(t.rows(),t.columns());
      for (int row=0; row < slice.rows; row++) {
        for (int l=0; l < slices(); l++) {
          double val=get(currI,currJ,l);
          slice.put(row,l,val);
        }
        currJ++;
      }
      t.setSlice(i,slice);
      if (currJ == columns()) {
        currJ=0;
        currI++;
      }
    }
    return t;
  }
 else   if (Arrays.equals(nums,new int[]{1,3,2})) {
    Tensor ret=new Tensor(rows(),slices(),columns());
    int column=0;
    for (int i=0; i < slices(); i++) {
      DoubleMatrix slice=new DoubleMatrix(ret.rows(),ret.columns());
      for (int j=0; j < slice.columns; j++) {
        DoubleMatrix c=getColumn(column,j);
        slice.putColumn(j,c);
      }
      ret.setSlice(i,slice);
    }
    return ret;
  }
 else   if (Arrays.equals(nums,new int[]{3,1,2})) {
    Tensor t=new Tensor(slices(),rows(),columns());
    int column=0;
    for (int i=0; i < t.slices(); i++) {
      DoubleMatrix slice=new DoubleMatrix(t.rows(),t.columns());
      for (int row=0; row < slice.rows; row++) {
        for (int l=0; l < slices(); l++) {
          DoubleMatrix val=getColumn(column,l);
          val=val.reshape(1,val.length);
          slice.putRow(row,val);
        }
      }
      t.setSlice(i,slice);
      column++;
      if (column == t.columns())       column=0;
    }
    return t;
  }
  throw new IllegalArgumentException("Illegal argument: Passed in array must be a unique array containing only" + "the numbers 1,2 or 3");
}
