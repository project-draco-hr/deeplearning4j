{
  final int numRows=32;
  final int numColumns=32;
  int numChannels=3;
  int outputNum=CifarLoader.NUM_LABELS;
  int numSamples=4;
  int batchSize=2;
  int iterations=1;
  int seed=123;
  int listenerFreq=iterations;
  CifarDataSetIterator cifar=new CifarDataSetIterator(batchSize,numSamples,new int[]{numRows,numColumns,numChannels},outputNum);
  MultiLayerConfiguration.Builder builder=new NeuralNetConfiguration.Builder().seed(seed).iterations(iterations).gradientNormalization(GradientNormalization.RenormalizeL2PerLayer).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).list(3).layer(0,new ConvolutionLayer.Builder(5,5).nIn(numChannels).nOut(6).weightInit(WeightInit.XAVIER).activation("relu").build()).layer(1,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX,new int[]{2,2}).build()).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nOut(outputNum).weightInit(WeightInit.XAVIER).activation("softmax").build()).backprop(true).pretrain(false);
  new ConvolutionLayerSetup(builder,numRows,numColumns,numChannels);
  MultiLayerNetwork model=new MultiLayerNetwork(builder.build());
  model.init();
  model.setListeners(Arrays.asList((IterationListener)new ScoreIterationListener(listenerFreq)));
  model.fit(cifar.next());
  DataSet dataTest=cifar.next();
  INDArray output=model.output(dataTest.getFeatureMatrix());
  Evaluation eval=new Evaluation(outputNum);
  eval.eval(dataTest.getLabels(),output);
  System.out.println(eval.stats());
}
