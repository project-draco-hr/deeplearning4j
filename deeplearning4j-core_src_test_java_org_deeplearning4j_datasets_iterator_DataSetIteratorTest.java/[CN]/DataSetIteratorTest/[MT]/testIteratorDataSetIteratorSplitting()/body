{
  int origBatchSize=4;
  int origNumDSs=3;
  int batchSize=3;
  int numBatches=4;
  int featureSize=5;
  int labelSize=6;
  Nd4j.getRandom().setSeed(12345);
  List<DataSet> orig=new ArrayList<>();
  for (int i=0; i < origNumDSs; i++) {
    INDArray features=Nd4j.rand(origBatchSize,featureSize);
    INDArray labels=Nd4j.rand(origBatchSize,labelSize);
    orig.add(new DataSet(features,labels));
  }
  List<DataSet> expected=new ArrayList<>();
  expected.add(new DataSet(orig.get(0).getFeatureMatrix().getRows(0,1,2),orig.get(0).getLabels().getRows(0,1,2)));
  expected.add(new DataSet(Nd4j.vstack(orig.get(0).getFeatureMatrix().getRows(3),orig.get(1).getFeatureMatrix().getRows(0,1)),Nd4j.vstack(orig.get(0).getLabels().getRows(3),orig.get(1).getLabels().getRows(0,1))));
  expected.add(new DataSet(Nd4j.vstack(orig.get(1).getFeatureMatrix().getRows(2,3),orig.get(2).getFeatureMatrix().getRows(0)),Nd4j.vstack(orig.get(1).getLabels().getRows(2,3),orig.get(2).getLabels().getRows(0))));
  expected.add(new DataSet(orig.get(2).getFeatureMatrix().getRows(1,2,3),orig.get(2).getLabels().getRows(1,2,3)));
  DataSetIterator iter=new IteratorDataSetIterator(orig.iterator(),batchSize);
  int count=0;
  while (iter.hasNext()) {
    DataSet ds=iter.next();
    assertEquals(expected.get(count),ds);
    count++;
  }
  assertEquals(count,numBatches);
}
