{
  if (isUseGaussNewtonVectorProductBackProp()) {
    log.warn("WARNING; Gauss newton back vector back propagation is primarily used for hessian free which does not involve pretrain; just finetune. Use this at your own risk");
  }
  if (this.getInput() == null || this.getNeuralNets() == null || this.getNeuralNets()[0] == null || this.getNeuralNets() == null || this.getNeuralNets()[0] == null) {
    setInput(input);
    initializeLayers(input);
  }
 else   setInput(input);
  INDArray layerInput=null;
  for (int i=0; i < getnLayers(); i++) {
    if (i == 0)     layerInput=getInput();
 else     layerInput=activationFromPrevLayer(i - 1,layerInput);
    log.info("Training on layer " + (i + 1));
    float realLearningRate=layers[i].conf().getLr();
    if (forceNumIterations()) {
      for (int epoch=0; epoch < epochs; epoch++) {
        log.info("Error on epoch " + epoch + " for layer "+ (i + 1)+ " is "+ getNeuralNets()[i].score());
        getNeuralNets()[i].iterate(layerInput,new Object[]{k,learningRate});
        getNeuralNets()[i].iterationDone(epoch);
      }
    }
 else     getNeuralNets()[i].fit(layerInput,new Object[]{k,realLearningRate,epochs});
  }
}
