{
  DataSetIterator iris=new IrisDataSetIterator(1,10);
  MultiLayerNetwork network=new MultiLayerNetwork(getIrisMLPSimpleConfig(new int[]{1},"sigmoid"));
  network.init();
  Layer[] layers=network.getLayers();
  final boolean printCalculations=true;
  while (iris.hasNext()) {
    DataSet data=iris.next();
    INDArray x=data.getFeatureMatrix();
    INDArray y=data.getLabels();
    float[] xFloat=asFloat(x);
    float[] yFloat=asFloat(y);
    INDArray l1Weights=layers[0].getParam(DefaultParamInitializer.WEIGHT_KEY).dup();
    INDArray l2Weights=layers[1].getParam(DefaultParamInitializer.WEIGHT_KEY).dup();
    INDArray l1Bias=layers[0].getParam(DefaultParamInitializer.BIAS_KEY).dup();
    INDArray l2Bias=layers[1].getParam(DefaultParamInitializer.BIAS_KEY).dup();
    float[] l1WeightsFloat=asFloat(l1Weights);
    float[] l2WeightsFloat=asFloat(l2Weights);
    float l1BiasFloat=l1Bias.getFloat(0);
    float[] l2BiasFloat=asFloat(l2Bias);
    float hiddenUnitPreSigmoid=dotProduct(l1WeightsFloat,xFloat) + l1BiasFloat;
    float hiddenUnitPostSigmoid=sigmoid(hiddenUnitPreSigmoid);
    float[] outputPreSoftmax=new float[3];
    for (int i=0; i < 3; i++)     outputPreSoftmax[i]=hiddenUnitPostSigmoid * l2WeightsFloat[i] + l2BiasFloat[i];
    float[] outputPostSoftmax=softmax(outputPreSoftmax);
    float[] deltaOut=vectorDifference(outputPostSoftmax,yFloat);
    float deltaHidden=0.0f;
    for (int i=0; i < 3; i++)     deltaHidden+=l2WeightsFloat[i] * deltaOut[i];
    deltaHidden*=derivOfSigmoid(hiddenUnitPreSigmoid);
    float[] dLdwOut=new float[3];
    for (int i=0; i < dLdwOut.length; i++)     dLdwOut[i]=deltaOut[i] * hiddenUnitPostSigmoid;
    float[] dLdwHidden=new float[4];
    for (int i=0; i < dLdwHidden.length; i++)     dLdwHidden[i]=deltaHidden * xFloat[i];
    float[] dLdbOut=deltaOut;
    float dLdbHidden=deltaHidden;
    if (printCalculations) {
      System.out.println("deltaOut = " + Arrays.toString(deltaOut));
      System.out.println("deltaHidden = " + deltaHidden);
      System.out.println("dLdwOut = " + Arrays.toString(dLdwOut));
      System.out.println("dLdbOut = " + Arrays.toString(dLdbOut));
      System.out.println("dLdwHidden = " + Arrays.toString(dLdwHidden));
      System.out.println("dLdbHidden = " + dLdbHidden);
    }
    float[] expectedL1WeightsAfter=new float[4];
    float[] expectedL2WeightsAfter=new float[3];
    float expectedL1BiasAfter=l1BiasFloat - 0.1f * dLdbHidden;
    float[] expectedL2BiasAfter=new float[3];
    for (int i=0; i < 4; i++)     expectedL1WeightsAfter[i]=l1WeightsFloat[i] - 0.1f * dLdwHidden[i];
    for (int i=0; i < 3; i++)     expectedL2WeightsAfter[i]=l2WeightsFloat[i] - 0.1f * dLdwOut[i];
    for (int i=0; i < 3; i++)     expectedL2BiasAfter[i]=l2BiasFloat[i] - 0.1f * dLdbOut[i];
    if (printCalculations) {
      System.out.println("Expected L1 weights = " + Arrays.toString(expectedL1WeightsAfter));
      System.out.println("Expected L2 weights = " + Arrays.toString(expectedL2WeightsAfter));
      System.out.println("Expected L1 bias = " + expectedL1BiasAfter);
      System.out.println("Expected L2 bias = " + Arrays.toString(expectedL2BiasAfter));
    }
    network.fit(data);
    INDArray l1WeightsAfter=layers[0].getParam(DefaultParamInitializer.WEIGHT_KEY);
    INDArray l2WeightsAfter=layers[1].getParam(DefaultParamInitializer.WEIGHT_KEY);
    INDArray l1BiasAfter=layers[0].getParam(DefaultParamInitializer.BIAS_KEY);
    INDArray l2BiasAfter=layers[1].getParam(DefaultParamInitializer.BIAS_KEY);
    float[] l1WeightsFloatAfter=asFloat(l1WeightsAfter);
    float[] l2WeightsFloatAfter=asFloat(l2WeightsAfter);
    float l1BiasFloatAfter=l1BiasAfter.getFloat(0);
    float[] l2BiasFloatAfter=asFloat(l2BiasAfter);
    float eps=0.0001f;
    assertArrayEquals(l1WeightsFloatAfter,expectedL1WeightsAfter,eps);
    assertArrayEquals(l2WeightsFloatAfter,expectedL2WeightsAfter,eps);
    assertEquals(l1BiasFloatAfter,expectedL1BiasAfter,eps);
    assertArrayEquals(l2BiasFloatAfter,expectedL2BiasAfter,eps);
  }
}
