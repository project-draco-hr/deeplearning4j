{
  caffe.Caffe.V0LayerParameter result=new caffe.Caffe.V0LayerParameter(this);
  int from_bitField0_=bitField0_;
  int from_bitField1_=bitField1_;
  int to_bitField0_=0;
  int to_bitField1_=0;
  if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
    to_bitField0_|=0x00000001;
  }
  result.name_=name_;
  if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
    to_bitField0_|=0x00000002;
  }
  result.type_=type_;
  if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
    to_bitField0_|=0x00000004;
  }
  result.numOutput_=numOutput_;
  if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
    to_bitField0_|=0x00000008;
  }
  result.biasterm_=biasterm_;
  if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
    to_bitField0_|=0x00000010;
  }
  if (weightFillerBuilder_ == null) {
    result.weightFiller_=weightFiller_;
  }
 else {
    result.weightFiller_=weightFillerBuilder_.build();
  }
  if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
    to_bitField0_|=0x00000020;
  }
  if (biasFillerBuilder_ == null) {
    result.biasFiller_=biasFiller_;
  }
 else {
    result.biasFiller_=biasFillerBuilder_.build();
  }
  if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
    to_bitField0_|=0x00000040;
  }
  result.pad_=pad_;
  if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
    to_bitField0_|=0x00000080;
  }
  result.kernelsize_=kernelsize_;
  if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
    to_bitField0_|=0x00000100;
  }
  result.group_=group_;
  if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
    to_bitField0_|=0x00000200;
  }
  result.stride_=stride_;
  if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
    to_bitField0_|=0x00000400;
  }
  result.pool_=pool_;
  if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
    to_bitField0_|=0x00000800;
  }
  result.dropoutRatio_=dropoutRatio_;
  if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
    to_bitField0_|=0x00001000;
  }
  result.localSize_=localSize_;
  if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
    to_bitField0_|=0x00002000;
  }
  result.alpha_=alpha_;
  if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
    to_bitField0_|=0x00004000;
  }
  result.beta_=beta_;
  if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
    to_bitField0_|=0x00008000;
  }
  result.k_=k_;
  if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
    to_bitField0_|=0x00010000;
  }
  result.source_=source_;
  if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
    to_bitField0_|=0x00020000;
  }
  result.scale_=scale_;
  if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
    to_bitField0_|=0x00040000;
  }
  result.meanfile_=meanfile_;
  if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
    to_bitField0_|=0x00080000;
  }
  result.batchsize_=batchsize_;
  if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
    to_bitField0_|=0x00100000;
  }
  result.cropsize_=cropsize_;
  if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
    to_bitField0_|=0x00200000;
  }
  result.mirror_=mirror_;
  if (blobsBuilder_ == null) {
    if (((bitField0_ & 0x00400000) == 0x00400000)) {
      blobs_=java.util.Collections.unmodifiableList(blobs_);
      bitField0_=(bitField0_ & ~0x00400000);
    }
    result.blobs_=blobs_;
  }
 else {
    result.blobs_=blobsBuilder_.build();
  }
  if (((bitField0_ & 0x00800000) == 0x00800000)) {
    blobsLr_=java.util.Collections.unmodifiableList(blobsLr_);
    bitField0_=(bitField0_ & ~0x00800000);
  }
  result.blobsLr_=blobsLr_;
  if (((bitField0_ & 0x01000000) == 0x01000000)) {
    weightDecay_=java.util.Collections.unmodifiableList(weightDecay_);
    bitField0_=(bitField0_ & ~0x01000000);
  }
  result.weightDecay_=weightDecay_;
  if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
    to_bitField0_|=0x00400000;
  }
  result.randSkip_=randSkip_;
  if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
    to_bitField0_|=0x00800000;
  }
  result.detFgThreshold_=detFgThreshold_;
  if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
    to_bitField0_|=0x01000000;
  }
  result.detBgThreshold_=detBgThreshold_;
  if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
    to_bitField0_|=0x02000000;
  }
  result.detFgFraction_=detFgFraction_;
  if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
    to_bitField0_|=0x04000000;
  }
  result.detContextPad_=detContextPad_;
  if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
    to_bitField0_|=0x08000000;
  }
  result.detCropMode_=detCropMode_;
  if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
    to_bitField0_|=0x10000000;
  }
  result.newNum_=newNum_;
  if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
    to_bitField0_|=0x20000000;
  }
  result.newChannels_=newChannels_;
  if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
    to_bitField0_|=0x40000000;
  }
  result.newHeight_=newHeight_;
  if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
    to_bitField0_|=0x80000000;
  }
  result.newWidth_=newWidth_;
  if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
    to_bitField1_|=0x00000001;
  }
  result.shuffleImages_=shuffleImages_;
  if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
    to_bitField1_|=0x00000002;
  }
  result.concatDim_=concatDim_;
  if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
    to_bitField1_|=0x00000004;
  }
  if (hdf5OutputParamBuilder_ == null) {
    result.hdf5OutputParam_=hdf5OutputParam_;
  }
 else {
    result.hdf5OutputParam_=hdf5OutputParamBuilder_.build();
  }
  result.bitField0_=to_bitField0_;
  result.bitField1_=to_bitField1_;
  onBuilt();
  return result;
}
