{
  getSerializedSize();
  if (((bitField1_ & 0x00000001) == 0x00000001)) {
    output.writeMessage(1,layer_);
  }
  for (int i=0; i < bottom_.size(); i++) {
    output.writeBytes(2,bottom_.getByteString(i));
  }
  for (int i=0; i < top_.size(); i++) {
    output.writeBytes(3,top_.getByteString(i));
  }
  if (((bitField0_ & 0x00000001) == 0x00000001)) {
    output.writeBytes(4,getNameBytes());
  }
  if (((bitField0_ & 0x00000002) == 0x00000002)) {
    output.writeEnum(5,type_.getNumber());
  }
  for (int i=0; i < blobs_.size(); i++) {
    output.writeMessage(6,blobs_.get(i));
  }
  for (int i=0; i < blobsLr_.size(); i++) {
    output.writeFloat(7,blobsLr_.get(i));
  }
  for (int i=0; i < weightDecay_.size(); i++) {
    output.writeFloat(8,weightDecay_.get(i));
  }
  if (((bitField0_ & 0x00000010) == 0x00000010)) {
    output.writeMessage(9,concatParam_);
  }
  if (((bitField0_ & 0x00000040) == 0x00000040)) {
    output.writeMessage(10,convolutionParam_);
  }
  if (((bitField0_ & 0x00000080) == 0x00000080)) {
    output.writeMessage(11,dataParam_);
  }
  if (((bitField0_ & 0x00000100) == 0x00000100)) {
    output.writeMessage(12,dropoutParam_);
  }
  if (((bitField0_ & 0x00001000) == 0x00001000)) {
    output.writeMessage(13,hdf5DataParam_);
  }
  if (((bitField0_ & 0x00002000) == 0x00002000)) {
    output.writeMessage(14,hdf5OutputParam_);
  }
  if (((bitField0_ & 0x00008000) == 0x00008000)) {
    output.writeMessage(15,imageDataParam_);
  }
  if (((bitField0_ & 0x00010000) == 0x00010000)) {
    output.writeMessage(16,infogainLossParam_);
  }
  if (((bitField0_ & 0x00020000) == 0x00020000)) {
    output.writeMessage(17,innerProductParam_);
  }
  if (((bitField0_ & 0x00040000) == 0x00040000)) {
    output.writeMessage(18,lrnParam_);
  }
  if (((bitField0_ & 0x00200000) == 0x00200000)) {
    output.writeMessage(19,poolingParam_);
  }
  if (((bitField0_ & 0x20000000) == 0x20000000)) {
    output.writeMessage(20,windowDataParam_);
  }
  if (((bitField0_ & 0x00400000) == 0x00400000)) {
    output.writeMessage(21,powerParam_);
  }
  if (((bitField0_ & 0x00080000) == 0x00080000)) {
    output.writeMessage(22,memoryDataParam_);
  }
  if (((bitField0_ & 0x00000008) == 0x00000008)) {
    output.writeMessage(23,argmaxParam_);
  }
  if (((bitField0_ & 0x00000400) == 0x00000400)) {
    output.writeMessage(24,eltwiseParam_);
  }
  if (((bitField0_ & 0x10000000) == 0x10000000)) {
    output.writeMessage(25,thresholdParam_);
  }
  if (((bitField0_ & 0x00000200) == 0x00000200)) {
    output.writeMessage(26,dummyDataParam_);
  }
  if (((bitField0_ & 0x00000004) == 0x00000004)) {
    output.writeMessage(27,accuracyParam_);
  }
  if (((bitField0_ & 0x00004000) == 0x00004000)) {
    output.writeMessage(29,hingeLossParam_);
  }
  if (((bitField0_ & 0x00800000) == 0x00800000)) {
    output.writeMessage(30,reluParam_);
  }
  if (((bitField0_ & 0x04000000) == 0x04000000)) {
    output.writeMessage(31,sliceParam_);
  }
  for (int i=0; i < include_.size(); i++) {
    output.writeMessage(32,include_.get(i));
  }
  for (int i=0; i < exclude_.size(); i++) {
    output.writeMessage(33,exclude_.get(i));
  }
  if (((bitField0_ & 0x00100000) == 0x00100000)) {
    output.writeMessage(34,mvnParam_);
  }
  for (int i=0; i < lossWeight_.size(); i++) {
    output.writeFloat(35,lossWeight_.get(i));
  }
  if (((bitField0_ & 0x40000000) == 0x40000000)) {
    output.writeMessage(36,transformParam_);
  }
  if (((bitField0_ & 0x08000000) == 0x08000000)) {
    output.writeMessage(37,tanhParam_);
  }
  if (((bitField0_ & 0x01000000) == 0x01000000)) {
    output.writeMessage(38,sigmoidParam_);
  }
  if (((bitField0_ & 0x02000000) == 0x02000000)) {
    output.writeMessage(39,softmaxParam_);
  }
  if (((bitField0_ & 0x00000020) == 0x00000020)) {
    output.writeMessage(40,contrastiveLossParam_);
  }
  if (((bitField0_ & 0x00000800) == 0x00000800)) {
    output.writeMessage(41,expParam_);
  }
  if (((bitField0_ & 0x80000000) == 0x80000000)) {
    output.writeMessage(42,lossParam_);
  }
  for (int i=0; i < param_.size(); i++) {
    output.writeBytes(1001,param_.getByteString(i));
  }
  for (int i=0; i < blobShareMode_.size(); i++) {
    output.writeEnum(1002,blobShareMode_.get(i).getNumber());
  }
  getUnknownFields().writeTo(output);
}
