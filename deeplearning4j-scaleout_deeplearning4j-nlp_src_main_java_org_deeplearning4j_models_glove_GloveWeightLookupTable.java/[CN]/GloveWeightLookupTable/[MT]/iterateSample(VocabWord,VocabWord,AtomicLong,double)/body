{
  INDArray w1Vector=syn0.slice(w1.getIndex());
  INDArray w2Vector=syn0.slice(w2.getIndex());
  Cooccurrence co=null;
  double diff=Nd4j.getBlasWrapper().dot(w1Vector,w2Vector) + (bias.getDouble(w1.getIndex()) + bias.getDouble(w2.getIndex()) - Math.log(co.getScore()));
  double fDiff=co.getScore() > xMax ? diff : Math.pow(co.getScore() / xMax,alpha) * diff;
  INDArray temp1=w1Vector.mul(fDiff);
  INDArray temp2=w2Vector.mul(fDiff);
  INDArray grad1=gradSq.slice(w1.getIndex());
  INDArray grad2=gradSq.slice(w2.getIndex());
  grad1.addi(Transforms.pow(temp1,2));
  grad2.addi(Transforms.pow(temp2,2));
  bias.putScalar(w1.getIndex(),bias.getDouble(w1.getIndex()) - fDiff / Math.sqrt(gradSqBias.getDouble(w1.getIndex())));
  bias.putScalar(w2.getIndex(),bias.getDouble(w1.getIndex()) - fDiff / Math.sqrt(gradSqBias.getDouble(w2.getIndex())));
  fDiff*=fDiff;
  grad1.addi(fDiff);
  grad2.addi(fDiff);
}
