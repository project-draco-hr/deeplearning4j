{
  MnistDataFetcher fetcher=new MnistDataFetcher(true);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().momentum(0.9f).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(10).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).learningRate(1e-1f).layer(new org.deeplearning4j.nn.conf.layers.RecursiveAutoEncoder.Builder().nIn(784).nOut(784).weightInit(WeightInit.VI).build()).build();
  fetcher.fetch(10);
  DataSet d2=fetcher.next();
  INDArray input=d2.getFeatureMatrix();
  RecursiveAutoEncoder da=LayerFactories.getFactory(conf).create(conf,Arrays.<IterationListener>asList(new ScoreIterationListener(10)),0);
  da.fit(input);
}
