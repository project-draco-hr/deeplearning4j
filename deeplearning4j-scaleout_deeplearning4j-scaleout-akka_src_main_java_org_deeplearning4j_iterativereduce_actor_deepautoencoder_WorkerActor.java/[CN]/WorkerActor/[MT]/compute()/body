{
  if (tracker.isDone())   return null;
  if (!tracker.workerEnabled(id)) {
    log.info("Worker " + id + " should be re enabled if not doing work");
    return null;
  }
  log.info("Training network on worker " + id);
  SemanticHashing network=getResults().get();
  isWorking.set(true);
  while (network == null) {
    try {
      network=tracker.getCurrent().get();
      results.set(network);
      log.info("Network is currently null");
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  DataSet d=null;
  if (currentJob != null && tracker.workerEnabled(id)) {
    log.info("Found job for worker " + id);
    if (currentJob.getWork() instanceof List) {
      List<DataSet> l=(List<DataSet>)currentJob.getWork();
      d=DataSet.merge(l);
    }
 else     d=(DataSet)currentJob.getWork();
  }
 else   log.warn("No job found for " + id + " despite compute being called");
  if (currentJob == null)   return null;
  if (d == null) {
    throw new IllegalStateException("No job found for worker " + id);
  }
  if (conf.isNormalizeZeroMeanAndUnitVariance())   d.normalizeZeroMeanZeroUnitVariance();
  if (conf.isScale())   d.scale();
  if (d.getFeatureMatrix() == null || d.getLabels() == null)   throw new IllegalStateException("Input cant be null");
  if (tracker.isPretrain()) {
    int numTries=0;
    boolean done=false;
    while (!done && numTries < 3) {
      try {
        log.info("Worker " + id + " pretraining");
        network.getEncoder().pretrain(d.getFeatureMatrix(),conf.getDeepLearningParams());
        done=true;
      }
 catch (      Exception e) {
        if (d.getFeatureMatrix() == null) {
          d=(DataSet)currentJob.getWork();
        }
        numTries++;
      }
    }
    if (!done) {
      log.warn("Worker " + id + " failed! returning null");
      try {
        if (!tracker.isDone())         tracker.clearJob(id);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
      if (!tracker.isDone())       isWorking.set(false);
    }
  }
 else {
    int numTries=0;
    boolean done=false;
    while (!done && numTries < 3) {
      try {
        network.finetune(d.getFeatureMatrix());
        log.info("Worker " + id + " finetune");
        done=true;
      }
 catch (      Exception e) {
        numTries++;
      }
    }
    if (!done) {
      log.warn("Worker " + id + " failed! returning null");
      try {
        if (!tracker.isDone())         tracker.clearJob(id);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
      if (!tracker.isDone())       isWorking.set(false);
    }
  }
  try {
    if (!tracker.isDone())     tracker.clearJob(id);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  if (!tracker.isDone())   isWorking.set(false);
  return new UpdateableEncoderImpl(network);
}
