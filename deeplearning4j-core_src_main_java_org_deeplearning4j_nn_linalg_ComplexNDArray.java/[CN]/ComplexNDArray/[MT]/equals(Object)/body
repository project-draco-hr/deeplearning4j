{
  ComplexNDArray n=null;
  if (o instanceof ComplexDoubleMatrix && !(o instanceof ComplexNDArray)) {
    ComplexDoubleMatrix d=(ComplexDoubleMatrix)o;
    if (shape().length > 2)     return false;
 else     n=ComplexNDArray.wrap(d);
  }
 else   if (!o.getClass().isAssignableFrom(ComplexNDArray.class))   return false;
  if (n == null)   n=(ComplexNDArray)o;
  if (!Arrays.equals(shape(),n.shape()))   return false;
  if (isScalar())   return get(0).sub(n.get(0)).abs() < 1e-6;
 else   if (isVector()) {
    for (int i=0; i < length; i++) {
      ComplexDouble curr=get(i);
      ComplexDouble comp=n.get(i);
      if (curr.sub(comp).abs() > 1e-6)       return false;
    }
  }
  for (int i=0; i < slices(); i++) {
    if (!(slice(i).equals(n.slice(i))))     return false;
  }
  return true;
}
