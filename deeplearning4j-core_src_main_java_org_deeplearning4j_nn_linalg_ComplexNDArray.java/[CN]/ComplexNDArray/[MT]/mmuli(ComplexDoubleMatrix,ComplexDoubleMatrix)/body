{
  if (other.isScalar())   return ComplexNDArray.wrap(muli(other.scalar(),result));
  ComplexNDArray otherArray=ComplexNDArray.wrap(other);
  ComplexNDArray resultArray=ComplexNDArray.wrap(result);
  assertMultipliesWith(other);
  if (result.rows != rows || result.columns != other.columns) {
    if (result != this && result != other)     result.resize(rows,other.columns);
 else     throw new SizeException("Cannot resize result matrix because it is used in-place.");
  }
  if (result == this || result == other) {
    ComplexNDArray temp=new ComplexNDArray(resultArray.shape(),ArrayUtil.calcStridesFortran(resultArray.shape()));
    NDArrayBlas.gemm(ComplexDouble.UNIT,this,otherArray,ComplexDouble.ZERO,temp);
    NDArrayBlas.copy(temp,resultArray);
  }
 else {
    otherArray=otherArray.flatten().reshape(otherArray.shape);
    ComplexNDArray thisInput=this.flatten().reshape(shape());
    NDArrayBlas.gemm(ComplexDouble.UNIT,thisInput,otherArray,ComplexDouble.ZERO,resultArray);
  }
  return resultArray;
}
