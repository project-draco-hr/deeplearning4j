{
  ObjectMapper mapper=NeuralNetConfiguration.mapper();
  AnnotatedClass ac=AnnotatedClass.construct(Layer.class,mapper.getSerializationConfig().getAnnotationIntrospector(),null);
  Collection<NamedType> types=mapper.getSubtypeResolver().collectAndResolveSubtypes(ac,mapper.getSerializationConfig(),mapper.getSerializationConfig().getAnnotationIntrospector());
  Set<Class<?>> registeredSubtypes=new HashSet<>();
  boolean found=false;
  for (  NamedType nt : types) {
    System.out.println(nt);
    if (nt.getType() == CustomOutputLayer.class)     found=true;
  }
  assertTrue("CustomOutputLayer: not registered with NeuralNetConfiguration mapper",found);
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).learningRate(0.1).list().layer(0,new DenseLayer.Builder().nIn(10).nOut(10).build()).layer(1,new CustomOutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(10).nOut(10).build()).pretrain(false).backprop(true).build();
  String json=conf.toJson();
  String yaml=conf.toYaml();
  System.out.println(json);
  MultiLayerConfiguration confFromJson=MultiLayerConfiguration.fromJson(json);
  assertEquals(conf,confFromJson);
  MultiLayerConfiguration confFromYaml=MultiLayerConfiguration.fromYaml(yaml);
  assertEquals(conf,confFromYaml);
  Nd4j.getRandom().setSeed(12345);
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  assertTrue(net.getLayer(1) instanceof CustomOutputLayerImpl);
  MultiLayerConfiguration conf2=new NeuralNetConfiguration.Builder().seed(12345).learningRate(0.1).weightInit(WeightInit.XAVIER).list().layer(0,new DenseLayer.Builder().nIn(10).nOut(10).build()).layer(1,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(10).nOut(10).build()).pretrain(false).backprop(true).build();
  Nd4j.getRandom().setSeed(12345);
  MultiLayerNetwork net2=new MultiLayerNetwork(conf2);
  net2.init();
  assertEquals(net2.params(),net.params());
  INDArray testFeatures=Nd4j.rand(1,10);
  INDArray testLabels=Nd4j.zeros(1,10);
  testLabels.putScalar(0,3,1.0);
  DataSet ds=new DataSet(testFeatures,testLabels);
  assertEquals(net2.output(testFeatures),net.output(testFeatures));
  assertEquals(net2.score(ds),net.score(ds),1e-6);
}
