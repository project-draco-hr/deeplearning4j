{
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).learningRate(0.1).graphBuilder().addInputs("in").addLayer("0",new DenseLayer.Builder().nIn(10).nOut(10).build(),"in").addLayer("1",new CustomOutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(10).nOut(10).build(),"0").setOutputs("1").pretrain(false).backprop(true).build();
  String json=conf.toJson();
  String yaml=conf.toYaml();
  System.out.println(json);
  ComputationGraphConfiguration confFromJson=ComputationGraphConfiguration.fromJson(json);
  assertEquals(conf,confFromJson);
  ComputationGraphConfiguration confFromYaml=ComputationGraphConfiguration.fromYaml(yaml);
  assertEquals(conf,confFromYaml);
  Nd4j.getRandom().setSeed(12345);
  ComputationGraph net=new ComputationGraph(conf);
  net.init();
  assertTrue(net.getLayer(1) instanceof CustomOutputLayerImpl);
  ComputationGraphConfiguration conf2=new NeuralNetConfiguration.Builder().seed(12345).learningRate(0.1).graphBuilder().addInputs("in").addLayer("0",new DenseLayer.Builder().nIn(10).nOut(10).build(),"in").addLayer("1",new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(10).nOut(10).build(),"0").setOutputs("1").pretrain(false).backprop(true).build();
  Nd4j.getRandom().setSeed(12345);
  ComputationGraph net2=new ComputationGraph(conf2);
  net2.init();
  assertEquals(net2.params(),net.params());
  INDArray testFeatures=Nd4j.rand(1,10);
  INDArray testLabels=Nd4j.zeros(1,10);
  testLabels.putScalar(0,3,1.0);
  DataSet ds=new DataSet(testFeatures,testLabels);
  assertEquals(net2.output(testFeatures)[0],net.output(testFeatures)[0]);
  assertEquals(net2.score(ds),net.score(ds),1e-6);
}
