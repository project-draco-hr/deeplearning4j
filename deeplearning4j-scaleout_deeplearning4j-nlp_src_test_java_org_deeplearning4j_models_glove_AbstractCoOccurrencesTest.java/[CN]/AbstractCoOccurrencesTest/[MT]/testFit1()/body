{
  ClassPathResource resource=new ClassPathResource("other/oneline.txt");
  File file=resource.getFile();
  AbstractCache<VocabWord> vocabCache=new AbstractCache.Builder<VocabWord>().build();
  BasicLineIterator underlyingIterator=new BasicLineIterator(file);
  TokenizerFactory t=new DefaultTokenizerFactory();
  t.setTokenPreProcessor(new CommonPreprocessor());
  SentenceTransformer transformer=new SentenceTransformer.Builder().iterator(underlyingIterator).tokenizerFactory(t).build();
  AbstractSequenceIterator<VocabWord> sequenceIterator=new AbstractSequenceIterator.Builder<VocabWord>(transformer).build();
  VocabConstructor<VocabWord> constructor=new VocabConstructor.Builder<VocabWord>().addSource(sequenceIterator,1).setTargetVocabCache(vocabCache).build();
  constructor.buildJointVocabulary(false,true);
  AbstractCoOccurrences<VocabWord> coOccurrences=new AbstractCoOccurrences.Builder<VocabWord>().iterate(sequenceIterator).vocabCache(vocabCache).symmetric(false).windowSize(15).build();
  coOccurrences.fit();
  Iterator<Pair<Pair<VocabWord,VocabWord>,Double>> iterator=coOccurrences.iterator();
  assertNotEquals(null,iterator);
  int cnt=0;
  List<Pair<VocabWord,VocabWord>> list=new ArrayList<>();
  while (iterator.hasNext()) {
    Pair<Pair<VocabWord,VocabWord>,Double> pair=iterator.next();
    list.add(pair.getFirst());
    cnt++;
  }
  log.info("CoOccurrences: " + list);
  assertEquals(16,list.size());
  assertEquals(16,cnt);
}
