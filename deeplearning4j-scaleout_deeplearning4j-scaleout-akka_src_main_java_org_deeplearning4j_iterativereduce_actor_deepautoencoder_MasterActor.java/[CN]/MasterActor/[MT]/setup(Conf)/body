{
  log.info("Starting workers");
  ActorSystem system=context().system();
  RoundRobinPool pool=new RoundRobinPool(Runtime.getRuntime().availableProcessors());
  Props p=pool.props(WorkerActor.propsFor(conf,(StateTracker<UpdateableEncoderImpl>)stateTracker));
  p=ClusterSingletonManager.defaultProps(p,"master",PoisonPill.getInstance(),"master");
  system.actorOf(p,"worker");
  log.info("Broadcasting initial master network");
  DeepAutoEncoder network;
  if (this.network == null) {
    if (encoder != null) {
      network=new DeepAutoEncoder.Builder().withEncoder(this.network).build();
      this.network=network;
    }
 else {
      network=new DeepAutoEncoder.Builder().withEncoder(conf.init()).build();
      this.network=network;
    }
  }
 else   network=this.network;
  network.setOutputLayerActivation(conf.getOutputActivationFunction());
  network.setRoundCodeLayerInput(conf.isRoundCodeLayer());
  network.setNormalizeCodeLayerOutput(conf.isNormalizeCodeLayer());
  UpdateableEncoderImpl masterResults=new UpdateableEncoderImpl(network);
  try {
    this.stateTracker.setCurrent(masterResults);
    UpdateableEncoderImpl u2=this.stateTracker.getCurrent();
    log.info("Stored " + u2.get());
  }
 catch (  Exception e1) {
    throw new RuntimeException(e1);
  }
  stateTracker.setMiniBatchSize(conf.getSplit());
}
