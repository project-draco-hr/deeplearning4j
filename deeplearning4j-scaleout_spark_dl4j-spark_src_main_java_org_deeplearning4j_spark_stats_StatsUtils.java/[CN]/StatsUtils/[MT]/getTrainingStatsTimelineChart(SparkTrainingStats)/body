{
  Set<Tuple3<String,String,Long>> uniqueTuples=new HashSet<>();
  Set<String> keySet=stats.getKeySet();
  for (  String s : keySet) {
    List<EventStats> list=stats.getValue(s);
    for (    EventStats e : list) {
      uniqueTuples.add(new Tuple3<>(e.getMachineID(),e.getJvmID(),e.getThreadID()));
    }
  }
  int nLanes=uniqueTuples.size();
  List<Tuple3<String,String,Long>> outputOrder=new ArrayList<>(uniqueTuples);
  Collections.sort(outputOrder,new TupleComparator());
  List<List<ChartTimeline.TimelineEntry>> entriesByLane=new ArrayList<>();
  for (int i=0; i < nLanes; i++)   entriesByLane.add(new ArrayList<ChartTimeline.TimelineEntry>());
  for (  String s : keySet) {
    List<EventStats> list=stats.getValue(s);
    for (    EventStats e : list) {
      if (e.getDurationMs() == 0)       continue;
      long start=e.getStartTime();
      long end=start + e.getDurationMs();
      Tuple3<String,String,Long> tuple=new Tuple3<>(e.getMachineID(),e.getJvmID(),e.getThreadID());
      int idx=outputOrder.indexOf(tuple);
      ChartTimeline.TimelineEntry entry=new ChartTimeline.TimelineEntry(stats.getShortNameForKey(s),start,end);
      entriesByLane.get(idx).add(entry);
    }
  }
  for (  List<ChartTimeline.TimelineEntry> l : entriesByLane) {
    Collections.sort(l,new Comparator<ChartTimeline.TimelineEntry>(){
      @Override public int compare(      ChartTimeline.TimelineEntry o1,      ChartTimeline.TimelineEntry o2){
        return Long.compare(o1.getStartTimeMs(),o2.getStartTimeMs());
      }
    }
);
  }
  StyleChart sc=new StyleChart.Builder().width(1024,LengthUnit.Px).height(50 * nLanes + 300,LengthUnit.Px).margin(LengthUnit.Px,10,10,100,10).build();
  ChartTimeline.Builder b=new ChartTimeline.Builder("Timeline",sc);
  int i=0;
  for (  List<ChartTimeline.TimelineEntry> l : entriesByLane) {
    Tuple3<String,String,Long> t3=outputOrder.get(i);
    String name=t3._1() + "/" + t3._2()+ "/"+ t3._3();
    b.addLane(name,l);
    i++;
  }
  return b.build();
}
