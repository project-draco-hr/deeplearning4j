{
  if (theta == 0.0) {
    logger.debug("theta == 0, using decomposed version, might be slow");
    Tsne decomposedTsne=new Tsne(maxIter,realMin,initialMomentum,finalMomentum,minGain,momentum,switchMomentumIteration,normalize,usePca,stopLyingIteration,tolerance,learningRate,useAdaGrad,perplexity);
    Y=decomposedTsne.calculate(x,numDimensions,perplexity);
  }
 else {
    if (Y == null) {
      Y=randn(x.rows(),numDimensions,Nd4j.getRandom()).muli(1e-3f);
    }
    computeGaussianPerplexity(x,perplexity);
    vals=symmetrized(rows,cols,vals).divi(vals.sum(Integer.MAX_VALUE));
    vals.muli(12);
    for (int i=0; i < maxIter; i++) {
      step(vals,i);
      if (i == switchMomentumIteration)       momentum=finalMomentum;
      if (i == stopLyingIteration)       vals.divi(12);
      if (iterationListener != null) {
        iterationListener.iterationDone(this,i);
      }
      logger.info("Error at iteration " + i + " is "+ score());
    }
  }
}
