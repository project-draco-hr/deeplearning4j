{
  INDArray buff=Nd4j.create(numDimensions);
  AtomicDouble sum_Q=new AtomicDouble(0.0);
  for (int n=0; n < N; n++)   tree.computeNonEdgeForces(n,theta,buff,sum_Q);
  double C=.0;
  INDArray linear=Y;
  for (int n=0; n < N; n++) {
    int begin=rows.getInt(n);
    int end=rows.getInt(n + 1);
    int ind1=n;
    for (int i=begin; i < end; i++) {
      int ind2=cols.getInt(i);
      buff.assign(linear.slice(ind1));
      buff.subi(linear.slice(ind2));
      double Q=pow(buff,2).sum(Integer.MAX_VALUE).getDouble(0);
      Q=(1.0 / (1.0 + Q)) / sum_Q.doubleValue();
      C+=vals.getDouble(i) * FastMath.log(vals.getDouble(i) + Nd4j.EPS_THRESHOLD) / (Q + Nd4j.EPS_THRESHOLD);
    }
  }
  return C;
}
