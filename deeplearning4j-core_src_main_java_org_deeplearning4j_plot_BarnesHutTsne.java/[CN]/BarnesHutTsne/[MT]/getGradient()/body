{
  if (yIncs == null)   yIncs=zeros(y.shape());
  if (gains == null)   gains=ones(y.shape());
  AtomicDouble sumQ=new AtomicDouble(0);
  INDArray posF=Nd4j.create(y.shape());
  INDArray negF=Nd4j.create(y.shape());
  QuadTree quad=new QuadTree(y);
  quad.computeEdgeForces(rows,cols,vals,N,posF);
  for (int n=0; n < N; n++)   quad.computeNonEdgeForces(n,theta,negF.slice(n),sumQ);
  INDArray dC=posF.subi(negF.divi(sumQ));
  Gradient ret=new DefaultGradient();
  ret.gradientLookupTable().put(Y_GRAD,dC);
  return ret;
}
