{
  int hiddenLayerSize=recurrentWeights.size(0);
  int prevLayerSize=inputWeights.size(0);
  int miniBatchSize=epsilon.size(0);
  boolean is2dInput=epsilon.rank() < 3;
  int timeSeriesLength=(is2dInput ? 1 : epsilon.size(2));
  INDArray wFFTranspose=recurrentWeights.get(NDArrayIndex.all(),point(4 * hiddenLayerSize)).transpose();
  INDArray wOOTranspose=recurrentWeights.get(NDArrayIndex.all(),point(4 * hiddenLayerSize + 1)).transpose();
  INDArray wGGTranspose=recurrentWeights.get(NDArrayIndex.all(),point(4 * hiddenLayerSize + 2)).transpose();
  INDArray wIFOG=recurrentWeights.get(NDArrayIndex.all(),NDArrayIndex.interval(0,4 * hiddenLayerSize));
  INDArray epsilonNext=Nd4j.create(new int[]{miniBatchSize,prevLayerSize,timeSeriesLength},'f');
  INDArray nablaCellStateNext=null;
  INDArray deltaifogNext=Nd4j.create(new int[]{miniBatchSize,4 * hiddenLayerSize},'f');
  INDArray deltaiNext=deltaifogNext.get(NDArrayIndex.all(),NDArrayIndex.interval(0,hiddenLayerSize));
  INDArray deltafNext=deltaifogNext.get(NDArrayIndex.all(),NDArrayIndex.interval(hiddenLayerSize,2 * hiddenLayerSize));
  INDArray deltaoNext=deltaifogNext.get(NDArrayIndex.all(),NDArrayIndex.interval(2 * hiddenLayerSize,3 * hiddenLayerSize));
  INDArray deltagNext=deltaifogNext.get(NDArrayIndex.all(),NDArrayIndex.interval(3 * hiddenLayerSize,4 * hiddenLayerSize));
  Level1 l1BLAS=Nd4j.getBlasWrapper().level1();
  int endIdx=0;
  if (truncatedBPTT) {
    endIdx=Math.max(0,timeSeriesLength - tbpttBackwardLength);
  }
  INDArray iwGradientsOut=Nd4j.create(new int[]{prevLayerSize,4 * hiddenLayerSize},'f');
  INDArray rwGradientsOut=Nd4j.create(new int[]{hiddenLayerSize,4 * hiddenLayerSize + 3},'f');
  INDArray bGradientsOut=Nd4j.create(1,4 * hiddenLayerSize);
  INDArray rwGradientsIFOG=rwGradientsOut.get(NDArrayIndex.all(),NDArrayIndex.interval(0,4 * hiddenLayerSize));
  INDArray rwGradientsFF=rwGradientsOut.get(NDArrayIndex.all(),NDArrayIndex.point(4 * hiddenLayerSize));
  INDArray rwGradientsOO=rwGradientsOut.get(NDArrayIndex.all(),NDArrayIndex.point(4 * hiddenLayerSize + 1));
  INDArray rwGradientsGG=rwGradientsOut.get(NDArrayIndex.all(),NDArrayIndex.point(4 * hiddenLayerSize + 2));
  for (int iTimeIndex=timeSeriesLength - 1; iTimeIndex >= endIdx; iTimeIndex--) {
    int time=iTimeIndex;
    int inext=1;
    if (!forwards) {
      time=timeSeriesLength - iTimeIndex - 1;
      inext=-1;
    }
    INDArray nablaCellState;
    if (iTimeIndex != timeSeriesLength - 1) {
      nablaCellState=deltafNext.dup('f').muliRowVector(wFFTranspose);
      l1BLAS.axpy(nablaCellState.length(),1.0,deltagNext.dup('f').muliRowVector(wGGTranspose),nablaCellState);
    }
 else {
      nablaCellState=Nd4j.create(new int[]{miniBatchSize,hiddenLayerSize},'f');
    }
    INDArray prevMemCellState=(iTimeIndex == 0 ? null : fwdPass.memCellState[time - inext]);
    INDArray prevHiddenUnitActivation=(iTimeIndex == 0 ? null : fwdPass.fwdPassOutputAsArrays[time - inext]);
    INDArray currMemCellState=fwdPass.memCellState[time];
    INDArray epsilonSlice=(is2dInput ? epsilon : epsilon.tensorAlongDimension(time,1,0));
    INDArray nablaOut=Shape.toOffsetZeroCopy(epsilonSlice,'f');
    if (iTimeIndex != timeSeriesLength - 1) {
      Nd4j.gemm(deltaifogNext,wIFOG,nablaOut,false,true,1.0,1.0);
    }
    INDArray sigmahOfS=fwdPass.memCellActivations[time];
    INDArray ao=fwdPass.oa[time];
    INDArray sigmaoPrimeOfZo=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("timesoneminus",ao.dup('f')));
    INDArray deltao=deltaoNext;
    Nd4j.getExecutioner().exec(new MulOp(nablaOut,sigmahOfS,deltao));
    deltao.muli(sigmaoPrimeOfZo);
    INDArray sigmahPrimeOfS=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf.getLayer().getActivationFunction(),currMemCellState.dup('f')).derivative());
    l1BLAS.axpy(nablaCellState.length(),1.0,ao.muli(nablaOut).muli(sigmahPrimeOfS),nablaCellState);
    INDArray deltaMulRowWOO=deltao.dup('f').muliRowVector(wOOTranspose);
    l1BLAS.axpy(nablaCellState.length(),1.0,deltaMulRowWOO,nablaCellState);
    if (iTimeIndex != timeSeriesLength - 1) {
      INDArray nextForgetGateAs=fwdPass.fa[time + inext];
      int length=nablaCellState.length();
      l1BLAS.axpy(length,1.0,nextForgetGateAs.muli(nablaCellStateNext),nablaCellState);
    }
    nablaCellStateNext=nablaCellState;
    INDArray af=fwdPass.fa[time];
    INDArray deltaf=null;
    if (iTimeIndex > 0) {
      deltaf=deltafNext;
      Nd4j.getExecutioner().exec(new TimesOneMinus(af,deltaf));
      deltaf.muli(nablaCellState);
      deltaf.muli(prevMemCellState);
    }
    INDArray ag=fwdPass.ga[time];
    INDArray ai=fwdPass.ia[time];
    INDArray deltag=deltagNext;
    Nd4j.getExecutioner().exec(new TimesOneMinus(ag,deltag));
    deltag.muli(ai);
    deltag.muli(nablaCellState);
    INDArray zi=fwdPass.iz[time];
    INDArray deltai=deltaiNext;
    Nd4j.getExecutioner().exec(Nd4j.getOpFactory().createTransform(conf.getLayer().getActivationFunction(),zi,null,deltai).derivative());
    deltai.muli(ag);
    deltai.muli(nablaCellState);
    INDArray prevLayerActivationSlice=Shape.toMmulCompatible(is2dInput ? input : input.tensorAlongDimension(time,1,0));
    if (iTimeIndex > 0) {
      Nd4j.gemm(prevLayerActivationSlice,deltaifogNext,iwGradientsOut,true,false,1.0,1.0);
    }
 else {
      INDArray iwGradients_i=iwGradientsOut.get(NDArrayIndex.all(),NDArrayIndex.interval(0,hiddenLayerSize));
      Nd4j.gemm(prevLayerActivationSlice,deltai,iwGradients_i,true,false,1.0,1.0);
      INDArray iwGradients_og=iwGradientsOut.get(NDArrayIndex.all(),NDArrayIndex.interval(2 * hiddenLayerSize,4 * hiddenLayerSize));
      INDArray deltaog=deltaifogNext.get(NDArrayIndex.all(),NDArrayIndex.interval(2 * hiddenLayerSize,4 * hiddenLayerSize));
      Nd4j.gemm(prevLayerActivationSlice,deltaog,iwGradients_og,true,false,1.0,1.0);
    }
    if (iTimeIndex > 0) {
      Nd4j.gemm(prevHiddenUnitActivation,deltaifogNext,rwGradientsIFOG,true,false,1.0,1.0);
      INDArray dLdwFF=deltaf.dup('f').muli(prevMemCellState).sum(0);
      l1BLAS.axpy(hiddenLayerSize,1.0,dLdwFF,rwGradientsFF);
      INDArray dLdwGG=deltag.dup('f').muli(prevMemCellState).sum(0);
      l1BLAS.axpy(hiddenLayerSize,1.0,dLdwGG,rwGradientsGG);
    }
    INDArray dLdwOO=deltao.dup('f').muli(currMemCellState).sum(0);
    l1BLAS.axpy(hiddenLayerSize,1.0,dLdwOO,rwGradientsOO);
    if (iTimeIndex > 0) {
      l1BLAS.axpy(4 * hiddenLayerSize,1.0,deltaifogNext.sum(0),bGradientsOut);
    }
 else {
      l1BLAS.axpy(hiddenLayerSize,1.0,deltai.sum(0),bGradientsOut);
      INDArray ogBiasToAdd=deltaifogNext.get(NDArrayIndex.all(),NDArrayIndex.interval(2 * hiddenLayerSize,4 * hiddenLayerSize)).sum(0);
      INDArray ogBiasGrad=bGradientsOut.get(NDArrayIndex.point(0),NDArrayIndex.interval(2 * hiddenLayerSize,4 * hiddenLayerSize));
      l1BLAS.axpy(2 * hiddenLayerSize,1.0,ogBiasToAdd,ogBiasGrad);
    }
    INDArray epsilonNextSlice=epsilonNext.tensorAlongDimension(time,1,0);
    if (iTimeIndex > 0) {
      Nd4j.gemm(deltaifogNext,inputWeights,epsilonNextSlice,false,true,1.0,1.0);
    }
 else {
      INDArray wi=inputWeights.get(NDArrayIndex.all(),NDArrayIndex.interval(0,hiddenLayerSize));
      Nd4j.gemm(deltai,wi,epsilonNextSlice,false,true,1.0,1.0);
      INDArray deltaog=deltaifogNext.get(NDArrayIndex.all(),NDArrayIndex.interval(2 * hiddenLayerSize,4 * hiddenLayerSize));
      INDArray wog=inputWeights.get(NDArrayIndex.all(),NDArrayIndex.interval(2 * hiddenLayerSize,4 * hiddenLayerSize));
      Nd4j.gemm(deltaog,wog,epsilonNextSlice,false,true,1.0,1.0);
    }
  }
  Gradient retGradient=new DefaultGradient();
  retGradient.gradientForVariable().put(inputWeightKey,iwGradientsOut);
  retGradient.gradientForVariable().put(recurrentWeightKey,rwGradientsOut);
  retGradient.gradientForVariable().put(biasWeightKey,bGradientsOut);
  return new Pair<>(retGradient,epsilonNext);
}
