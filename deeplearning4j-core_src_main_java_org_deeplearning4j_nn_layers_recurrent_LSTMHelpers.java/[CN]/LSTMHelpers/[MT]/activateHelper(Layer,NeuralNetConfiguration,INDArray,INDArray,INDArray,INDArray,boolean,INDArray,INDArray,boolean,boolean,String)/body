{
  if (input == null || input.length() == 0)   throw new IllegalArgumentException("Invalid input: not set or 0 length");
  INDArray inputWeights=originalInputWeights;
  INDArray prevOutputActivations=originalPrevOutputActivations;
  INDArray prevMemCellState=originalPrevMemCellState;
  boolean is2dInput=input.rank() < 3;
  int timeSeriesLength=(is2dInput ? 1 : input.size(2));
  int hiddenLayerSize=recurrentWeights.size(0);
  int miniBatchSize=input.size(0);
  INDArray recurrentWeightsIFOG=recurrentWeights.get(NDArrayIndex.all(),NDArrayIndex.interval(0,4 * hiddenLayerSize)).dup('f');
  if (conf.isUseDropConnect() && training) {
    if (conf.getLayer().getDropOut() > 0) {
      inputWeights=Dropout.applyDropConnect(layer,inputWeightKey);
    }
  }
  INDArray wFFTranspose=recurrentWeights.get(NDArrayIndex.all(),interval(4 * hiddenLayerSize,4 * hiddenLayerSize + 1)).transpose();
  INDArray wOOTranspose=recurrentWeights.get(NDArrayIndex.all(),interval(4 * hiddenLayerSize + 1,4 * hiddenLayerSize + 2)).transpose();
  INDArray wGGTranspose=recurrentWeights.get(NDArrayIndex.all(),interval(4 * hiddenLayerSize + 2,4 * hiddenLayerSize + 3)).transpose();
  if (timeSeriesLength > 1 || forBackprop) {
    wFFTranspose=Shape.toMmulCompatible(wFFTranspose);
    wOOTranspose=Shape.toMmulCompatible(wOOTranspose);
    wGGTranspose=Shape.toMmulCompatible(wGGTranspose);
  }
  INDArray outputActivations=null;
  FwdPassReturn toReturn=new FwdPassReturn();
  if (forBackprop) {
    toReturn.fwdPassOutputAsArrays=new INDArray[timeSeriesLength];
    toReturn.memCellState=new INDArray[timeSeriesLength];
    toReturn.memCellActivations=new INDArray[timeSeriesLength];
    toReturn.iz=new INDArray[timeSeriesLength];
    toReturn.ia=new INDArray[timeSeriesLength];
    toReturn.fa=new INDArray[timeSeriesLength];
    toReturn.oa=new INDArray[timeSeriesLength];
    toReturn.ga=new INDArray[timeSeriesLength];
  }
 else {
    outputActivations=Nd4j.create(new int[]{miniBatchSize,hiddenLayerSize,timeSeriesLength},'f');
    toReturn.fwdPassOutput=outputActivations;
  }
  Level1 l1BLAS=Nd4j.getBlasWrapper().level1();
  if (prevOutputActivations == null) {
    prevOutputActivations=Nd4j.zeros(new int[]{miniBatchSize,hiddenLayerSize});
  }
  if (prevMemCellState == null) {
    prevMemCellState=Nd4j.zeros(new int[]{miniBatchSize,hiddenLayerSize});
  }
  for (int iTimeIndex=0; iTimeIndex < timeSeriesLength; iTimeIndex++) {
    int time=iTimeIndex;
    if (!forwards) {
      time=timeSeriesLength - iTimeIndex - 1;
    }
    INDArray miniBatchData=(is2dInput ? input : input.tensorAlongDimension(time,1,0));
    miniBatchData=Shape.toMmulCompatible(miniBatchData);
    INDArray ifogActivations=miniBatchData.mmul(inputWeights);
    Nd4j.gemm(prevOutputActivations,recurrentWeightsIFOG,ifogActivations,false,false,1.0,1.0);
    ifogActivations.addiRowVector(biases);
    INDArray inputActivations=ifogActivations.get(NDArrayIndex.all(),NDArrayIndex.interval(0,hiddenLayerSize));
    if (forBackprop)     toReturn.iz[time]=inputActivations.dup('f');
    Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf.getLayer().getActivationFunction(),inputActivations));
    if (forBackprop)     toReturn.ia[time]=inputActivations;
    INDArray forgetGateActivations=ifogActivations.get(NDArrayIndex.all(),NDArrayIndex.interval(hiddenLayerSize,2 * hiddenLayerSize));
    INDArray pmcellWFF=prevMemCellState.dup('f').muliRowVector(wFFTranspose);
    l1BLAS.axpy(pmcellWFF.length(),1.0,pmcellWFF,forgetGateActivations);
    Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",forgetGateActivations));
    if (forBackprop)     toReturn.fa[time]=forgetGateActivations;
    INDArray inputModGateActivations=ifogActivations.get(NDArrayIndex.all(),NDArrayIndex.interval(3 * hiddenLayerSize,4 * hiddenLayerSize));
    INDArray pmcellWGG=prevMemCellState.dup('f').muliRowVector(wGGTranspose);
    l1BLAS.axpy(pmcellWGG.length(),1.0,pmcellWGG,inputModGateActivations);
    Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",inputModGateActivations));
    if (forBackprop)     toReturn.ga[time]=inputModGateActivations;
    INDArray currentMemoryCellState=forgetGateActivations.dup('f').muli(prevMemCellState);
    INDArray inputModMulInput=inputModGateActivations.dup('f').muli(inputActivations);
    l1BLAS.axpy(currentMemoryCellState.length(),1.0,inputModMulInput,currentMemoryCellState);
    INDArray outputGateActivations=ifogActivations.get(NDArrayIndex.all(),NDArrayIndex.interval(2 * hiddenLayerSize,3 * hiddenLayerSize));
    INDArray pmcellWOO=currentMemoryCellState.dup('f').muliRowVector(wOOTranspose);
    l1BLAS.axpy(pmcellWOO.length(),1.0,pmcellWOO,outputGateActivations);
    Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",outputGateActivations));
    if (forBackprop)     toReturn.oa[time]=outputGateActivations;
    INDArray currMemoryCellActivation=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf.getLayer().getActivationFunction(),currentMemoryCellState.dup('f')));
    INDArray currHiddenUnitActivations=currMemoryCellActivation.dup('f').muli(outputGateActivations);
    if (forBackprop) {
      toReturn.fwdPassOutputAsArrays[time]=currHiddenUnitActivations;
      toReturn.memCellState[time]=currentMemoryCellState;
      toReturn.memCellActivations[time]=currMemoryCellActivation;
    }
 else {
      outputActivations.tensorAlongDimension(time,1,0).assign(currHiddenUnitActivations);
    }
    prevOutputActivations=currHiddenUnitActivations;
    prevMemCellState=currentMemoryCellState;
    toReturn.lastAct=currHiddenUnitActivations;
    toReturn.lastMemCell=currentMemoryCellState;
  }
  return toReturn;
}
