{
  NDArray n=null;
  if (o instanceof DoubleMatrix && !(o instanceof NDArray)) {
    DoubleMatrix d=(DoubleMatrix)o;
    if (shape().length > 2)     return false;
 else     n=NDArray.wrap(d);
  }
 else   if (!o.getClass().isAssignableFrom(NDArray.class))   return false;
  if (n == null)   n=(NDArray)o;
  if (isScalar() && n.isScalar())   return Math.abs(get(0) - n.get(0)) < 1e-6;
 else   if (isVector() && n.isVector()) {
    for (int i=0; i < length; i++) {
      double curr=get(i);
      double comp=n.get(i);
      if (Math.abs(curr - comp) > 1e-6)       return false;
    }
    if (!Shape.shapeEquals(shape(),n.shape()))     return false;
    return true;
  }
  if (!Shape.shapeEquals(shape(),n.shape()))   return false;
  if (isMatrix()) {
    for (int i=0; i < rows(); i++) {
      for (int j=0; j < columns(); j++) {
        double val1=get(i,j);
        double val2=n.get(i,j);
        if (val1 != val2)         return false;
      }
    }
    return true;
  }
  for (int i=0; i < slices(); i++) {
    if (!(slice(i).equals(n.slice(i))))     return false;
  }
  return true;
}
