{
  int[] shape=ArrayUtil.copy(shape());
  int[] stride=ArrayUtil.reverseCopy(this.stride);
  if (shape.length == 0)   throw new IllegalArgumentException("Can't slice a 0-d NDArray");
 else   if (shape.length == 1)   return new NDArray(data,new int[]{},new int[]{},offset + dimension * stride[0]);
 else   if (shape.length == 2) {
    int st=stride[0];
    if (st == 1) {
      return new NDArray(data,ArrayUtil.of(shape[1]),ArrayUtil.of(1),offset + dimension * stride[0]);
    }
 else {
      return new NDArray(data,ArrayUtil.of(shape[1]),ArrayUtil.of(stride[1]),offset + dimension * stride[0]);
    }
  }
 else {
    return new NDArray(data,shape,stride,offset + dimension * stride[0]);
  }
}
