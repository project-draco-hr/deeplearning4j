{
  RandomGenerator gen=new MersenneTwister(123);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().lossFunction(LossFunctions.LossFunction.MCXENT).optimizationAlgo(NeuralNetwork.OptimizationAlgorithm.GRADIENT_DESCENT).activationFunction(Activations.softMaxRows()).iterations(100).weightInit(WeightInit.ZERO).rng(gen).regularization(true).l2(2e-4).momentum(0.9).learningRate(1e-3).nIn(4).nOut(3).build();
  OutputLayer l=new OutputLayer.Builder().configure(conf).build();
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  DataSet next=iter.next();
  SplitTestAndTrain trainTest=next.splitTestAndTrain(110);
  trainTest.getTrain().normalizeZeroMeanZeroUnitVariance();
  l.fit(trainTest.getTrain());
  DataSet test=trainTest.getTest();
  test.normalizeZeroMeanZeroUnitVariance();
  Evaluation eval=new Evaluation();
  INDArray output=l.output(test.getFeatureMatrix());
  eval.eval(test.getLabels(),output);
  log.info("Score " + eval.stats());
}
