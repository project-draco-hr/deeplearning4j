{
  RandomGenerator gen=new MersenneTwister(123);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().hiddenUnit(RBM.HiddenUnit.RECTIFIED).visibleUnit(RBM.VisibleUnit.GAUSSIAN).lossFunction(LossFunctions.LossFunction.MCXENT).activationFunction(Activations.softMaxRows()).iterations(10).rng(gen).learningRate(1e-1f).nIn(4).nOut(3).build();
  OutputLayer l=new OutputLayer.Builder().configure(conf).build();
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  DataSet next=iter.next(150);
  next.normalizeZeroMeanZeroUnitVariance();
  l.fit(next);
  int[] predictions=l.predict(next.getFeatureMatrix());
  Evaluation eval=new Evaluation();
  INDArray output=l.output(next.getFeatureMatrix());
  eval.eval(next.getLabels(),output);
  log.info("Score " + eval.stats());
}
