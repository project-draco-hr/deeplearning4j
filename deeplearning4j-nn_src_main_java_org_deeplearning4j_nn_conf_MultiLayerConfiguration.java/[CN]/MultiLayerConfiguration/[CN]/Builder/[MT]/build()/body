{
  if (inputType == null) {
    Layer firstLayer=confs.get(0).getLayer();
    if (firstLayer instanceof BaseRecurrentLayer) {
      BaseRecurrentLayer brl=(BaseRecurrentLayer)firstLayer;
      int nIn=brl.getNIn();
      if (nIn > 0) {
        inputType=InputType.recurrent(nIn);
      }
    }
 else     if (firstLayer instanceof FeedForwardLayer) {
      FeedForwardLayer ffl=(FeedForwardLayer)firstLayer;
      int nIn=ffl.getNIn();
      if (nIn > 0) {
        inputType=InputType.feedForward(nIn);
      }
    }
  }
  if (inputType != null) {
    InputType currentInputType=inputType;
    for (    NeuralNetConfiguration c : confs) {
      Layer l=c.getLayer();
    }
  }
  MultiLayerConfiguration conf=new MultiLayerConfiguration();
  conf.confs=this.confs;
  conf.pretrain=pretrain;
  conf.backprop=backprop;
  conf.inputPreProcessors=inputPreProcessors;
  conf.backpropType=backpropType;
  conf.tbpttFwdLength=tbpttFwdLength;
  conf.tbpttBackLength=tbpttBackLength;
  conf.redistributeParams=redistributeParams;
  Nd4j.getRandom().setSeed(conf.getConf(0).getSeed());
  return conf;
}
