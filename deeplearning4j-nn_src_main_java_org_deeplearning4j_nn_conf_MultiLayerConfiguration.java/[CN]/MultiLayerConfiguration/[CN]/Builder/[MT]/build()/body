{
  if (cnnInputSize != null) {
    new ConvolutionLayerSetup(this,cnnInputSize[0],cnnInputSize[1],cnnInputSize[2]);
  }
 else   if (inputType == null && inputPreProcessors.get(0) == null) {
    Layer firstLayer=confs.get(0).getLayer();
    if (firstLayer instanceof BaseRecurrentLayer) {
      BaseRecurrentLayer brl=(BaseRecurrentLayer)firstLayer;
      int nIn=brl.getNIn();
      if (nIn > 0) {
        inputType=InputType.recurrent(nIn);
      }
    }
 else     if (firstLayer instanceof DenseLayer || firstLayer instanceof EmbeddingLayer || firstLayer instanceof OutputLayer) {
      FeedForwardLayer ffl=(FeedForwardLayer)firstLayer;
      int nIn=ffl.getNIn();
      if (nIn > 0) {
        inputType=InputType.feedForward(nIn);
      }
    }
  }
  if (inputType != null) {
    InputType currentInputType=inputType;
    for (int i=0; i < confs.size(); i++) {
      Layer l=confs.get(i).getLayer();
      if (inputPreProcessors.get(i) == null) {
        InputPreProcessor inputPreProcessor=l.getPreProcessorForInputType(currentInputType);
        if (inputPreProcessor != null) {
          inputPreProcessors.put(i,inputPreProcessor);
        }
      }
      InputPreProcessor inputPreProcessor=inputPreProcessors.get(i);
      if (inputPreProcessor != null) {
        currentInputType=inputPreProcessor.getOutputType(currentInputType);
      }
      l.setNIn(currentInputType,false);
      currentInputType=l.getOutputType(currentInputType);
    }
  }
  MultiLayerConfiguration conf=new MultiLayerConfiguration();
  conf.confs=this.confs;
  conf.pretrain=pretrain;
  conf.backprop=backprop;
  conf.inputPreProcessors=inputPreProcessors;
  conf.backpropType=backpropType;
  conf.tbpttFwdLength=tbpttFwdLength;
  conf.tbpttBackLength=tbpttBackLength;
  conf.redistributeParams=redistributeParams;
  Nd4j.getRandom().setSeed(conf.getConf(0).getSeed());
  return conf;
}
