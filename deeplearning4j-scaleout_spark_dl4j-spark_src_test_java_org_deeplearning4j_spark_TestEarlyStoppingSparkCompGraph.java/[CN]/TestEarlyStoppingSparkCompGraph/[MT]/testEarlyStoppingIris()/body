{
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(1).updater(Updater.SGD).weightInit(WeightInit.XAVIER).graphBuilder().addInputs("in").addLayer("0",new OutputLayer.Builder().nIn(4).nOut(3).lossFunction(LossFunctions.LossFunction.MCXENT).build(),"in").setOutputs("0").pretrain(false).backprop(true).build();
  ComputationGraph net=new ComputationGraph(conf);
  net.setListeners(new ScoreIterationListener(1));
  JavaRDD<DataSet> irisData=getIris();
  EarlyStoppingModelSaver<ComputationGraph> saver=new InMemoryModelSaver<>();
  EarlyStoppingConfiguration<ComputationGraph> esConf=new EarlyStoppingConfiguration.Builder<ComputationGraph>().epochTerminationConditions(new MaxEpochsTerminationCondition(5)).iterationTerminationConditions(new MaxTimeIterationTerminationCondition(1,TimeUnit.MINUTES)).scoreCalculator(new SparkLossCalculatorComputationGraph(irisData.map(new DataSetToMultiDataSetFn()),true,sc.sc())).modelSaver(saver).build();
  TrainingMaster tm=new ParameterAveragingTrainingMaster(true,numExecutors(),1,10,1,0);
  IEarlyStoppingTrainer<ComputationGraph> trainer=new SparkEarlyStoppingGraphTrainer(getContext().sc(),tm,esConf,net,irisData.map(new DataSetToMultiDataSetFn()));
  EarlyStoppingResult<ComputationGraph> result=trainer.fit();
  System.out.println(result);
  assertEquals(5,result.getTotalEpochs());
  assertEquals(EarlyStoppingResult.TerminationReason.EpochTerminationCondition,result.getTerminationReason());
  Map<Integer,Double> scoreVsIter=result.getScoreVsEpoch();
  assertEquals(5,scoreVsIter.size());
  String expDetails=esConf.getEpochTerminationConditions().get(0).toString();
  assertEquals(expDetails,result.getTerminationDetails());
  ComputationGraph out=result.getBestModel();
  assertNotNull(out);
  ComputationGraph bestNetwork=result.getBestModel();
  double score=bestNetwork.score(new IrisDataSetIterator(150,150).next());
  double bestModelScore=result.getBestModelScore();
  assertEquals(bestModelScore,score,1e-3);
}
