{
  Nd4j.getRandom().setSeed(12345);
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(1).updater(Updater.SGD).learningRate(2.0).weightInit(WeightInit.XAVIER).graphBuilder().addInputs("in").addLayer("0",new OutputLayer.Builder().nIn(4).nOut(3).activation("identity").lossFunction(LossFunctions.LossFunction.MSE).build(),"in").setOutputs("0").pretrain(false).backprop(true).build();
  ComputationGraph net=new ComputationGraph(conf);
  net.setListeners(new ScoreIterationListener(1));
  JavaRDD<DataSet> irisData=getIris();
  EarlyStoppingModelSaver<ComputationGraph> saver=new InMemoryModelSaver<>();
  EarlyStoppingConfiguration<ComputationGraph> esConf=new EarlyStoppingConfiguration.Builder<ComputationGraph>().epochTerminationConditions(new MaxEpochsTerminationCondition(5000)).iterationTerminationConditions(new MaxTimeIterationTerminationCondition(1,TimeUnit.MINUTES),new MaxScoreIterationTerminationCondition(7.5)).scoreCalculator(new SparkLossCalculatorComputationGraph(irisData.map(new DataSetToMultiDataSetFn()),true,sc.sc())).modelSaver(saver).build();
  TrainingMaster tm=new ParameterAveragingTrainingMaster(true,numExecutors(),1,10,1,0);
  IEarlyStoppingTrainer<ComputationGraph> trainer=new SparkEarlyStoppingGraphTrainer(getContext().sc(),tm,esConf,net,irisData.map(new DataSetToMultiDataSetFn()));
  EarlyStoppingResult result=trainer.fit();
  assertTrue(result.getTotalEpochs() < 5);
  assertEquals(EarlyStoppingResult.TerminationReason.IterationTerminationCondition,result.getTerminationReason());
  String expDetails=new MaxScoreIterationTerminationCondition(7.5).toString();
  assertEquals(expDetails,result.getTerminationDetails());
}
