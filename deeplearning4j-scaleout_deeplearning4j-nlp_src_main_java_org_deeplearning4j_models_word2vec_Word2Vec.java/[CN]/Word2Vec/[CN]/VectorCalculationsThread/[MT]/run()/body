{
  while (digitizer.hasMoreLines() || sentences.size() > 0) {
    try {
      List<VocabWord> sentence=sentences.poll(2L,TimeUnit.SECONDS);
      double alpha=0.025;
      if (sentence == null || sentence.isEmpty()) {
        continue;
      }
      for (int i=0; i < Word2Vec.this.numIterations; i++) {
        alpha=Math.max(Word2Vec.this.minLearningRate,Word2Vec.this.alpha.get() * (1 - (1.0 * this.wordsCounter.get() / (double)this.totalWordsCount)));
        Word2Vec.this.trainSentence(sentence,nextRandom,alpha);
        this.wordsCounter.addAndGet(sentence.size());
      }
      totalLines.incrementAndGet();
      if (totalLines.get() % 100000 == 0)       log.info("Epoch: " + this.epochNumber + "; Words vectorized so far: "+ this.wordsCounter.get()+ ";  Lines vectorized so far: "+ this.totalLines.get()+ "; learningRate: "+ alpha);
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw new RuntimeException(e);
    }
  }
}
