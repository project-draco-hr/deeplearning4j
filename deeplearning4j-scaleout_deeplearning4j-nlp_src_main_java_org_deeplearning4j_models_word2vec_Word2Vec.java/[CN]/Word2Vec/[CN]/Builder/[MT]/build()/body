{
  if (iter == null) {
    Word2Vec ret=new Word2Vec();
    ret.layerSize=layerSize;
    ret.window=window;
    ret.alpha.set(lr);
    ret.vectorizer=textVectorizer;
    ret.stopWords=stopWords;
    ret.setCache(vocabCache);
    ret.numIterations=iterations;
    ret.minWordFrequency=minWordFrequency;
    ret.seed=seed;
    ret.saveVocab=saveVocab;
    ret.batchSize=batchSize;
    ret.useAdaGrad=useAdaGrad;
    ret.minLearningRate=minLearningRate;
    ret.sample=sampling;
    ret.workers=workers;
    ret.invertedIndex=index;
    ret.lookupTable=lookupTable;
    try {
      if (tokenizerFactory == null)       tokenizerFactory=new UimaTokenizerFactory();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
    if (vocabCache == null) {
      vocabCache=new InMemoryLookupCache();
      ret.cache=vocabCache;
    }
    if (lookupTable == null) {
      lookupTable=new InMemoryLookupTable.Builder().negative(negative).useAdaGrad(useAdaGrad).lr(lr).vectorLength(layerSize).build();
    }
    ret.docIter=docIter;
    ret.tokenizerFactory=tokenizerFactory;
    return ret;
  }
 else {
    Word2Vec ret=new Word2Vec();
    ret.alpha.set(lr);
    ret.layerSize=layerSize;
    ret.sentenceIter=iter;
    ret.window=window;
    ret.useAdaGrad=useAdaGrad;
    ret.minLearningRate=minLearningRate;
    ret.vectorizer=textVectorizer;
    ret.stopWords=stopWords;
    ret.minWordFrequency=minWordFrequency;
    ret.setCache(vocabCache);
    ret.docIter=docIter;
    ret.minWordFrequency=minWordFrequency;
    ret.numIterations=iterations;
    ret.seed=seed;
    ret.numIterations=iterations;
    ret.saveVocab=saveVocab;
    ret.batchSize=batchSize;
    ret.sample=sampling;
    ret.workers=workers;
    ret.invertedIndex=index;
    ret.lookupTable=lookupTable;
    try {
      if (tokenizerFactory == null)       tokenizerFactory=new UimaTokenizerFactory();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
    if (vocabCache == null) {
      vocabCache=new InMemoryLookupCache();
      ret.cache=vocabCache;
    }
    if (lookupTable == null) {
      lookupTable=new InMemoryLookupTable.Builder().negative(negative).useAdaGrad(useAdaGrad).lr(lr).vectorLength(layerSize).build();
    }
    ret.tokenizerFactory=tokenizerFactory;
    return ret;
  }
}
