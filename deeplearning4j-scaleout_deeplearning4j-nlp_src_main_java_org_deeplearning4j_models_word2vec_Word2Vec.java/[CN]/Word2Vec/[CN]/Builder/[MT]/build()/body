{
  Word2Vec ret=new Word2Vec();
  ret.alpha.set(lr);
  ret.sentenceIter=iter;
  ret.window=window;
  ret.useAdaGrad=useAdaGrad;
  ret.minLearningRate=minLearningRate;
  ret.vectorizer=textVectorizer;
  ret.stopWords=stopWords;
  ret.minWordFrequency=minWordFrequency;
  ret.setVocab(vocabCache);
  ret.minWordFrequency=minWordFrequency;
  ret.numIterations=iterations;
  ret.seed=seed;
  ret.numIterations=iterations;
  ret.saveVocab=saveVocab;
  ret.batchSize=batchSize;
  ret.sample=sampling;
  ret.workers=workers;
  ret.invertedIndex=index;
  ret.lookupTable=lookupTable;
  ret.epochs=this.numEpochs;
  ret.resetModel=this.resetModel;
  try {
    if (tokenizerFactory == null)     tokenizerFactory=new UimaTokenizerFactory();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  if (vocabCache == null) {
    vocabCache=new InMemoryLookupCache();
    ret.setVocab(vocabCache);
  }
  if (lookupTable == null) {
    lookupTable=new InMemoryLookupTable.Builder().negative(negative).useAdaGrad(useAdaGrad).lr(lr).cache(vocabCache).vectorLength(layerSize).build();
  }
  ret.lookupTable=lookupTable;
  ret.tokenizerFactory=tokenizerFactory;
  if (this.vocabCache != null)   ret.vocabularyHolder=new VocabularyHolder.Builder().externalCache(vocabCache).hugeModelExpected(hugeModelExpected).minWordFrequency(minWordFrequency).scavengerActivationThreshold(this.configuration.getScavengerActivationThreshold()).scavengerRetentionDelay(this.configuration.getScavengerRetentionDelay()).build();
 else   ret.vocabularyHolder=new VocabularyHolder.Builder().hugeModelExpected(hugeModelExpected).minWordFrequency(minWordFrequency).scavengerActivationThreshold(this.configuration.getScavengerActivationThreshold()).scavengerRetentionDelay(this.configuration.getScavengerRetentionDelay()).build();
  this.configuration.setLearningRate(lr);
  this.configuration.setLayersSize(layerSize);
  this.configuration.setHugeModelExpected(hugeModelExpected);
  this.configuration.setWindow(window);
  this.configuration.setMinWordFrequency(minWordFrequency);
  this.configuration.setIterations(iterations);
  this.configuration.setSeed(seed);
  this.configuration.setBatchSize(batchSize);
  this.configuration.setLearningRateDecayWords(learningRateDecayWords);
  this.configuration.setMinLearningRate(minLearningRate);
  this.configuration.setSampling(this.sampling);
  this.configuration.setUseAdaGrad(useAdaGrad);
  this.configuration.setNegative(negative);
  this.configuration.setEpochs(this.numEpochs);
  ret.configuration=this.configuration;
  return ret;
}
