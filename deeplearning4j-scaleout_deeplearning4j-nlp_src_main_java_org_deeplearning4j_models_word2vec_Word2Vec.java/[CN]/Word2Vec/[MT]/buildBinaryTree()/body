{
  log.info("Constructing priority queue");
  PriorityQueue<VocabWord> heap=new PriorityQueue<>(cache.vocabWords());
  int i=0;
  int heapCount=0;
  log.info("Beginning tree construction");
  while (heap.size() > 1) {
    VocabWord min1=heap.poll();
    VocabWord min2=heap.poll();
    if (heapCount % 1000 == 0) {
      log.info("Heap progress o far " + heapCount);
    }
    VocabWord add=new VocabWord(min1.getWordFrequency() + min2.getWordFrequency(),VocabWord.PARENT_NODE);
    int index=(cache.numWords() + i);
    add.setIndex(index);
    add.setLeft(min1);
    add.setRight(min2);
    min1.setCode(0);
    min2.setCode(1);
    min1.setParent(add);
    min2.setParent(add);
    heap.add(add);
    i++;
    heapCount++;
  }
  Triple<VocabWord,int[],int[]> triple=new Triple<>(heap.poll(),new int[]{},new int[]{});
  Stack<Triple<VocabWord,int[],int[]>> stack=new Stack<>();
  log.info("Beginning stack operation");
  stack.add(triple);
  int stackCount=0;
  while (!stack.isEmpty()) {
    if (stackCount % 1000 == 0) {
      log.info("Stack count so far " + stackCount);
    }
    triple=stack.pop();
    int[] codes=triple.getSecond();
    int[] points=triple.getThird();
    VocabWord node=triple.getFirst();
    if (node == null) {
      continue;
    }
    if (node.getIndex() < cache.numWords()) {
      node.setCodes(codes);
      node.setPoints(points);
    }
 else {
      int[] copy=plus(points,node.getIndex() - cache.numWords());
      points=copy;
      triple.setThird(points);
      stack.add(new Triple<>(node.getLeft(),plus(codes,0),points));
      stack.add(new Triple<>(node.getRight(),plus(codes,1),points));
    }
    stackCount++;
  }
  log.info("Built tree");
}
