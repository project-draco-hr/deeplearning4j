{
  INDArray vec=Transforms.unitVec(this.getWordVectorMatrix(word));
  if (cache instanceof InMemoryLookupCache) {
    InMemoryLookupCache l=(InMemoryLookupCache)cache;
    INDArray syn0=l.getSyn0();
    INDArray weights=syn0.norm2(0).rdivi(1).muli(vec);
    INDArray distances=syn0.mulRowVector(weights).sum(1);
    INDArray[] sorted=Nd4j.sortWithIndices(distances,0,false);
    INDArray sort=sorted[0];
    List<String> ret=new ArrayList<>();
    if (n > sort.length())     n=sort.length();
    for (int i=0; i < n; i++)     ret.add(cache.wordAtIndex(sort.getInt(i)));
    return ret;
  }
  if (vec == null)   return new ArrayList<>();
  Counter<String> distances=new Counter<>();
  for (  String s : cache.words()) {
    if (s.equals(word))     continue;
    INDArray otherVec=getWordVectorMatrix(s);
    double sim=Transforms.cosineSim(vec,otherVec);
    distances.incrementCount(s,sim);
  }
  distances.keepTopNKeys(n);
  return distances.keySet();
}
