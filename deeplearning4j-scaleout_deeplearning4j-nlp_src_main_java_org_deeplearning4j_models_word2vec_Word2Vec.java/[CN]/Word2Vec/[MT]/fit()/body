{
  final AtomicLong totalLines=new AtomicLong(0);
  final LinkedBlockingQueue<List<VocabWord>> sentences=new LinkedBlockingQueue<>();
  sentenceIter.reset();
  log.info("Building vocabulary...");
  while (sentenceIter.hasNext()) {
    Tokenizer tokenizer=tokenizerFactory.create(sentenceIter.nextSentence());
    int wordsAdded=this.fillVocabulary(tokenizer.getTokens());
    if (wordsAdded > 0)     totalLines.incrementAndGet();
    if (totalLines.get() % 100000 == 0)     log.info("" + totalLines.get() + " lines parsed. Vocab size: "+ vocabularyHolder.numWords());
  }
  log.info("" + totalLines.get() + " lines parsed. Vocab size: "+ vocabularyHolder.numWords());
  vocabularyHolder.truncateVocabulary(minWordFrequency);
  final long totalWordsCount=vocabularyHolder.totalWordsBeyondLimit() * numIterations;
  log.info("Total truncated vocab size: " + vocabularyHolder.numWords());
  vocabularyHolder.transferBackToVocabCache(vocab);
  log.info("Building matrices & resetting weights...");
  lookupTable.resetWeights();
  int iteration=1;
  final long maxLines=totalLines.get();
  while (iteration <= numIterations) {
    log.info("Starting async iterator...");
    totalLines.set(0);
    final AtomicLong wordsCounter=new AtomicLong(0);
    AsyncIteratorDigitizer roller=new AsyncIteratorDigitizer(sentenceIter,sentences,totalLines);
    roller.start();
    log.info("Starting vectorization process...");
    final VectorCalculationsThread[] threads=new VectorCalculationsThread[workers];
    for (int x=0; x < workers; x++) {
      threads[x]=new VectorCalculationsThread(x,maxLines,iteration,wordsCounter,totalWordsCount,totalLines,sentences);
      threads[x].start();
    }
    try {
      roller.join();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    for (int x=0; x < workers; x++) {
      try {
        threads[x].join();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    log.info("Iteration: " + iteration + "; Lines vectorized so far: "+ totalLines.get());
    iteration++;
  }
  log.info("Vectorization accomplished.");
}
