{
  Nd4j.MAX_ELEMENTS_PER_SLICE=Integer.MAX_VALUE;
  Nd4j.MAX_SLICES_TO_PRINT=Integer.MAX_VALUE;
  Nd4j.dtype=DataBuffer.Type.DOUBLE;
  INDArray data=Nd4j.create(new double[][]{{1,1,1,0,0,0},{1,0,1,0,0,0},{1,1,1,0,0,0},{0,0,1,1,1,0},{0,0,1,1,0,0},{0,0,1,1,1,0}});
  INDArray data2=Nd4j.create(new double[][]{{1,0},{1,0},{1,0},{0,1},{0,1},{0,1}});
  DataSet dataset=new DataSet(data,data2);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).seed(123).iterations(200).learningRate(1e-2).layer(new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder().nIn(6).nOut(2).weightInit(WeightInit.ZERO).updater(Updater.SGD).activation("softmax").lossFunction(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).build()).build();
  int numParams=LayerFactories.getFactory(conf).initializer().numParams(conf,true);
  INDArray params=Nd4j.create(1,numParams);
  OutputLayer o=LayerFactories.getFactory(conf).create(conf,null,0,params);
  o.setBackpropGradientsViewArray(Nd4j.create(1,params.length()));
  o.setListeners(new ScoreIterationListener(1));
  o.fit(dataset);
}
