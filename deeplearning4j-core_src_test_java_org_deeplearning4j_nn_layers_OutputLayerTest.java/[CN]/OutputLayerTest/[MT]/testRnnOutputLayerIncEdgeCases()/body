{
  int[] tsLength={5,1,5,1};
  int[] miniBatch={7,7,1,1};
  int nIn=3;
  int nOut=6;
  int layerSize=4;
  FeedForwardToRnnPreProcessor proc=new FeedForwardToRnnPreProcessor();
  for (int t=0; t < tsLength.length; t++) {
    Nd4j.getRandom().setSeed(12345);
    int timeSeriesLength=tsLength[t];
    int miniBatchSize=miniBatch[t];
    Random r=new Random(12345L);
    INDArray input=Nd4j.zeros(miniBatchSize,nIn,timeSeriesLength);
    for (int i=0; i < miniBatchSize; i++) {
      for (int j=0; j < nIn; j++) {
        for (int k=0; k < timeSeriesLength; k++) {
          input.putScalar(new int[]{i,j,k},r.nextDouble() - 0.5);
        }
      }
    }
    INDArray labels3d=Nd4j.zeros(miniBatchSize,nOut,timeSeriesLength);
    for (int i=0; i < miniBatchSize; i++) {
      for (int j=0; j < timeSeriesLength; j++) {
        int idx=r.nextInt(nOut);
        labels3d.putScalar(new int[]{i,idx,j},1.0f);
      }
    }
    INDArray labels2d=proc.backprop(labels3d,miniBatchSize);
    MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345L).list(2).layer(0,new GravesLSTM.Builder().nIn(nIn).nOut(layerSize).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).activation("tanh").updater(Updater.NONE).build()).layer(1,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunction.MCXENT).activation("softmax").nIn(layerSize).nOut(nOut).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).updater(Updater.NONE).build()).inputPreProcessor(1,new RnnToFeedForwardPreProcessor()).pretrain(false).backprop(true).build();
    MultiLayerNetwork mln=new MultiLayerNetwork(conf);
    mln.init();
    INDArray out2d=mln.feedForward(input).get(2);
    INDArray out3d=proc.preProcess(out2d,miniBatchSize);
    MultiLayerConfiguration confRnn=new NeuralNetConfiguration.Builder().seed(12345L).list(2).layer(0,new GravesLSTM.Builder().nIn(nIn).nOut(layerSize).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).activation("tanh").updater(Updater.NONE).build()).layer(1,new org.deeplearning4j.nn.conf.layers.RnnOutputLayer.Builder(LossFunction.MCXENT).activation("softmax").nIn(layerSize).nOut(nOut).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).updater(Updater.NONE).build()).pretrain(false).backprop(true).build();
    MultiLayerNetwork mlnRnn=new MultiLayerNetwork(confRnn);
    mlnRnn.init();
    INDArray outRnn=mlnRnn.feedForward(input).get(2);
    mln.setLabels(labels2d);
    mlnRnn.setLabels(labels3d);
    mln.computeGradientAndScore();
    mlnRnn.computeGradientAndScore();
    double score=mln.score() * timeSeriesLength;
    double scoreRNN=mlnRnn.score();
    assertTrue(!Double.isNaN(score));
    assertTrue(!Double.isNaN(scoreRNN));
    double relError=Math.abs(score - scoreRNN) / (Math.abs(score) + Math.abs(scoreRNN));
    System.out.println(relError);
    assertTrue(relError < 1e-6);
    OutputLayer ol=(OutputLayer)mln.getOutputLayer();
    assertArrayEquals(ol.getInput().shape(),new int[]{miniBatchSize * timeSeriesLength,layerSize});
    assertArrayEquals(ol.getLabels().shape(),new int[]{miniBatchSize * timeSeriesLength,nOut});
    RnnOutputLayer rnnol=(RnnOutputLayer)mlnRnn.getOutputLayer();
    assertArrayEquals(rnnol.getLabels().shape(),new int[]{miniBatchSize,nOut,timeSeriesLength});
    assertArrayEquals(out2d.shape(),new int[]{miniBatchSize * timeSeriesLength,nOut});
    INDArray out=mln.output(input);
    assertArrayEquals(out.shape(),new int[]{miniBatchSize * timeSeriesLength,nOut});
    INDArray act=mln.activate();
    assertArrayEquals(act.shape(),new int[]{miniBatchSize * timeSeriesLength,nOut});
    INDArray preout=mln.preOutput(input);
    assertArrayEquals(preout.shape(),new int[]{miniBatchSize * timeSeriesLength,nOut});
    INDArray outFFRnn=mlnRnn.feedForward(input).get(2);
    assertArrayEquals(outFFRnn.shape(),new int[]{miniBatchSize,nOut,timeSeriesLength});
    INDArray outRnn2=mlnRnn.output(input);
    assertArrayEquals(outRnn2.shape(),new int[]{miniBatchSize,nOut,timeSeriesLength});
    INDArray actRnn=mlnRnn.activate();
    assertArrayEquals(actRnn.shape(),new int[]{miniBatchSize,nOut,timeSeriesLength});
    INDArray preoutRnn=mlnRnn.preOutput(input);
    assertArrayEquals(preoutRnn.shape(),new int[]{miniBatchSize,nOut,timeSeriesLength});
  }
}
