{
  org.nd4j.linalg.dataset.api.iterator.DataSetIterator iter=new IrisDataSetIterator(150,150);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().iterations(3).miniBatch(false).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).layer(new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(4).nOut(3).activation("softmax").weightInit(WeightInit.XAVIER).build()).build();
  int numParams=conf.getLayer().initializer().numParams(conf,true);
  INDArray params=Nd4j.create(1,numParams);
  org.deeplearning4j.nn.layers.OutputLayer layer=(org.deeplearning4j.nn.layers.OutputLayer)conf.getLayer().instantiate(conf,null,0,params,true);
  layer.setBackpropGradientsViewArray(Nd4j.create(1,params.length()));
  DataSet next=iter.next();
  next.normalizeZeroMeanZeroUnitVariance();
  layer.setListeners(new ScoreIterationListener(1));
  layer.fit(next);
}
