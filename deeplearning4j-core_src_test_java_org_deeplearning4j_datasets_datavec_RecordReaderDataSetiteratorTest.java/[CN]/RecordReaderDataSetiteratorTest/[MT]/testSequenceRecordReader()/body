{
  for (int i=0; i < 3; i++) {
    new ClassPathResource(String.format("csvsequence_%d.txt",i)).getTempFileFromArchive();
    new ClassPathResource(String.format("csvsequencelabels_%d.txt",i)).getTempFileFromArchive();
  }
  ClassPathResource resource=new ClassPathResource("csvsequence_0.txt");
  String featuresPath=resource.getTempFileFromArchive().getAbsolutePath().replaceAll("0","%d");
  resource=new ClassPathResource("csvsequencelabels_0.txt");
  String labelsPath=resource.getTempFileFromArchive().getAbsolutePath().replaceAll("0","%d");
  SequenceRecordReader featureReader=new CSVSequenceRecordReader(1,",");
  SequenceRecordReader labelReader=new CSVSequenceRecordReader(1,",");
  featureReader.initialize(new NumberedFileInputSplit(featuresPath,0,2));
  labelReader.initialize(new NumberedFileInputSplit(labelsPath,0,2));
  SequenceRecordReaderDataSetIterator iter=new SequenceRecordReaderDataSetIterator(featureReader,labelReader,1,4,false);
  assertEquals(3,iter.inputColumns());
  assertEquals(4,iter.totalOutcomes());
  List<DataSet> dsList=new ArrayList<>();
  while (iter.hasNext()) {
    dsList.add(iter.next());
  }
  assertEquals(3,dsList.size());
  for (int i=0; i < 3; i++) {
    DataSet ds=dsList.get(i);
    INDArray features=ds.getFeatureMatrix();
    INDArray labels=ds.getLabels();
    assertEquals(1,features.size(0));
    assertEquals(1,labels.size(0));
    assertEquals(3,features.size(1));
    assertEquals(4,labels.size(1));
    assertEquals(4,features.size(2));
    assertEquals(4,labels.size(2));
  }
  INDArray expF0=Nd4j.create(1,3,4);
  expF0.tensorAlongDimension(0,1).assign(Nd4j.create(new double[]{0,1,2}));
  expF0.tensorAlongDimension(1,1).assign(Nd4j.create(new double[]{10,11,12}));
  expF0.tensorAlongDimension(2,1).assign(Nd4j.create(new double[]{20,21,22}));
  expF0.tensorAlongDimension(3,1).assign(Nd4j.create(new double[]{30,31,32}));
  assertEquals(dsList.get(0).getFeatureMatrix(),expF0);
  INDArray expF1=Nd4j.create(1,3,4);
  expF1.tensorAlongDimension(0,1).assign(Nd4j.create(new double[]{100,101,102}));
  expF1.tensorAlongDimension(1,1).assign(Nd4j.create(new double[]{110,111,112}));
  expF1.tensorAlongDimension(2,1).assign(Nd4j.create(new double[]{120,121,122}));
  expF1.tensorAlongDimension(3,1).assign(Nd4j.create(new double[]{130,131,132}));
  assertEquals(dsList.get(1).getFeatureMatrix(),expF1);
  INDArray expF2=Nd4j.create(1,3,4);
  expF2.tensorAlongDimension(0,1).assign(Nd4j.create(new double[]{200,201,202}));
  expF2.tensorAlongDimension(1,1).assign(Nd4j.create(new double[]{210,211,212}));
  expF2.tensorAlongDimension(2,1).assign(Nd4j.create(new double[]{220,221,222}));
  expF2.tensorAlongDimension(3,1).assign(Nd4j.create(new double[]{230,231,232}));
  assertEquals(dsList.get(2).getFeatureMatrix(),expF2);
  INDArray expL0=Nd4j.create(1,4,4);
  expL0.tensorAlongDimension(0,1).assign(Nd4j.create(new double[]{1,0,0,0}));
  expL0.tensorAlongDimension(1,1).assign(Nd4j.create(new double[]{0,1,0,0}));
  expL0.tensorAlongDimension(2,1).assign(Nd4j.create(new double[]{0,0,1,0}));
  expL0.tensorAlongDimension(3,1).assign(Nd4j.create(new double[]{0,0,0,1}));
  assertEquals(dsList.get(0).getLabels(),expL0);
  INDArray expL1=Nd4j.create(1,4,4);
  expL1.tensorAlongDimension(0,1).assign(Nd4j.create(new double[]{0,0,0,1}));
  expL1.tensorAlongDimension(1,1).assign(Nd4j.create(new double[]{0,0,1,0}));
  expL1.tensorAlongDimension(2,1).assign(Nd4j.create(new double[]{0,1,0,0}));
  expL1.tensorAlongDimension(3,1).assign(Nd4j.create(new double[]{1,0,0,0}));
  assertEquals(dsList.get(1).getLabels(),expL1);
  INDArray expL2=Nd4j.create(1,4,4);
  expL2.tensorAlongDimension(0,1).assign(Nd4j.create(new double[]{0,1,0,0}));
  expL2.tensorAlongDimension(1,1).assign(Nd4j.create(new double[]{1,0,0,0}));
  expL2.tensorAlongDimension(2,1).assign(Nd4j.create(new double[]{0,0,0,1}));
  expL2.tensorAlongDimension(3,1).assign(Nd4j.create(new double[]{0,0,1,0}));
  assertEquals(dsList.get(2).getLabels(),expL2);
}
