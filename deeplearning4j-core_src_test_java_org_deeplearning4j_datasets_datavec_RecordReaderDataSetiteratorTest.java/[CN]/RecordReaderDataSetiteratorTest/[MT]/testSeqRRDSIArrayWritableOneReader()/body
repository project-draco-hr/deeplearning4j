{
  Collection<Collection<Writable>> sequence1=new ArrayList<>();
  sequence1.add(Arrays.asList((Writable)new NDArrayWritable(Nd4j.create(new double[]{1,2,3})),new IntWritable(0)));
  sequence1.add(Arrays.asList((Writable)new NDArrayWritable(Nd4j.create(new double[]{4,5,6})),new IntWritable(1)));
  Collection<Collection<Writable>> sequence2=new ArrayList<>();
  sequence2.add(Arrays.asList((Writable)new NDArrayWritable(Nd4j.create(new double[]{7,8,9})),new IntWritable(2)));
  sequence2.add(Arrays.asList((Writable)new NDArrayWritable(Nd4j.create(new double[]{10,11,12})),new IntWritable(3)));
  SequenceRecordReader rr=new CollectionSequenceRecordReader(Arrays.asList(sequence1,sequence2));
  SequenceRecordReaderDataSetIterator iter=new SequenceRecordReaderDataSetIterator(rr,2,4,1,false);
  DataSet ds=iter.next();
  INDArray expFeatures=Nd4j.create(2,3,2);
  expFeatures.tensorAlongDimension(0,1,2).assign(Nd4j.create(new double[][]{{1,4},{2,5},{3,6}}));
  expFeatures.tensorAlongDimension(1,1,2).assign(Nd4j.create(new double[][]{{7,10},{8,11},{9,12}}));
  INDArray expLabels=Nd4j.create(2,4,2);
  expLabels.tensorAlongDimension(0,1,2).assign(Nd4j.create(new double[][]{{1,0},{0,1},{0,0},{0,0}}));
  expLabels.tensorAlongDimension(1,1,2).assign(Nd4j.create(new double[][]{{0,0},{0,0},{1,0},{0,1}}));
  assertEquals(expFeatures,ds.getFeatureMatrix());
  assertEquals(expLabels,ds.getLabels());
}
