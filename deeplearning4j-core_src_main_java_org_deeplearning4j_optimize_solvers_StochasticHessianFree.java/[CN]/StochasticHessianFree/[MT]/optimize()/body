{
  if (!(model instanceof BaseMultiLayerNetwork))   return true;
  myName=Thread.currentThread().getName();
  if (converged)   return true;
  score=-network.score();
  xi=network.params();
  for (int i=0; i < conf.getNumIterations(); i++) {
    Pair<INDArray,INDArray> backPropGradient=network.getBackPropGradient2();
    gradient=backPropGradient.getFirst().neg();
    INDArray preCon=backPropGradient.getSecond();
    if (ch == null)     setup();
    ch.muli(pi);
    Triple<INDArray,List<INDArray>,INDArray> cg=runConjugateGradient(preCon,conf.getNumIterations());
    INDArray p=cg.getFirst();
    Pair<INDArray,Double> cgBackTrack=cgBackTrack(cg.getSecond(),p);
    p=cgBackTrack.getFirst();
    double rho=network.reductionRatio(cgBackTrack.getFirst(),-network.score(),cgBackTrack.getSecond(),gradient);
    double newScore=-network.score(cgBackTrack.getFirst());
    step=lineSearch(newScore,gradient,p);
    network.dampingUpdate(rho,boost,decrease);
    INDArray proposedUpdate=xi.add(p.mul(f * step));
    network.setParameters(proposedUpdate);
    log.info("Score at iteration " + i + " was "+ newScore);
  }
  return true;
}
