{
  DataSetIterator iter=new MnistDataSetIterator(1,80);
  DBN dbn=new DBN.Builder().withHiddenUnitsByLayer(Collections.singletonMap(3,RBM.HiddenUnit.GAUSSIAN)).learningRateForLayer(Collections.singletonMap(3,1e-3)).withLossFunction(NeuralNetwork.LossFunction.RMSE_XENT).hiddenLayerSizes(new int[]{1000,500,250,28}).withOptimizationAlgorithm(NeuralNetwork.OptimizationAlgorithm.CONJUGATE_GRADIENT).numberOfInputs(784).numberOfOutPuts(2).build();
  while (iter.hasNext()) {
    DataSet data=iter.next();
    dbn.pretrain(data.getFirst(),new Object[]{1,1e-1,1000});
  }
  iter.reset();
  DeepAutoEncoder encoder=new DeepAutoEncoder(dbn);
  while (iter.hasNext()) {
    DataSet next=iter.next();
    log.info("Fine tune " + next.labelDistribution());
    encoder.finetune(next.getFirst(),1e-2,1000);
    FilterRenderer f=new FilterRenderer();
    f.renderFilters(encoder.getDecoder().getOutputLayer().getW(),"outputlayer.png",28,28,next.numExamples());
  }
  iter.reset();
  while (iter.hasNext()) {
    DataSet data=iter.next();
    data.filterAndStrip(new int[]{0,1});
    DeepAutoEncoderDataSetReconstructionRender r=new DeepAutoEncoderDataSetReconstructionRender(data.iterator(data.numExamples()),encoder);
    r.draw();
  }
}
