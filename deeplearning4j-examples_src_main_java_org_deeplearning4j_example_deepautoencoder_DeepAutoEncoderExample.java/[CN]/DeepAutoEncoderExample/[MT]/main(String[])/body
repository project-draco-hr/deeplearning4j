{
  DataSetIterator iter=new MnistDataSetIterator(10,30,false);
  int codeLayer=3;
  Map<Integer,Double> layerLearningRates=new HashMap<>();
  layerLearningRates.put(codeLayer,1e-2);
  RandomGenerator rng=new MersenneTwister(123);
  DBN dbn=new DBN.Builder().learningRateForLayer(layerLearningRates).hiddenLayerSizes(new int[]{1000,500,250,30}).withRng(rng).useRBMPropUpAsActivation(true).activateForLayer(Collections.singletonMap(3,Activations.linear())).withHiddenUnitsByLayer(Collections.singletonMap(codeLayer,RBM.HiddenUnit.GAUSSIAN)).numberOfInputs(784).sampleFromHiddenActivations(true).sampleOrActivateByLayer(Collections.singletonMap(3,false)).lineSearchBackProp(false).useRegularization(true).withL2(2e-4).withOutputActivationFunction(Activations.sigmoid()).numberOfOutPuts(784).withMomentum(0.5).withOutputLossFunction(OutputLayer.LossFunction.RMSE_XENT).build();
  log.info("Training with layers of " + RBMUtil.architecture(dbn));
  log.info("Begin training ");
  for (int i=0; i < 10; i++) {
    while (iter.hasNext()) {
      DataSet next=iter.next();
      dbn.pretrain(next.getFirst(),new Object[]{1,1e-1,100});
    }
    iter.reset();
  }
  DeepAutoEncoder encoder=new DeepAutoEncoder.Builder().withEncoder(dbn).build();
  encoder.setRoundCodeLayerInput(false);
  encoder.setSampleFromHiddenActivations(false);
  encoder.setLineSearchBackProp(false);
  encoder.setOutputLayerLossFunction(OutputLayer.LossFunction.SQUARED_LOSS);
  iter.reset();
  for (int i=0; i < 10; i++) {
    double error=0;
    while (iter.hasNext()) {
      DataSet data=iter.next();
      log.info("Fine tune " + data.labelDistribution());
      encoder.finetune(data.getFirst(),1e-2,1000);
      error+=encoder.score();
    }
    log.info("Error " + error);
    iter.reset();
  }
  while (iter.hasNext()) {
    DataSet data=iter.next();
    DeepAutoEncoderDataSetReconstructionRender r=new DeepAutoEncoderDataSetReconstructionRender(data.iterator(data.numExamples()),encoder,28,28);
    r.setPicDraw(MatrixTransformations.multiplyScalar(255));
    r.draw();
  }
}
