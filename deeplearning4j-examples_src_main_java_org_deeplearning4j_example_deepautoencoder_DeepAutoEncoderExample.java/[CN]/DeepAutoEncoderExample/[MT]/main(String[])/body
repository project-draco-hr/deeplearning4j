{
  DataSetIterator iter=new MnistDataSetIterator(80,80);
  Map<Integer,Boolean> activationForLayer=new HashMap<>();
  activationForLayer.put(3,true);
  DBN dbn=new DBN.Builder().withHiddenUnitsByLayer(Collections.singletonMap(3,RBM.HiddenUnit.GAUSSIAN)).withLossFunction(NeuralNetwork.LossFunction.RECONSTRUCTION_CROSSENTROPY).hiddenLayerSizes(new int[]{1000,500,250,28}).withMomentum(0.9).withOptimizationAlgorithm(NeuralNetwork.OptimizationAlgorithm.CONJUGATE_GRADIENT).numberOfInputs(784).numberOfOutPuts(2).build();
  while (iter.hasNext()) {
    DataSet data=iter.next();
    data.filterAndStrip(new int[]{0,1});
    dbn.pretrain(data.getFirst(),new Object[]{1,1e-1,100});
  }
  iter.reset();
  DeepAutoEncoder encoder=new DeepAutoEncoder(dbn);
  encoder.setVisibleUnit(RBM.VisibleUnit.GAUSSIAN);
  encoder.setHiddenUnit(RBM.HiddenUnit.RECTIFIED);
  while (iter.hasNext()) {
    DataSet next=iter.next();
    next.filterAndStrip(new int[]{0,1});
    log.info("Fine tune " + next.labelDistribution());
    encoder.finetune(next.getFirst(),1e-2,1000);
    FilterRenderer f=new FilterRenderer();
    f.renderFilters(encoder.getDecoder().getOutputLayer().getW(),"outputlayer.png",28,28,next.numExamples());
  }
  iter.reset();
  while (iter.hasNext()) {
    DataSet data=iter.next();
    data.filterAndStrip(new int[]{0,1});
    DeepAutoEncoderDataSetReconstructionRender r=new DeepAutoEncoderDataSetReconstructionRender(data.iterator(data.numExamples()),encoder);
    r.draw();
  }
}
