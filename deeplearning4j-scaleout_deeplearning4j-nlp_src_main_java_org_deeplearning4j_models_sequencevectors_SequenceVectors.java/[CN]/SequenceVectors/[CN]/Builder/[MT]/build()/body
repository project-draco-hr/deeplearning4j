{
  presetTables();
  SequenceVectors<T> vectors=new SequenceVectors<>();
  vectors.numEpochs=this.numEpochs;
  vectors.numIterations=this.iterations;
  vectors.vocab=this.vocabCache;
  vectors.minWordFrequency=this.minWordFrequency;
  vectors.learningRate.set(this.learningRate);
  vectors.minLearningRate=this.minLearningRate;
  vectors.sampling=this.sampling;
  vectors.negative=this.negative;
  vectors.layerSize=this.layerSize;
  vectors.batchSize=this.batchSize;
  vectors.learningRateDecayWords=this.learningRateDecayWords;
  vectors.window=this.window;
  vectors.resetModel=this.resetModel;
  vectors.useAdeGrad=this.useAdaGrad;
  vectors.stopWords=this.stopWords;
  vectors.workers=this.workers;
  vectors.iterator=this.iterator;
  vectors.lookupTable=this.lookupTable;
  vectors.elementsLearningAlgorithm=this.elementsLearningAlgorithm;
  vectors.sequenceLearningAlgorithm=this.sequenceLearningAlgorithm;
  this.configuration.setLearningRate(this.learningRate);
  this.configuration.setLayersSize(layerSize);
  this.configuration.setHugeModelExpected(hugeModelExpected);
  this.configuration.setWindow(window);
  this.configuration.setMinWordFrequency(minWordFrequency);
  this.configuration.setIterations(iterations);
  this.configuration.setSeed(seed);
  this.configuration.setBatchSize(batchSize);
  this.configuration.setLearningRateDecayWords(learningRateDecayWords);
  this.configuration.setMinLearningRate(minLearningRate);
  this.configuration.setSampling(this.sampling);
  this.configuration.setUseAdaGrad(useAdaGrad);
  this.configuration.setNegative(negative);
  this.configuration.setEpochs(this.numEpochs);
  vectors.configuration=this.configuration;
  return vectors;
}
