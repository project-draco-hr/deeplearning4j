{
  this.props=new Properties();
  try {
    FileInputStream fis=new FileInputStream(this.app_properties_file);
    props.load(fis);
    fis.close();
  }
 catch (  Exception ex) {
    log.error("Error loading properties ",ex);
  }
  JobConf job=new JobConf(defaultConf);
  Path splitPath=new Path(props.getProperty("app.input.path"));
  log.info("app.input.path = " + splitPath);
  InputSplit[] splits=generateDebugSplits(splitPath,job);
  log.info("split count: " + splits.length);
  try {
    Class<?> master_clazz=Class.forName(props.getProperty("yarn.master.main"));
    Constructor<?> master_ctor=master_clazz.getConstructor();
    this.master=(ComputableMaster)master_ctor.newInstance();
    log.info("Using master class: " + props.getProperty("yarn.master.main"));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  this.master.setup(this.generateDebugConfigurationObject());
  this.workers=new ArrayList<>();
  log.info("Using worker class: " + props.getProperty("yarn.worker.main"));
  for (int x=0; x < splits.length; x++) {
    log.info("IRUnit > Split > " + splits[x].toString());
    ComputableWorker worker=null;
    Class<?> worker_clazz;
    try {
      worker_clazz=Class.forName(props.getProperty("yarn.worker.main"));
      Constructor<?> worker_ctor=worker_clazz.getConstructor();
      worker=(ComputableWorker)worker_ctor.newInstance();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    worker.setup(this.generateDebugConfigurationObject());
    TextRecordParser txt_reader=new TextRecordParser();
    long len=Integer.parseInt(splits[x].toString().split(":")[2].split("\\+")[1]);
    txt_reader.setFile(splits[x].toString().split(":")[1],0,len);
    worker.setRecordParser(txt_reader);
    workers.add(worker);
    log.info("> Setup Worker " + x);
  }
}
