{
  this.props=new Properties();
  try {
    FileInputStream fis=new FileInputStream(this.appPropertiesFile);
    props.load(fis);
    fis.close();
  }
 catch (  Exception ex) {
    log.error("Error loading properties ",ex);
  }
  for (  Object s : props.keySet())   defaultConf.set(s.toString(),props.getProperty(s.toString()));
  JobConf job=new JobConf(defaultConf);
  RecordReader recordReader;
  try {
    recordReader=(RecordReader)Class.forName(defaultConf.get(APP_RECORD_READER)).newInstance();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  Path splitPath=new Path(props.getProperty(APP_INPUT_PATH));
  log.info(APP_INPUT_PATH + " = " + splitPath);
  InputSplit[] splits=generateDebugSplits(splitPath,job);
  log.info("split count: " + splits.length);
  try {
    Class<?> master_clazz=Class.forName(props.getProperty(MASTER_MAIN));
    Constructor<?> master_ctor=master_clazz.getConstructor();
    this.master=(ComputableMaster)master_ctor.newInstance();
    log.info("Using master class: " + props.getProperty(MASTER_MAIN));
  }
 catch (  Exception e) {
    log.error("Error loading master",e);
  }
  this.master.setup(getConfiguration());
  this.workers=new ArrayList<>();
  log.info("Using worker class: " + props.getProperty(APP_MAIN));
  for (int x=0; x < splits.length; x++) {
    log.info("IRUnit > Split > " + splits[x].toString());
    ComputableWorker worker=null;
    Class<?> worker_clazz;
    try {
      worker_clazz=Class.forName(props.getProperty(APP_MAIN));
      Constructor<?> workerConstructor=worker_clazz.getConstructor();
      worker=(ComputableWorker)workerConstructor.newInstance();
    }
 catch (    Exception e) {
      log.error("Error loading worker",e);
    }
    worker.setup(getConfiguration());
    CanovaRecordReader reader=new CanovaRecordReader(recordReader);
    try {
      reader.initialize(splits[x]);
    }
 catch (    IOException|InterruptedException e) {
      e.printStackTrace();
    }
    worker.setRecordReader(reader);
    workers.add(worker);
    log.info("> setup Worker " + x);
  }
}
