{
  double corruptionLevel=(double)params[0];
  double lr=(double)params[1];
  int iteration=(int)params[2];
  if (wAdaGrad != null)   this.wAdaGrad.setMasterStepSize(lr);
  if (hBiasAdaGrad != null)   this.hBiasAdaGrad.setMasterStepSize(lr);
  if (vBiasAdaGrad != null)   vBiasAdaGrad.setMasterStepSize(lr);
  DoubleMatrix corruptedX=getCorruptedInput(input,corruptionLevel);
  DoubleMatrix y=getHiddenValues(corruptedX);
  DoubleMatrix z=getReconstructedInput(y);
  DoubleMatrix visibleLoss=input.sub(z);
  DoubleMatrix hiddenLoss=sparsity == 0 ? visibleLoss.mmul(W).mul(y).mul(oneMinus(y)) : visibleLoss.mmul(W).mul(y).mul(y.add(-sparsity));
  DoubleMatrix wGradient=corruptedX.transpose().mmul(hiddenLoss).add(visibleLoss.transpose().mmul(y));
  DoubleMatrix hBiasGradient=hiddenLoss.columnMeans();
  DoubleMatrix vBiasGradient=visibleLoss.columnMeans();
  NeuralNetworkGradient gradient=new NeuralNetworkGradient(wGradient,vBiasGradient,hBiasGradient);
  updateGradientAccordingToParams(gradient,iteration,lr);
  return gradient;
}
