{
  double corruptionLevel=(double)params[0];
  double lr=(double)params[1];
  if (wAdaGrad != null)   this.wAdaGrad.setMasterStepSize(lr);
  if (hBiasAdaGrad != null)   this.hBiasAdaGrad.setMasterStepSize(lr);
  if (vBiasAdaGrad != null)   vBiasAdaGrad.setMasterStepSize(lr);
  DoubleMatrix corruptedX=getCorruptedInput(input,corruptionLevel);
  DoubleMatrix y=getHiddenValues(corruptedX);
  DoubleMatrix z=getReconstructedInput(y);
  DoubleMatrix L_h2=input.sub(z);
  DoubleMatrix L_h1=sparsity == 0 ? L_h2.mmul(W).mul(y).mul(oneMinus(y)) : L_h2.mmul(W).mul(y).mul(y.add(-sparsity));
  DoubleMatrix L_vbias=L_h2;
  DoubleMatrix L_hbias=L_h1;
  DoubleMatrix wGradient=corruptedX.transpose().mmul(L_h1).add(L_h2.transpose().mmul(y));
  DoubleMatrix hBiasGradient=L_hbias.columnMeans();
  DoubleMatrix vBiasGradient=L_vbias.columnMeans();
  NeuralNetworkGradient gradient=new NeuralNetworkGradient(wGradient,vBiasGradient,hBiasGradient);
  updateGradientAccordingToParams(gradient,lr);
  return gradient;
}
