{
  double corruptionLevel=(double)params[0];
  double lr=(double)params[1];
  int iteration=(int)params[2];
  if (wAdaGrad != null)   this.wAdaGrad.setMasterStepSize(lr);
  if (hBiasAdaGrad != null)   this.hBiasAdaGrad.setMasterStepSize(lr);
  if (vBiasAdaGrad != null)   vBiasAdaGrad.setMasterStepSize(lr);
  INDArray corruptedX=getCorruptedInput(input,corruptionLevel);
  INDArray y=getHiddenValues(corruptedX);
  INDArray z=getReconstructedInput(y);
  INDArray visibleLoss=input.sub(z);
  INDArray hiddenLoss=sparsity == 0 ? visibleLoss.mmul(W).mul(y).mul(y.rsub(1)) : visibleLoss.mmul(W).mul(y).mul(y.add(-sparsity));
  INDArray wGradient=corruptedX.transpose().mmul(hiddenLoss).add(visibleLoss.transpose().mmul(y));
  INDArray hBiasGradient=hiddenLoss.mean(1);
  INDArray vBiasGradient=visibleLoss.mean(1);
  NeuralNetworkGradient gradient=new NeuralNetworkGradient(wGradient,vBiasGradient,hBiasGradient);
  updateGradientAccordingToParams(gradient,iteration,lr);
  return gradient;
}
