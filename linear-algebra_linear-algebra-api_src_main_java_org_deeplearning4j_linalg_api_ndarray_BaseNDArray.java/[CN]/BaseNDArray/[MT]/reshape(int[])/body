{
  long ec=1;
  for (int i=0; i < shape.length; i++) {
    int si=shape[i];
    if ((ec * si) != (((int)ec) * si))     throw new IllegalArgumentException("Too many elements");
    ec*=shape[i];
  }
  int n=(int)ec;
  if (ec != n)   throw new IllegalArgumentException("Too many elements");
  if (Shape.shapeEquals(shape(),shape))   return this;
  if (ArrayUtil.prod(shape) == ArrayUtil.prod(shape) && ordering == NDArrayFactory.FORTRAN) {
    return NDArrays.create(data,shape,offset);
  }
  INDArray create=NDArrays.create(shape,NDArrays.getStrides(shape,ordering));
  INDArray flattened=ravel();
  int dimension=shape().length == 2 ? 1 : shape.length - 1;
  int count=0;
  for (int i=0; i < create.vectorsAlongDimension(dimension); i++) {
    INDArray vec=create.vectorAlongDimension(i,dimension);
    for (int j=0; j < vec.length(); j++) {
      vec.putScalar(j,flattened.get(count++));
    }
  }
  return create;
}
