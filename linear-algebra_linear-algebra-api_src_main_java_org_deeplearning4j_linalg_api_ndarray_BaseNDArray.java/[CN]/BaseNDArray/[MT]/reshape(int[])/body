{
  long ec=1;
  for (int i=0; i < shape.length; i++) {
    int si=shape[i];
    if ((ec * si) != (((int)ec) * si))     throw new IllegalArgumentException("Too many elements");
    ec*=shape[i];
  }
  int n=(int)ec;
  if (ec != n)   throw new IllegalArgumentException("Too many elements");
  if (Shape.shapeEquals(shape(),shape))   return this;
  if (isRowVector()) {
    if (Shape.isColumnVectorShape(shape)) {
      return NDArrays.create(data,shape,new int[]{stride[0],1},offset,ordering);
    }
  }
  if (isColumnVector()) {
    if (Shape.isRowVectorShape(shape)) {
      return NDArrays.create(data,shape,new int[]{stride[0]},offset,ordering);
    }
  }
  int[] newStrides=newStridesReshape(shape);
  if (newStrides != null) {
    INDArray ndArray=NDArrays.create(data,shape,newStrides,offset,ordering);
    return ndArray;
  }
 else {
    INDArray create=NDArrays.create(shape,NDArrays.getStrides(shape,ordering));
    final INDArray flattened=ravel();
    int vectorSize=create.size(create.shape().length - 1);
    final AtomicInteger vectorCounter=new AtomicInteger(0);
    if (ordering == NDArrayFactory.C) {
      create.iterateOverAllRows(new SliceOp(){
        @Override public void operate(        DimensionSlice nd){
          INDArray nd1=(INDArray)nd.getResult();
          for (int i=0; i < nd1.length(); i++) {
            int element=vectorCounter.getAndIncrement();
            nd1.put(i,flattened.getScalar(element));
          }
        }
        @Override public void operate(        INDArray nd){
          for (int i=0; i < nd.length(); i++) {
            int element=vectorCounter.getAndIncrement();
            nd.put(i,flattened.getScalar(element));
          }
        }
      }
);
    }
 else     if (ordering == NDArrayFactory.FORTRAN) {
      create.iterateOverAllColumns(new SliceOp(){
        @Override public void operate(        DimensionSlice nd){
          INDArray nd1=(INDArray)nd.getResult();
          for (int i=0; i < nd1.length(); i++) {
            int element=vectorCounter.getAndIncrement();
            nd1.put(i,flattened.getScalar(element));
          }
        }
        @Override public void operate(        INDArray nd){
          for (int i=0; i < nd.length(); i++) {
            int element=vectorCounter.getAndIncrement();
            nd.put(i,flattened.getScalar(element));
          }
        }
      }
);
    }
    return create;
  }
}
