{
  INDArray n=null;
  if (!o.getClass().isAssignableFrom(INDArray.class))   return false;
  if (n == null)   n=(INDArray)o;
  if (isScalar() && n.isScalar()) {
    double val=(double)element();
    double val2=(double)n.element();
    return Math.abs(val - val2) < 1e-6;
  }
 else   if (isVector() && n.isVector()) {
    for (int i=0; i < length; i++) {
      double curr=(double)getScalar(i).element();
      double comp=(double)n.getScalar(i).element();
      if (Math.abs(curr - comp) > 1e-6)       return false;
    }
    if (!Shape.shapeEquals(shape(),n.shape()))     return false;
    return true;
  }
  if (!Shape.shapeEquals(shape(),n.shape()))   return false;
  if (slices() != n.slices())   return false;
  for (int i=0; i < slices(); i++) {
    INDArray slice=slice(i);
    INDArray nSlice=n.slice(i);
    if (!slice.equals(nSlice))     return false;
  }
  return true;
}
