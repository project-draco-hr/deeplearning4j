{
  if (isVector()) {
    return normmax(Integer.MAX_VALUE);
  }
 else {
    int[] shape=ArrayUtil.removeIndex(shape(),dimension);
    final INDArray arr=NDArrays.create(new int[]{ArrayUtil.prod(shape)});
    final AtomicInteger i=new AtomicInteger(0);
    iterateOverDimension(dimension,new SliceOp(){
      @Override public void operate(      DimensionSlice nd){
        INDArray arr2=(INDArray)nd.getResult();
        arr.put(i.get(),arr2.normmax(0));
        i.incrementAndGet();
      }
      /** 
 * Operates on an ndarray slice
 * @param nd the result to operate on
 */
      @Override public void operate(      INDArray nd){
        INDArray arr2=nd;
        arr.put(i.get(),arr2.normmax(0));
        i.incrementAndGet();
      }
    }
,false);
    return arr.reshape(shape);
  }
}
