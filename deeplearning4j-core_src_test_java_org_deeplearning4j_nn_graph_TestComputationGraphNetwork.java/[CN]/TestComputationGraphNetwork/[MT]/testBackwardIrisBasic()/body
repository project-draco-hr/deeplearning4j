{
  ComputationGraphConfiguration configuration=getIrisGraphConfiguration();
  ComputationGraph graph=new ComputationGraph(configuration);
  graph.init();
  MultiLayerConfiguration mlc=getIrisMLNConfiguration();
  MultiLayerNetwork net=new MultiLayerNetwork(mlc);
  net.init();
  DataSetIterator iris=new IrisDataSetIterator(150,150);
  DataSet ds=iris.next();
  Nd4j.getRandom().setSeed(12345);
  int nParams=(4 * 5 + 5) + (5 * 3 + 3);
  INDArray params=Nd4j.rand(1,nParams);
  graph.setParams(params.dup());
  net.setParams(params.dup());
  INDArray input=ds.getFeatureMatrix();
  INDArray labels=ds.getLabels();
  graph.setInput(0,input.dup());
  graph.setLabel(0,labels.dup());
  net.setInput(input.dup());
  net.setLabels(labels.dup());
  net.computeGradientAndScore();
  Pair<Gradient,Double> netGradScore=net.gradientAndScore();
  graph.computeGradientAndScore();
  Pair<Gradient,Double> graphGradScore=graph.gradientAndScore();
  assertEquals(netGradScore.getSecond(),graphGradScore.getSecond(),1e-2);
  Gradient netGrad=netGradScore.getFirst();
  Gradient graphGrad=graphGradScore.getFirst();
  assertNotNull(graphGrad);
  assertEquals(netGrad.gradientForVariable().size(),graphGrad.gradientForVariable().size());
}
