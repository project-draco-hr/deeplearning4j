{
  ComputationGraphConfiguration conf1=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in").setInputTypes(InputType.feedForward(5)).addLayer("rnn",new GravesLSTM.Builder().nOut(5).build(),"in").addLayer("out",new RnnOutputLayer.Builder().nOut(5).build(),"rnn").setOutputs("out").build();
  assertEquals(5,((FeedForwardLayer)((LayerVertex)conf1.getVertices().get("rnn")).getLayerConf().getLayer()).getNIn());
  assertEquals(5,((FeedForwardLayer)((LayerVertex)conf1.getVertices().get("out")).getLayerConf().getLayer()).getNIn());
  LayerVertex lv1=(LayerVertex)conf1.getVertices().get("rnn");
  assertTrue(lv1.getPreProcessor() instanceof FeedForwardToRnnPreProcessor);
  LayerVertex lv2=(LayerVertex)conf1.getVertices().get("out");
  assertNull(lv2.getPreProcessor());
  ComputationGraphConfiguration conf2=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in").setInputTypes(InputType.recurrent(5)).addLayer("ff",new DenseLayer.Builder().nOut(5).build(),"in").addLayer("out",new RnnOutputLayer.Builder().nOut(5).build(),"ff").setOutputs("out").build();
  assertEquals(5,((FeedForwardLayer)((LayerVertex)conf2.getVertices().get("ff")).getLayerConf().getLayer()).getNIn());
  assertEquals(5,((FeedForwardLayer)((LayerVertex)conf2.getVertices().get("out")).getLayerConf().getLayer()).getNIn());
  lv1=(LayerVertex)conf2.getVertices().get("ff");
  assertTrue(lv1.getPreProcessor() instanceof RnnToFeedForwardPreProcessor);
  lv2=(LayerVertex)conf2.getVertices().get("out");
  assertTrue(lv2.getPreProcessor() instanceof FeedForwardToRnnPreProcessor);
  ComputationGraphConfiguration conf3=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in").setInputTypes(InputType.convolutional(1,28,28)).addLayer("cnn",new ConvolutionLayer.Builder().kernelSize(2,2).padding(0,0).stride(2,2).nOut(3).build(),"in").addLayer("pool",new SubsamplingLayer.Builder().kernelSize(2,2).padding(0,0).stride(2,2).build(),"cnn").addLayer("dense",new DenseLayer.Builder().nOut(10).build(),"pool").addLayer("out",new OutputLayer.Builder().nIn(10).nOut(5).build(),"dense").setOutputs("out").build();
  lv1=(LayerVertex)conf3.getVertices().get("cnn");
  assertNotNull(lv1.getPreProcessor());
  FeedForwardToCnnPreProcessor ffcnn=(FeedForwardToCnnPreProcessor)lv1.getPreProcessor();
  assertEquals(1,ffcnn.getNumChannels());
  assertEquals(28,ffcnn.getInputHeight());
  assertEquals(28,ffcnn.getInputWidth());
  lv2=(LayerVertex)conf3.getVertices().get("pool");
  assertNull(lv2.getPreProcessor());
  LayerVertex lv3=(LayerVertex)conf3.getVertices().get("dense");
  assertTrue(lv3.getPreProcessor() instanceof CnnToFeedForwardPreProcessor);
  CnnToFeedForwardPreProcessor proc=(CnnToFeedForwardPreProcessor)lv3.getPreProcessor();
  assertEquals(3,proc.getNumChannels());
  assertEquals(7,proc.getInputHeight());
  assertEquals(7,proc.getInputWidth());
  LayerVertex lv4=(LayerVertex)conf3.getVertices().get("out");
  assertNull(lv4.getPreProcessor());
  assertEquals(7 * 7 * 3,((FeedForwardLayer)lv3.getLayerConf().getLayer()).getNIn());
  ComputationGraphConfiguration conf4=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("inCNN","inRNN").setInputTypes(InputType.convolutional(1,28,28),InputType.recurrent(5)).addLayer("cnn",new ConvolutionLayer.Builder().kernelSize(2,2).padding(0,0).stride(2,2).nOut(3).build(),"inCNN").addLayer("pool",new SubsamplingLayer.Builder().kernelSize(2,2).padding(0,0).stride(2,2).build(),"cnn").addLayer("dense",new DenseLayer.Builder().nOut(10).build(),"pool").addLayer("dense2",new DenseLayer.Builder().nOut(10).build(),"inRNN").addVertex("merge",new MergeVertex(),"dense","dense2").addLayer("out",new RnnOutputLayer.Builder().nOut(5).build(),"merge").setOutputs("out").build();
  lv1=(LayerVertex)conf4.getVertices().get("cnn");
  assertNotNull(lv1.getPreProcessor());
  ffcnn=(FeedForwardToCnnPreProcessor)lv1.getPreProcessor();
  assertEquals(1,ffcnn.getNumChannels());
  assertEquals(28,ffcnn.getInputHeight());
  assertEquals(28,ffcnn.getInputWidth());
  lv2=(LayerVertex)conf4.getVertices().get("pool");
  assertNull(lv2.getPreProcessor());
  lv3=(LayerVertex)conf4.getVertices().get("dense");
  assertTrue(lv3.getPreProcessor() instanceof CnnToFeedForwardPreProcessor);
  proc=(CnnToFeedForwardPreProcessor)lv3.getPreProcessor();
  assertEquals(3,proc.getNumChannels());
  assertEquals(7,proc.getInputHeight());
  assertEquals(7,proc.getInputWidth());
  lv4=(LayerVertex)conf4.getVertices().get("dense2");
  assertTrue(lv4.getPreProcessor() instanceof RnnToFeedForwardPreProcessor);
  LayerVertex lv5=(LayerVertex)conf4.getVertices().get("out");
  assertTrue(lv5.getPreProcessor() instanceof FeedForwardToRnnPreProcessor);
  assertEquals(7 * 7 * 3,((FeedForwardLayer)lv3.getLayerConf().getLayer()).getNIn());
  assertEquals(5,((FeedForwardLayer)lv4.getLayerConf().getLayer()).getNIn());
  assertEquals(10,((FeedForwardLayer)lv5.getLayerConf().getLayer()).getNIn());
  ComputationGraphConfiguration conf5=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).graphBuilder().addInputs("input").setInputTypes(InputType.convolutional(1,28,28)).addLayer("cnn_1",new ConvolutionLayer.Builder(2,2).stride(2,2).nIn(1).nOut(3).build(),"input").addLayer("cnn_2",new ConvolutionLayer.Builder(4,4).stride(2,2).padding(1,1).nIn(1).nOut(3).build(),"input").addLayer("max_1",new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).build(),"cnn_1","cnn_2").addLayer("output",new OutputLayer.Builder().nOut(10).build(),"max_1").setOutputs("output").pretrain(false).backprop(true).build();
  lv1=(LayerVertex)conf5.getVertices().get("cnn_1");
  assertTrue(lv1.getPreProcessor() instanceof FeedForwardToCnnPreProcessor);
  ffcnn=(FeedForwardToCnnPreProcessor)lv1.getPreProcessor();
  assertEquals(1,ffcnn.getNumChannels());
  assertEquals(28,ffcnn.getInputWidth());
  assertEquals(28,ffcnn.getInputHeight());
  lv2=(LayerVertex)conf5.getVertices().get("cnn_2");
  assertTrue(lv2.getPreProcessor() instanceof FeedForwardToCnnPreProcessor);
  FeedForwardToCnnPreProcessor ffcnn2=(FeedForwardToCnnPreProcessor)lv2.getPreProcessor();
  assertEquals(1,ffcnn2.getNumChannels());
  assertEquals(28,ffcnn2.getInputWidth());
  assertEquals(28,ffcnn2.getInputHeight());
  assertNull(((LayerVertex)conf5.getVertices().get("max_1")).getPreProcessor());
  lv3=(LayerVertex)conf5.getVertices().get("output");
  assertTrue(lv3.getPreProcessor() instanceof CnnToFeedForwardPreProcessor);
  CnnToFeedForwardPreProcessor cnnff=(CnnToFeedForwardPreProcessor)lv3.getPreProcessor();
  assertEquals(6,cnnff.getNumChannels());
  assertEquals(7,cnnff.getInputHeight());
  assertEquals(7,cnnff.getInputWidth());
}
