{
  ComputationGraphConfiguration configuration=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("input").addLayer("firstLayer",new DenseLayer.Builder().nIn(4).nOut(5).build(),"input").addLayer("outputLayer",new OutputLayer.Builder().nIn(5).nOut(3).build(),"firstLayer").setOutputs("outputLayer").pretrain(false).backprop(true).build();
  ComputationGraph graph=new ComputationGraph(configuration);
  graph.init();
  int[] order=graph.topologicalSortOrder();
  int[] expOrder=new int[]{0,1,2};
  assertArrayEquals(expOrder,order);
  INDArray params=graph.params();
  assertNotNull(params);
  int nParams=(4 * 5 + 5) + (5 * 3 + 3);
  assertEquals(nParams,params.length());
  INDArray arr=Nd4j.linspace(0,nParams,nParams);
  assertEquals(nParams,arr.length());
  graph.setParams(arr);
  params=graph.params();
  assertEquals(arr,params);
  assertEquals(1,graph.getNumInputArrays());
  assertEquals(1,graph.getNumOutputArrays());
}
