{
  ComputationGraphConfiguration configuration=getIrisGraphConfiguration();
  ComputationGraph graph=new ComputationGraph(configuration);
  graph.init();
  MultiLayerConfiguration mlc=getIrisMLNConfiguration();
  MultiLayerNetwork net=new MultiLayerNetwork(mlc);
  net.init();
  DataSetIterator iris=new IrisDataSetIterator(150,150);
  DataSet ds=iris.next();
  graph.setInput(0,ds.getFeatureMatrix());
  Map<String,INDArray> activations=graph.feedForward(false);
  assertEquals(3,activations.size());
  assertTrue(activations.containsKey("input"));
  assertTrue(activations.containsKey("firstLayer"));
  assertTrue(activations.containsKey("outputLayer"));
  Nd4j.getRandom().setSeed(12345);
  int nParams=getNumParams();
  INDArray params=Nd4j.rand(1,nParams);
  graph.setParams(params.dup());
  net.setParams(params.dup());
  List<INDArray> mlnAct=net.feedForward(ds.getFeatureMatrix(),false);
  activations=graph.feedForward(ds.getFeatureMatrix(),false);
  assertEquals(mlnAct.get(0),activations.get("input"));
  assertEquals(mlnAct.get(1),activations.get("firstLayer"));
  assertEquals(mlnAct.get(2),activations.get("outputLayer"));
}
