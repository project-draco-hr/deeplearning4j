{
  int[] miniBatchSizes={1,2,5};
  int nOut=1;
  Random r=new Random(12345);
  for (  int nExamples : miniBatchSizes) {
    Nd4j.getRandom().setSeed(12345);
    ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(1).updater(Updater.SGD).learningRate(0.1).seed(12345).graphBuilder().addInputs("in").addLayer("0",new GravesLSTM.Builder().activation("tanh").nIn(2).nOut(2).build(),"in").addLayer("1",new RnnOutputLayer.Builder().lossFunction(LossFunctions.LossFunction.MSE).nIn(2).nOut(1).build(),"0").setOutputs("1").build();
    ComputationGraph net=new ComputationGraph(conf);
    net.init();
    INDArray in1=Nd4j.rand(new int[]{nExamples,2,4});
    INDArray in2=Nd4j.rand(new int[]{nExamples,2,5});
    in2.put(new INDArrayIndex[]{NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(0,3,true)},in1);
    assertEquals(in1,in2.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(0,4)));
    INDArray labels1=Nd4j.rand(new int[]{nExamples,1,4});
    INDArray labels2=Nd4j.create(nExamples,1,5);
    labels2.put(new INDArrayIndex[]{NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(0,3,true)},labels1);
    assertEquals(labels1,labels2.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(0,4)));
    INDArray labelMask=Nd4j.ones(nExamples,5);
    for (int j=0; j < nExamples; j++) {
      labelMask.putScalar(new int[]{j,4},0);
    }
    net.setInput(0,in1);
    net.setLabel(0,labels1);
    net.computeGradientAndScore();
    double score1=net.score();
    Gradient g1=net.gradient();
    net.setInput(0,in2);
    net.setLabel(0,labels2);
    net.setLayerMaskArrays(null,new INDArray[]{labelMask});
    net.computeGradientAndScore();
    double score2=net.score();
    Gradient g2=net.gradient();
    assertEquals(score1,score2,0.0);
    Map<String,INDArray> g1map=g1.gradientForVariable();
    Map<String,INDArray> g2map=g2.gradientForVariable();
    for (    String s : g1map.keySet()) {
      INDArray g1s=g1map.get(s);
      INDArray g2s=g2map.get(s);
      assertEquals(s,g1s,g2s);
    }
    for (int i=0; i < nExamples; i++) {
      for (int j=0; j < nOut; j++) {
        double d=r.nextDouble();
        labels2.putScalar(new int[]{i,j,4},d);
      }
      net.setLabel(0,labels2);
      net.computeGradientAndScore();
      double score2a=net.score();
      Gradient g2a=net.gradient();
      assertEquals(score2,score2a,0.0);
      for (      String s : g2map.keySet()) {
        INDArray g2s=g2map.get(s);
        INDArray g2sa=g2a.getGradientFor(s);
        assertEquals(s,g2s,g2sa);
      }
    }
  }
}
