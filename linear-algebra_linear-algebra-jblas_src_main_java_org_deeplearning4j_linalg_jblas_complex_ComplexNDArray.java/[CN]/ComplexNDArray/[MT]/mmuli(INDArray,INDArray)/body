{
  if (other.isScalar())   return muli(other.getScalar(0),result);
  ComplexNDArray otherArray=new ComplexNDArray(other);
  ComplexNDArray resultArray=new ComplexNDArray(result);
  assertMultipliesWith(other);
  if (result == this || result == other) {
    otherArray=otherArray.ravel().reshape(otherArray.shape);
    ComplexNDArray temp=new ComplexNDArray(resultArray.shape(),ArrayUtil.calcStridesFortran(resultArray.shape()));
    NDArrayBlas.gemm(org.jblas.ComplexDouble.UNIT,this,otherArray,org.jblas.ComplexDouble.ZERO,temp);
    NDArrayBlas.copy(temp,resultArray);
  }
 else {
    otherArray=otherArray.ravel().reshape(otherArray.shape);
    ComplexNDArray thisInput=this.ravel().reshape(shape());
    NDArrayBlas.gemm(org.jblas.ComplexDouble.UNIT,thisInput,otherArray,org.jblas.ComplexDouble.ZERO,resultArray);
  }
  return resultArray;
}
