{
  ComplexNDArray n=null;
  if (o instanceof ComplexDoubleMatrix && !(o instanceof ComplexNDArray)) {
    ComplexDoubleMatrix d=(ComplexDoubleMatrix)o;
    if (shape().length > 2)     return false;
 else     n=ComplexNDArray.wrap(d);
  }
 else   if (!o.getClass().isAssignableFrom(ComplexNDArray.class))   return false;
  if (n == null)   n=(ComplexNDArray)o;
  if (isScalar() && n.isScalar()) {
    org.jblas.ComplexDouble c=n.get(0);
    return Math.abs(get(0).sub(c).real()) < 1e-6;
  }
 else   if (isVector() && n.isVector()) {
    for (int i=0; i < length; i++) {
      double curr=get(i).realComponent();
      double comp=n.get(i).realComponent();
      double currImag=get(i).imaginaryComponent();
      double compImag=n.get(i).imaginaryComponent();
      if (Math.abs(curr - comp) > 1e-6 || Math.abs(currImag - compImag) > 1e-6)       return false;
    }
    return true;
  }
  if (!Shape.shapeEquals(shape(),n.shape()))   return false;
  if (isScalar()) {
    org.jblas.ComplexDouble c=n.get(0);
    return get(0).sub(c).abs() < 1e-6;
  }
 else   if (isVector()) {
    for (int i=0; i < length; i++) {
      ComplexDouble curr=get(i);
      org.jblas.ComplexDouble comp=n.get(i);
      if (curr.sub(comp).abs() > 1e-6)       return false;
    }
    return true;
  }
  for (int i=0; i < slices(); i++) {
    if (!(slice(i).equals(n.slice(i))))     return false;
  }
  return true;
}
