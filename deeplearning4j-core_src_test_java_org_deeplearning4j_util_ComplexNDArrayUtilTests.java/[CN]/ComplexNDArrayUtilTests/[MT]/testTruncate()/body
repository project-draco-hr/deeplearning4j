{
  ComplexNDArray ret=new ComplexNDArray(new double[]{1,0,2,0,3,0,4,0},new int[]{2,2});
  ComplexNDArray truncated=ComplexNDArrayUtil.truncate(ret,1,0);
  ComplexNDArray answer=new ComplexNDArray(new double[]{1,0,2,0},new int[]{1,2});
  assertEquals(answer,truncated);
  ComplexNDArray answer0=new ComplexNDArray(new double[]{1,0,3,0},new int[]{1,2});
  ComplexNDArray truncated0=ComplexNDArrayUtil.truncate(ret,1,1);
  assertEquals(answer0,truncated0);
  ComplexNDArray arr2=new ComplexNDArray(new NDArray(DoubleMatrix.linspace(1,24,24).data,new int[]{4,3,2}));
  ComplexNDArray truncated2=ComplexNDArrayUtil.truncate(arr2,1,0);
  ComplexNDArray test=new ComplexNDArray(new NDArray(new double[]{1,2,3,4,5,6},new int[]{1,3,2}));
  assertEquals(test,truncated2);
  ComplexNDArray truncated3=ComplexNDArrayUtil.truncate(arr2,2,0);
  ComplexNDArray testMulti=new ComplexNDArray(new NDArray(new double[]{1,2,3,4,5,6,7,8,9,10,11,12},new int[]{2,3,2}));
  assertEquals(true,Shape.shapeEquals(truncated3.shape(),testMulti.shape()));
  assertEquals(truncated3,testMulti);
  ComplexNDArray thirty=new ComplexNDArray(new NDArray(DoubleMatrix.linspace(1,30,30).data,new int[]{3,5,2}));
  ComplexNDArray ten=new ComplexNDArray(new NDArray(DoubleMatrix.linspace(1,10,10).data,new int[]{5,2}));
  ComplexNDArray test10=thirty.slice(0);
  assertEquals(ten,test10);
  arr2=new ComplexNDArray(new NDArray(DoubleMatrix.linspace(1,24,24).data,new int[]{4,3,2}));
  ComplexNDArray dimension1=new ComplexNDArray(new NDArray(new double[]{1,2,3,4,7,8,9,10,13,14,15,16,19,20,21,22},new int[]{4,2,2}));
  ComplexNDArray truncatedTest=ComplexNDArrayUtil.truncate(arr2,2,1);
  assertEquals(dimension1,truncatedTest);
  ComplexNDArray vectorTest=new ComplexNDArray(new double[]{1,0,2,0},new int[]{2});
  ComplexNDArray vectorAnswer=new ComplexNDArray(new double[]{1,0},new int[]{1});
  ComplexNDArray vectorTruncated=ComplexNDArrayUtil.truncate(vectorTest,1,0);
  assertEquals(vectorAnswer,vectorTruncated);
  assertEquals(1,vectorTruncated.length);
}
