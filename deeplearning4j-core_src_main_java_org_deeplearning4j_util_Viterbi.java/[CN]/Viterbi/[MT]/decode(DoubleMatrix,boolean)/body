{
  DoubleMatrix outcomeSequence=labels.isColumnVector() || labels.isRowVector() || binaryLabelMatrix ? toOutcomesFromBinaryLabelMatrix(labels) : labels;
  int frames=outcomeSequence.length;
  DoubleMatrix V=DoubleMatrix.ones(frames,states);
  DoubleMatrix pointers=DoubleMatrix.zeros(frames,states);
  DoubleMatrix assigned=V.getRow(0);
  MatrixUtil.assign(assigned,logPCorrect - logStates);
  V.putRow(0,assigned);
  V.put(0,(int)outcomeSequence.get(0),logPCorrect - logStates);
  for (int t=1; t < frames; t++) {
    for (int k=0; k < states; k++) {
      DoubleMatrix rowLogProduct=rowOfLogTransitionMatrix(k).add(V.getRow(t - 1));
      int maxVal=SimpleBlas.iamax(rowLogProduct);
      double argMax=rowLogProduct.max();
      V.put(t,k,argMax);
      if (k == outcomeSequence.get(t))       V.put(t,k,logPCorrect + maxVal);
 else       V.put(t,k,logPIncorrect + maxVal);
    }
  }
  DoubleMatrix rectified=DoubleMatrix.zeros(frames);
  rectified.put(rectified.length - 1,V.getRow(frames - 1).max());
  for (int t=rectified.length - 2; t > 0; t--) {
    rectified.put(t,pointers.get(t + 1,(int)rectified.get(t + 1)));
  }
  return new Pair<>(V.getRow(frames - 1).max(),rectified);
}
