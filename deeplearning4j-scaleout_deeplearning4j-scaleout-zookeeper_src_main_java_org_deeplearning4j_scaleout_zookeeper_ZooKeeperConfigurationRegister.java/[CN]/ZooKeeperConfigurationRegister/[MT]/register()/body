{
  byte[] data;
  try {
    data=serialize(configuration);
  }
 catch (  IOException e1) {
    throw new RuntimeException(e1);
  }
  try {
    zk.multi(Arrays.asList(Op.create(new ZookeeperPathBuilder().setHost(host).setPort(port).build(),data,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT),Op.create(new ZookeeperPathBuilder().setHost(host).setPort(port).addPath("tmp").build(),data,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)));
    log.info("Register at " + host);
    zk.multi(Arrays.asList(Op.create(new ZookeeperPathBuilder().setHost("127.0.0.1").setPort(port).build(),data,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT),Op.create(new ZookeeperPathBuilder().setHost("127.0.0.1").setPort(port).addPath("tmp").build(),data,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)));
    log.info("Registered at 127.0.0.1");
    zk.multi(Arrays.asList(Op.create(new ZookeeperPathBuilder().setHost("localhost").setPort(port).build(),data,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT),Op.create(new ZookeeperPathBuilder().setHost("localhost").setPort(port).addPath("tmp").build(),data,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)));
    String localhost=InetAddress.getLocalHost().getHostName();
    if (!localhost.equals(host)) {
      zk.multi(Arrays.asList(Op.create(new ZookeeperPathBuilder().setHost(localhost).setPort(port).build(),data,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT),Op.create(new ZookeeperPathBuilder().setHost(localhost).setPort(port).addPath("tmp").build(),data,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)));
      log.info("Registered at " + localhost);
    }
  }
 catch (  KeeperException.NodeExistsException e) {
    log.warn("Already exists..");
  }
catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
catch (  KeeperException e) {
    log.error("Error with node creation",e);
  }
catch (  UnknownHostException e) {
    log.error("Error with node creation",e);
  }
  try {
    String path=new ZookeeperPathBuilder().setHost(host).setPort(port).addPaths(Arrays.asList("tmp",id)).build();
    Stat stat=zk.exists(path,true);
    if (stat != null) {
      log.info("Path found " + path + " ...deleting");
      zk.delete(path,-1);
    }
    zk.create(path,data,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    log.error("Interrupted registering of zookeeper data for id " + id,e);
  }
catch (  KeeperException e) {
    log.error("Error registering zookeeper data ",e);
    throw new RuntimeException(e);
  }
}
