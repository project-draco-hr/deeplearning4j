{
  Map<String,VocabWord> vocab=new HashMap<String,VocabWord>();
  Queue<String> queue=new ArrayDeque<>(sentences);
  int count=0;
  while (!queue.isEmpty()) {
    final String words=queue.poll();
    StringTokenizer tokenizer=new StringTokenizer(words);
    this.allWordsCount+=tokenizer.countTokens();
    count++;
    if (count % 10000 == 0)     log.info("Processed  sentence " + count + " current word count "+ allWordsCount);
    while (tokenizer.hasMoreTokens()) {
      String token=tokenizer.nextToken();
      VocabWord word=vocab.get(token);
      if (word != null)       word.increment();
 else {
        word=new VocabWord(1.0,layerSize);
        vocab.put(token,word);
      }
      if (word.getWordFrequency() >= minWordFrequency) {
        if (!this.vocab.containsKey(token)) {
          word.setIndex(this.vocab.size());
          this.vocab.put(token,word);
          wordIndex.add(token);
        }
      }
    }
  }
  log.info("Building binary tree");
  buildBinaryTree();
  log.info("Resetting weights");
  resetWeights();
}
