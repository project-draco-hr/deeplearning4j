{
  INDArray tensor=NDArrays.create(new int[]{inputSize[0],inputSize[1],input.rows() / inputSize[0],input.rows() / input.length()});
  INDArray curr=tensor;
  List<INDArray> activations=new ArrayList<>();
  for (int i=0; i < getnLayers(); i++) {
    ConvolutionalRBM r=(ConvolutionalRBM)getNeuralNets()[i];
    DownSamplingLayer d=(DownSamplingLayer)getNeuralNets()[i];
    for (int j=0; j < r.getNumFilters()[0]; j++) {
      int nObs=curr.slices();
      INDArray featureMap=NDArrays.zeros(new int[]{r.getFmSize()[0],r.getFmSize()[1],1,nObs});
      for (int k=0; j < r.getNumFilters()[0]; j++) {
        featureMap.addi(Convolution.convn(featureMap.slice(i),r.getW().slice(j,i),Convolution.Type.VALID));
      }
      featureMap.addi(r.gethBias().getScalar(i));
      r.getFeatureMap().putSlice(j,d.activate(featureMap));
      d.getFeatureMap().putSlice(j,Transforms.downSample(r.getFeatureMap().slice(j),r.getStride()));
    }
    activations.add(d.getFeatureMap());
  }
  activations.add(output(activations.get(activations.size() - 1)));
  return activations;
}
