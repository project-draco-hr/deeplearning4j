{
  system=ActorSystem.create(systemName);
  system.actorOf(Props.create(SimpleClusterListener.class),"clusterListener");
  mediator=DistributedPubSubExtension.get(system).mediator();
  epochs=conf.getInt(PRE_TRAIN_EPOCHS);
  if (type.equals("master")) {
    if (iter == null)     throw new IllegalStateException("Unable to initialize no dataset to train");
    masterAddress=startBackend(null,"master",conf,iter);
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    system.actorOf(Props.create(new ModelSavingActor.ModelSavingActorFactory("nn-model.bin")),",model-saver");
    Cluster.get(system).join(masterAddress);
    startBackend(masterAddress,"master",conf,iter);
    Conf c=conf.copy();
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    startWorker(masterAddress,c);
    mediator.tell(new DistributedPubSubMediator.Publish(MasterActor.RESULT,this),mediator);
    mediator.tell(new DistributedPubSubMediator.Publish(MasterActor.RESULT,epochs),mediator);
    log.info("Setup master with epochs " + epochs);
  }
 else {
    Conf c=conf.copy();
    startWorker(masterAddress,c);
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    Cluster.get(system).join(masterAddress);
    log.info("Setup worker nodes");
  }
  writeMasterAddress();
}
