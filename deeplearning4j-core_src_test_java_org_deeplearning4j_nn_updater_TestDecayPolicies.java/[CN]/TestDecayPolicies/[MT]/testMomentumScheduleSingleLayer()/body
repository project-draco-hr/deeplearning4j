{
  double lr=1e-2;
  double mu=0.6;
  Map<Integer,Double> momentumAfter=new HashMap<>();
  momentumAfter.put(1,0.2);
  int iterations=2;
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().learningRate(lr).momentum(mu).momentumAfter(momentumAfter).iterations(iterations).layer(new DenseLayer.Builder().nIn(nIn).nOut(nOut).updater(org.deeplearning4j.nn.conf.Updater.NESTEROVS).build()).build();
  int numParams=conf.getLayer().initializer().numParams(conf,true);
  INDArray params=Nd4j.create(1,numParams);
  Layer layer=conf.getLayer().instantiate(conf,null,0,params,true);
  Updater updater=UpdaterCreator.getUpdater(layer);
  int stateSize=updater.stateSizeForLayer(layer);
  updater.setStateViewArray(layer,Nd4j.create(1,stateSize),true);
  Gradient gradientExpected=new DefaultGradient();
  gradientExpected.setGradientFor(DefaultParamInitializer.WEIGHT_KEY,weightGradient.dup());
  gradientExpected.setGradientFor(DefaultParamInitializer.BIAS_KEY,biasGradient.dup());
  for (int i=0; i < 2; i++) {
    updater.update(layer,gradientSingle,i,1);
    mu=testNesterovsComputation(gradientSingle,gradientExpected,lr,mu,momentumAfter,i);
    assertEquals(mu,layer.conf().getLayer().getMomentum(),1e-4);
  }
}
