{
  double lr=1e-2;
  double mu=0.6;
  Map<Integer,Double> momentumAfter=new HashMap<>();
  momentumAfter.put(1,0.2);
  int iterations=2;
  int[] nIns={4,2};
  int[] nOuts={2,3};
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().learningRate(lr).momentum(mu).momentumAfter(momentumAfter).iterations(iterations).list().layer(0,new DenseLayer.Builder().nIn(nIns[0]).nOut(nOuts[0]).updater(org.deeplearning4j.nn.conf.Updater.NESTEROVS).build()).layer(1,new OutputLayer.Builder().nIn(nIns[1]).nOut(nOuts[1]).updater(org.deeplearning4j.nn.conf.Updater.NESTEROVS).build()).backprop(true).pretrain(false).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  Updater updater=UpdaterCreator.getUpdater(net);
  int stateSize=updater.stateSizeForLayer(net);
  updater.setStateViewArray(net,Nd4j.create(1,stateSize),true);
  String wKey, bKey;
  Gradient gradientExpected=new DefaultGradient();
  for (int k=0; k < net.getnLayers(); k++) {
    wKey=String.valueOf(k) + "_" + DefaultParamInitializer.WEIGHT_KEY;
    gradientExpected.setGradientFor(wKey,Nd4j.ones(nIns[k],nOuts[k]));
    bKey=String.valueOf(k) + "_" + DefaultParamInitializer.BIAS_KEY;
    gradientExpected.setGradientFor(bKey,Nd4j.ones(1,nOuts[k]));
  }
  Gradient gradientMLN=new DefaultGradient();
  for (int j=0; j < 2; j++) {
    wKey=String.valueOf(j) + "_" + DefaultParamInitializer.WEIGHT_KEY;
    gradientMLN.setGradientFor(wKey,Nd4j.ones(nIns[j],nOuts[j]));
    bKey=String.valueOf(j) + "_" + DefaultParamInitializer.BIAS_KEY;
    gradientMLN.setGradientFor(bKey,Nd4j.ones(1,nOuts[j]));
  }
  for (int i=0; i < 2; i++) {
    updater.update(net,gradientMLN,i,1);
    mu=testNesterovsComputation(gradientMLN,gradientExpected,lr,mu,momentumAfter,i);
    assertEquals(mu,net.getLayer(1).conf().getLayer().getMomentum(),1e-4);
  }
}
