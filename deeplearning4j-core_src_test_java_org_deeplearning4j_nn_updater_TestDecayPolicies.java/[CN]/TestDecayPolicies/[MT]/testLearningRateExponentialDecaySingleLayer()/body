{
  int iterations=2;
  double lr=1e-2;
  double decayRate=2;
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().learningRate(lr).learningRateDecayPolicy(LearningRatePolicy.Exponential).lrPolicyDecayRate(decayRate).iterations(iterations).layer(new DenseLayer.Builder().nIn(nIn).nOut(nOut).updater(org.deeplearning4j.nn.conf.Updater.SGD).build()).build();
  int numParams=LayerFactories.getFactory(conf).initializer().numParams(conf,true);
  INDArray params=Nd4j.create(1,numParams);
  Layer layer=LayerFactories.getFactory(conf).create(conf,null,0,params,true);
  Updater updater=UpdaterCreator.getUpdater(layer);
  Gradient gradientActual=new DefaultGradient();
  gradientActual.setGradientFor(DefaultParamInitializer.WEIGHT_KEY,weightGradient);
  gradientActual.setGradientFor(DefaultParamInitializer.BIAS_KEY,biasGradient);
  for (int i=0; i < iterations; i++) {
    updater.update(layer,gradientActual,i,1);
    double expectedLr=calcExponentialDecay(lr,decayRate,i);
    assertEquals(expectedLr,layer.conf().getLearningRateByParam("W"),1e-4);
    assertEquals(expectedLr,layer.conf().getLearningRateByParam("b"),1e-4);
  }
}
