{
  DoubleMatrix x=new DoubleMatrix(new double[][]{{1,1,1,0,0,0},{1,0,1,0,0,0},{1,1,1,0,0,0},{0,0,1,1,1,0},{0,0,1,1,0,0}});
  DoubleMatrix y=new DoubleMatrix(new double[][]{{1,0},{1,0},{1,0},{0,1},{0,1}});
  RandomGenerator rng=new MersenneTwister(123);
  double preTrainLr=0.1;
  int preTrainEpochs=1000;
  int k=1;
  int nIns=6, nOuts=2;
  int[] hiddenLayerSizes=new int[]{4,7,9};
  double fineTuneLr=0.1;
  int fineTuneEpochs=200;
  DBN dbn=new DBN.Builder().hiddenLayerSizes(hiddenLayerSizes).numberOfInputs(nIns).numberOfOutPuts(nOuts).withRng(rng).build();
  dbn.pretrain(x,k,preTrainLr,preTrainEpochs);
  dbn.finetune(y,fineTuneLr,fineTuneEpochs);
  DoubleMatrix testX=new DoubleMatrix(new double[][]{{1,1,0,0,0,0},{0,0,0,1,1,0},{1,1,1,1,1,0}});
  DoubleMatrix predict=dbn.predict(testX);
  log.info(predict.toString());
  dbn.backProp(fineTuneLr,1000);
  DBN decoder=new DBN.Builder().buildEmpty();
  decoder.asDecoder(dbn);
  assertEquals(dbn.nOuts,decoder.nIns);
  assertEquals(dbn.nIns,decoder.nOuts);
  assertEquals(decoder.nLayers,dbn.nLayers);
  boolean e=Arrays.equals(new int[]{9,7,4},decoder.hiddenLayerSizes);
  assertEquals(true,e);
  decoder.pretrain(predict,1,0.1,1000);
  decoder.finetune(testX,0.1,1000);
}
