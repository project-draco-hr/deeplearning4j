{
  int n=1000000;
  DoubleMatrix x=DoubleMatrix.rand(n,2);
  x=x.gti(0.5);
  DoubleMatrix y=DoubleMatrix.zeros(n,2);
  for (int i=0; i < x.rows; i++) {
    if (x.get(i,0) == x.get(i,1))     y.put(i,0,1);
 else     y.put(i,1,1);
  }
  RandomGenerator rng=new MersenneTwister(123);
  double preTrainLr=0.001;
  int preTrainEpochs=1000;
  int k=1;
  int nIns=2, nOuts=2;
  int[] hiddenLayerSizes=new int[]{4,4,4};
  double fineTuneLr=0.001;
  int fineTuneEpochs=1000;
  DBN dbn=new DBN.Builder().hiddenLayerSizes(hiddenLayerSizes).numberOfInputs(nIns).renderWeights(100).useRegularization(false).withMomentum(0).withDist(new NormalDistribution(0,0.001)).numberOfOutPuts(nOuts).withRng(rng).build();
  dbn.pretrain(x,k,preTrainLr,preTrainEpochs);
  dbn.finetune(y,fineTuneLr,fineTuneEpochs);
  DoubleMatrix predict=dbn.predict(x);
  Evaluation eval=new Evaluation();
  eval.eval(y,predict);
  log.info(eval.stats());
}
