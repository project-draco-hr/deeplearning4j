{
  if (tree.isLeaf()) {
    return;
  }
  INDArray currentVector=tree.vector();
  String category=tree.label();
  category=basicCategory(category);
  INDArray goldLabel=Nd4j.create(numOuts,1);
  int goldClass=tree.goldLabel();
  if (goldClass >= 0) {
    goldLabel.putScalar(goldClass,1.0f);
  }
  Float nodeWeight=classWeights.get(goldClass);
  if (nodeWeight == null)   nodeWeight=1.0f;
  INDArray predictions=tree.prediction();
  INDArray deltaClass=goldClass >= 0 ? Nd4j.getBlasWrapper().scal(nodeWeight,predictions.sub(goldLabel)) : Nd4j.create(predictions.rows(),predictions.columns());
  INDArray localCD=deltaClass.mmul(Nd4j.appendBias(currentVector).transpose());
  float error=-(float)(Transforms.log(predictions).muli(goldLabel).sum(Integer.MAX_VALUE).element());
  error=error * nodeWeight;
  tree.setError(error);
  if (tree.isPreTerminal()) {
    unaryCD.put(category,unaryCD.get(category).add(localCD));
    String word=tree.children().get(0).label();
    word=getVocabWord(word);
    INDArray currentVectorDerivative=activationFunction.apply(currentVector);
    INDArray deltaFromClass=getUnaryClassification(category).transpose().mmul(deltaClass);
    deltaFromClass=deltaFromClass.get(interval(0,numHidden),interval(0,1)).mul(currentVectorDerivative);
    INDArray deltaFull=deltaFromClass.add(deltaUp);
    wordVectorD.put(word,wordVectorD.get(word).add(deltaFull));
  }
 else {
    String leftCategory=basicCategory(tree.children().get(0).label());
    String rightCategory=basicCategory(tree.children().get(1).label());
    if (combineClassification) {
      unaryCD.put("",unaryCD.get("").add(localCD));
    }
 else {
      binaryCD.put(leftCategory,rightCategory,binaryCD.get(leftCategory,rightCategory).add(localCD));
    }
    INDArray currentVectorDerivative=activationFunction.applyDerivative(currentVector);
    INDArray deltaFromClass=getBinaryClassification(leftCategory,rightCategory).transpose().mmul(deltaClass);
    INDArray mult=deltaFromClass.get(interval(0,numHidden),interval(0,1));
    deltaFromClass=mult.muli(currentVectorDerivative);
    INDArray deltaFull=deltaFromClass.add(deltaUp);
    INDArray leftVector=tree.children().get(0).vector();
    INDArray rightVector=tree.children().get(1).vector();
    INDArray childrenVector=Nd4j.appendBias(leftVector,rightVector);
    INDArray add=binaryTD.get(leftCategory,rightCategory);
    INDArray W_df=deltaFromClass.mmul(childrenVector.transpose());
    binaryTD.put(leftCategory,rightCategory,add.add(W_df));
    INDArray deltaDown;
    if (useINd4j) {
      INDArray Wt_df=getINDArrayGradient(deltaFull,leftVector,rightVector);
      binaryINDArrayTD.put(leftCategory,rightCategory,binaryINDArrayTD.get(leftCategory,rightCategory).add(Wt_df));
      deltaDown=computeINDArrayDeltaDown(deltaFull,leftVector,rightVector,getBinaryTransform(leftCategory,rightCategory),getBinaryINDArray(leftCategory,rightCategory));
    }
 else {
      deltaDown=getBinaryTransform(leftCategory,rightCategory).transpose().mmul(deltaFull);
    }
    INDArray leftDerivative=activationFunction.apply(leftVector);
    INDArray rightDerivative=activationFunction.apply(rightVector);
    INDArray leftDeltaDown=deltaDown.get(interval(0,deltaFull.rows()),interval(0,1));
    INDArray rightDeltaDown=deltaDown.get(interval(deltaFull.rows(),deltaFull.rows() * 2),interval(0,1));
    backpropDerivativesAndError(tree.children().get(0),binaryTD,binaryCD,binaryINDArrayTD,unaryCD,wordVectorD,leftDerivative.mul(leftDeltaDown));
    backpropDerivativesAndError(tree.children().get(1),binaryTD,binaryCD,binaryINDArrayTD,unaryCD,wordVectorD,rightDerivative.mul(rightDeltaDown));
  }
}
