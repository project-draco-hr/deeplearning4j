{
  StringBuilder keyBuffer=new StringBuilder(lhs + " ->");
  for (  String rhs : rhss)   keyBuffer.append(" " + rhs);
  String key=keyBuffer.toString();
synchronized (HeadWordFinder.cache) {
    if (cache.containsKey(key)) {
      return cache.get(key);
    }
  }
  int currentBestGuess=-1;
  int currentGuessUncertainty=10;
  for (int current=0; current < rhss.size(); current++) {
    String rhs=rhss.get(current);
    String rule=lhs + " " + rhs;
    if (currentGuessUncertainty >= 1 && headRules1.contains(rule)) {
      currentBestGuess=current;
      currentGuessUncertainty=1;
    }
 else     if (currentGuessUncertainty > 2 && lhs != null && lhs.equals(rhs)) {
      currentBestGuess=current;
      currentGuessUncertainty=2;
    }
 else     if (currentGuessUncertainty >= 3 && headRules2.contains(rule)) {
      currentBestGuess=current;
      currentGuessUncertainty=3;
    }
 else     if (currentGuessUncertainty >= 5 && !terminals.contains(rhs) && rhs != null && !rhs.equals("PP")) {
      currentBestGuess=current;
      currentGuessUncertainty=5;
    }
 else     if (currentGuessUncertainty >= 6 && !terminals.contains(rhs)) {
      currentBestGuess=current;
      currentGuessUncertainty=6;
    }
 else     if (currentGuessUncertainty >= 7) {
      currentBestGuess=current;
      currentGuessUncertainty=7;
    }
  }
synchronized (HeadWordFinder.cache) {
    cache.put(key,currentBestGuess);
  }
  return currentBestGuess;
}
