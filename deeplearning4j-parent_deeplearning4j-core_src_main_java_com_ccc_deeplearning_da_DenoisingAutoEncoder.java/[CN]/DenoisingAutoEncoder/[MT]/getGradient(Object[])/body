{
  double corruptionLevel=(double)params[0];
  double lr=(double)params[1];
  DoubleMatrix tildeX=getCorruptedInput(input,corruptionLevel);
  DoubleMatrix y=getHiddenValues(tildeX);
  DoubleMatrix z=getReconstructedInput(y);
  DoubleMatrix L_h2=input.sub(z);
  DoubleMatrix L_h1=L_h2.mmul(W).mul(y).mul(oneMinus(y));
  DoubleMatrix L_vbias=L_h2;
  DoubleMatrix L_hbias=L_h1;
  DoubleMatrix L_W=tildeX.transpose().mmul(L_h1).add(L_h2.transpose().mmul(y));
  L_W.muli(lr);
  if (useRegularization) {
    L_W.subi(W.muli(l2));
  }
  L_W.divi(input.rows);
  DoubleMatrix L_hbias_mean=L_hbias.columnMeans();
  DoubleMatrix L_vbias_mean=L_vbias.columnMeans();
  return new NeuralNetworkGradient(L_W,L_vbias_mean,L_hbias_mean);
}
