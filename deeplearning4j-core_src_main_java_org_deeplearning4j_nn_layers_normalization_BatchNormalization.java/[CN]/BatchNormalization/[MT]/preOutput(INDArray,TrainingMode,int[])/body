{
  this.shape=shape;
  INDArray gamma, beta;
  int numExamples=x.size(0);
  trainingMode=training;
  org.deeplearning4j.nn.conf.layers.BatchNormalization layerConf=layerConf();
  if (setMeanVar) {
    this.mean=this.mean == null ? Nd4j.zeros(shape) : this.mean;
    this.var=this.var == null ? Nd4j.valueArrayOf(shape,layerConf.getEps()) : this.var;
    gGamma=gGamma == null ? Nd4j.zeros(shape) : gGamma;
    setMeanVar=false;
  }
  INDArray mean, var;
  if (trainingMode == TrainingMode.TRAIN && layerConf.isUseBatchMean()) {
    mean=x.mean(0).reshape(shape);
    var=x.var(false,0).reshape(shape);
    var.addi(layerConf.getEps());
  }
 else {
    mean=this.mean;
    var=this.var;
  }
  std=Transforms.sqrt(var);
  if (layerConf.isLockGammaBeta()) {
    gamma=Nd4j.onesLike(mean);
    beta=Nd4j.zerosLike(mean);
  }
 else {
    gamma=getParam(BatchNormalizationParamInitializer.GAMMA);
    beta=getParam(BatchNormalizationParamInitializer.BETA);
  }
  INDArray tmp;
  INDArray activations=x.dup();
  for (int i=0; i < x.size(0); i++) {
    tmp=activations.get(NDArrayIndex.interval(i,i + 1)).reshape(shape);
    xHat=tmp.subi(mean).divi(std);
    tmp.muli(gamma).addi(beta);
  }
  double decay;
  if (training == TrainingMode.TRAIN && layerConf.isUseBatchMean()) {
    decay=layerConf.getDecay();
    double adjust=numExamples / Math.max(numExamples - 1.,1.);
    this.mean=mean.mul(decay).add(this.mean.mul(1 - decay));
    this.var=var.mul(decay).add(this.var.mul((1 - decay) * adjust));
  }
  return activations;
}
