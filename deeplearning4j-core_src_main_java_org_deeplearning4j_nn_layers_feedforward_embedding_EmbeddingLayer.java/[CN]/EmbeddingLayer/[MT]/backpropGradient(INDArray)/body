{
  INDArray z=preOutput(input);
  INDArray activationDerivative=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf().getLayer().getActivationFunction(),z).derivative());
  INDArray delta=epsilon.muli(activationDerivative);
  if (maskArray != null) {
    delta.muliColumnVector(maskArray);
  }
  INDArray weights=getParam(DefaultParamInitializer.WEIGHT_KEY);
  INDArray weightGradients=Nd4j.zeros(weights.shape());
  int[] indexes=new int[input.length()];
  for (int i=0; i < indexes.length; i++) {
    indexes[i]=input.getInt(i,0);
    weightGradients.getRow(indexes[i]).addi(delta.getRow(i));
  }
  INDArray biasGradients=delta.sum(0);
  Gradient ret=new DefaultGradient();
  ret.gradientForVariable().put(DefaultParamInitializer.WEIGHT_KEY,weightGradients);
  ret.gradientForVariable().put(DefaultParamInitializer.BIAS_KEY,biasGradients);
  return new Pair<>(ret,null);
}
