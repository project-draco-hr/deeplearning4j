{
  double len=n;
  int desiredElementsAlongDimension=ndArray.length;
  if (len > desiredElementsAlongDimension) {
    ndArray=ComplexNDArrayUtil.padWithZeros(ndArray,new int[]{n});
  }
 else   if (len < desiredElementsAlongDimension) {
    ndArray=ComplexNDArrayUtil.truncate(ndArray,n,0);
  }
  ComplexDouble c2=new ComplexDouble(0,-2).muli(FastMath.PI);
  NDArray n=NDArray.arange(0,this.n);
  NDArray k=n.reshape(new int[]{n.length,1});
  ComplexNDArray M=exp(k.mmul(n).mul(c2).divi(len));
  ComplexNDArray matrix=ndArray.reshape(new int[]{ndArray.length}).mmul(M);
  if (originalN > 0) {
    matrix=ComplexNDArrayUtil.truncate(matrix,originalN,0);
  }
  return matrix;
}
