{
  DataSetIterator iter=new LFWDataSetIterator(10,100,28,28);
  DataSet load=iter.next(10);
  load.filterAndStrip(new int[]{1,2});
  load.normalizeZeroMeanZeroUnitVariance();
  load.sortByLabel();
  log.info("Data applyTransformToDestination " + load.numExamples());
  iter=new SamplingDataSetIterator(load,6,16);
  DBN dbn=new DBN.Builder().withHiddenUnits(RBM.HiddenUnit.RECTIFIED).withVisibleUnits(RBM.VisibleUnit.GAUSSIAN).lineSearchBackProp(true).hiddenLayerSizes(new int[]{600,500,400}).useRegularization(true).sampleFromHiddenActivations(true).withL2(1e-4f).withSparsity(1e-1f).renderByLayer(Collections.singletonMap(0,10)).withDropOut(0.5f).withActivation(Activations.tanh()).withMomentum(0.5f).numberOfInputs(iter.inputColumns()).numberOfOutPuts(load.numOutcomes()).build();
  while (iter.hasNext()) {
    DataSet next=iter.next();
    dbn.pretrain(next.getFeatureMatrix(),new Object[]{1,1e-2,1000,1});
  }
  iter.reset();
  while (iter.hasNext()) {
    DataSet next=iter.next();
    dbn.setInput(next.getFeatureMatrix());
    dbn.finetune(next.getLabels(),1e-3f,100);
  }
  BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream("lfw-dbn.bin"));
  dbn.write(bos);
  bos.flush();
  bos.close();
  log.info("Saved dbn");
  iter.reset();
  Evaluation eval=new Evaluation();
  while (iter.hasNext()) {
    DataSet next=iter.next();
    INDArray predict=dbn.output(next.getFeatureMatrix());
    INDArray labels=next.getLabels();
    eval.eval(labels,predict);
  }
  log.info("Prediction f scores and accuracy");
  log.info(eval.stats());
}
