{
  INDArray ret=null;
switch (initScheme) {
case NORMALIZED:
    ret=Nd4j.rand(nIn,nOut);
  return ret.subi(0.5).divi(nIn);
case UNIFORM:
double a=1 / nIn;
return Nd4j.rand(new int[]{nIn,nOut},-a,a,new MersenneTwister(123));
case VI:
ret=Nd4j.rand(nIn,nOut);
double r=Math.sqrt(6) / Math.sqrt(nIn + nOut + 1);
ret.muli(2).muli(r).subi(r);
return ret;
case DISTRIBUTION:
ret=Nd4j.rand(nIn,nOut);
for (int i=0; i < ret.rows(); i++) {
ret.putRow(i,Nd4j.create(dist.sample(ret.columns())));
}
return ret;
case SIZE:
return uniformBasedOnInAndOut(new int[]{nIn,nOut},nIn,nOut);
case ZERO:
return Nd4j.create(new int[]{nIn,nOut});
}
throw new IllegalStateException("Illegal weight init value");
}
