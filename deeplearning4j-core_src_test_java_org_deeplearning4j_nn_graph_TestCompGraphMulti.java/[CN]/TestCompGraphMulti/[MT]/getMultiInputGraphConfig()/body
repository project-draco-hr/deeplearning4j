{
  return new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).graphBuilder().addInputs("input").addLayer("cnn1",new ConvolutionLayer.Builder(2,2).stride(2,2).nIn(1).nOut(5).build(),"input").addLayer("cnn2",new ConvolutionLayer.Builder(2,2).stride(2,2).nIn(1).nOut(5).build(),"input").addLayer("max1",new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).build(),"cnn1","cnn2").addLayer("dnn1",new DenseLayer.Builder().nOut(7).build(),"max1").addLayer("max2",new SubsamplingLayer.Builder().build(),"max1").addLayer("output",new OutputLayer.Builder().nIn(7).nOut(10).build(),"dnn1","max2").setOutputs("output").inputPreProcessor("cnn1",new FeedForwardToCnnPreProcessor(32,32,3)).inputPreProcessor("cnn2",new FeedForwardToCnnPreProcessor(32,32,3)).inputPreProcessor("dnn1",new CnnToFeedForwardPreProcessor(8,8,5)).pretrain(false).backprop(true).build();
}
