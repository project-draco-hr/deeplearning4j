{
  this.gradient=gradient.dup();
  FourDTensor histGrad=(FourDTensor)this.historicalGradient;
  FourDTensor grad=(FourDTensor)this.gradient;
  FourDTensor adjustedGrad=(FourDTensor)adjustedGradient;
  DoubleMatrix squaredGradient=pow(grad.getSliceOfTensor(tensor,slice),2);
  if (this.historicalGradient.length != this.gradient.length)   this.historicalGradient=FourDTensor.zeros(grad.rows(),this.gradient.columns,grad.slices());
  histGrad.put(tensor,slice,histGrad.getSlice(slice).add(squaredGradient));
  this.historicalGradient.addi(squaredGradient);
  numIterations++;
  DoubleMatrix sqrtGradient=sqrt(squaredGradient).add(fudgeFactor);
  DoubleMatrix div=abs(gradient).div(sqrtGradient);
  adjustedGrad.put(tensor,slice,div.mul(masterStepSize));
  return adjustedGrad.getSliceOfTensor(tensor,slice);
}
