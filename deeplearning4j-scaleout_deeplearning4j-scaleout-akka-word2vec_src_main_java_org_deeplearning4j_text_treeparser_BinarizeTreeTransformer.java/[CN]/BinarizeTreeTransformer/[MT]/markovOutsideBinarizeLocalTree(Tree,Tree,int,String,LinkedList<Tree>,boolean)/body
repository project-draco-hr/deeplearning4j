{
  String word=head.value();
  String tag=head.tags().get(0);
  List<Tree> newChildren=new ArrayList<>(2);
  if (headLoc == 0) {
    if (!doneLeft) {
      if (topCat.equals("S")) {
        return markovOutsideBinarizeLocalTree(t,head,headLoc,topCat,new LinkedList<Tree>(),true);
      }
      String subLabelStr;
      if (simpleLabels) {
        subLabelStr="@" + topCat;
      }
 else {
        String headStr=t.children().get(headLoc).label();
        subLabelStr="@" + topCat + ": "+ headStr+ " ]";
      }
      Tree subTree=new Tree(t);
      subTree.setLabel(subLabelStr + "[" + word+ "/"+ tag);
      subTree.setChildren(t.children());
      newChildren.add(markovOutsideBinarizeLocalTree(subTree,head,headLoc,topCat,new LinkedList<Tree>(),true));
      Tree ret=new Tree(t);
      ret.setChildren(newChildren);
      return ret;
    }
    int len=t.children().size();
    if (len == 1) {
      Tree ret=new Tree(t);
      ret.setChildren(Collections.singletonList(t.children().get(0)));
      return ret;
    }
    ll.addFirst(t.children().get(len - 1));
    if (ll.size() > markovOrder) {
      ll.removeLast();
    }
    String subLabelStr;
    if (simpleLabels) {
      subLabelStr="@" + topCat;
    }
 else {
      String headStr=t.children().get(headLoc).label();
      String rightStr=(len > markovOrder - 1 ? "... " : "") + StringUtils.join(ll);
      subLabelStr="@" + topCat + ": "+ headStr+ " "+ rightStr;
    }
    Tree subTree=new Tree(t.getTokens());
    subTree.setChildren(t.children().subList(0,len - 1));
    subTree.setValue(word);
    subTree.setLabel(tag);
    subTree.setHeadWord(subLabelStr);
    newChildren.add(markovOutsideBinarizeLocalTree(subTree,head,headLoc,topCat,ll,true));
    newChildren.add(t.children().get(len - 1));
    Tree ret=new Tree(t);
    ret.setChildren(newChildren);
    return ret;
  }
  if (headLoc > 0) {
    ll.add(t.children().get(0));
    if (ll.size() > markovOrder) {
      ll.remove(0);
    }
    String subLabelStr;
    if (simpleLabels) {
      subLabelStr="@" + topCat;
    }
 else {
      String headStr=t.children().get(headLoc).label();
      String leftStr=StringUtils.join(ll) + (headLoc > markovOrder - 1 ? " ..." : "");
      subLabelStr="@" + topCat + ": "+ leftStr+ " "+ headStr+ " ]";
    }
    Tree subTree=new Tree(t.getTokens());
    subTree.setChildren(t.children().subList(1,t.children().size()));
    newChildren.add(t.children().get(0));
    newChildren.add(markovOutsideBinarizeLocalTree(subTree,head,headLoc - 1,topCat,ll,false));
    Tree ret=new Tree(t);
    ret.setChildren(newChildren);
    return ret;
  }
  return t;
}
