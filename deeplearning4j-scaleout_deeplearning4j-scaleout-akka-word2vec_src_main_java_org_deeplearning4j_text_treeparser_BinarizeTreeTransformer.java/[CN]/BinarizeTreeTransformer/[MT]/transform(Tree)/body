{
  String tLabelVal=t.value();
  if (t.isLeaf())   return t.clone();
 else   if (t.isPreTerminal()) {
    Tree child=transform(t.firstChild());
    String val=child.value();
    List<Tree> newChildren=new ArrayList<>();
    Tree add=new Tree(child.getTokens());
    add.setLabel(child.value());
    add.setType(child.getType());
    add.setValue(val);
    newChildren.add(add);
    child.connect(newChildren);
    return child;
  }
  Tree head=headWordFinder.findHead(t);
  int headNum=-1;
  List<Tree> children=head.children();
  List<Tree> newChildren=new ArrayList<>();
  for (int i=0; i < children.size(); i++) {
    Tree child=children.get(i);
    Tree childResult=transform(child);
    if (childResult == head)     headNum=i;
    newChildren.add(child);
  }
  Tree result;
  if (t.label().charAt(0) == 'S')   result=new Tree(t);
 else {
    String word=t.value();
    String tag=t.label();
    return binarizeLocalTree(t,headNum,head);
  }
  return result;
}
