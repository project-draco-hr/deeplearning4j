{
  MnistDataSetIterator iter=new MnistDataSetIterator(600,6000);
  RandomGenerator rng=new MersenneTwister(123);
  DataSet first=iter.next();
  int numIns=first.getFirst().columns;
  int numLabels=first.getSecond().columns;
  int[] layerSizes={500,500,2000};
  double lr=0.1;
  StackedDenoisingAutoEncoder sda=new StackedDenoisingAutoEncoder.Builder().numberOfInputs(numIns).numberOfOutPuts(numLabels).withRng(rng).hiddenLayerSizes(layerSizes).build();
  sda.pretrain(first.getFirst(),lr,0.6,100);
  sda.finetune(first.getSecond(),lr,50);
  while (iter.hasNext()) {
    first=iter.next();
    sda.pretrain(first.getFirst(),lr,0.6,100);
    sda.finetune(first.getSecond(),lr,50);
  }
  Evaluation eval=new Evaluation();
  log.info("BEGIN EVAL ON " + first.numExamples());
  DoubleMatrix predicted=sda.predict(first.getFirst());
  log.info("Predicting\n " + predicted.toString().replaceAll(";","\n"));
  eval.eval(first.getSecond(),predicted);
  log.info(eval.stats());
  log.info("Loss is " + sda.negativeLogLikelihood());
}
