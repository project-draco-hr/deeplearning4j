{
  InputStream is=FileUtils.openInputStream(new File(args[0]));
  List<String> labels=Arrays.asList("0","1");
  LabelAwareListSentenceIterator iterator=new LabelAwareListSentenceIterator(is,",");
  iterator.setPreProcessor(new SentencePreProcessor(){
    @Override public String preProcess(    String sentence){
      String base=new InputHomogenization(sentence).transform();
      base=base.replaceAll("@.*","");
      return base;
    }
  }
);
  TokenizerFactory tokenizerFactory=new UimaTokenizerFactory();
  File vecModel=new File("tweet-wordvectors.ser");
  Word2Vec vec=vecModel.exists() ? (Word2Vec)SerializationUtils.readObject(vecModel) : new Word2Vec(tokenizerFactory,iterator,1);
  if (!vecModel.exists()) {
    vec.train();
    log.info("Saving word 2 vec model...");
    SerializationUtils.saveObject(vec,new File("tweet-wordvectors.ser"));
  }
 else   vec.setTokenizerFactory(tokenizerFactory);
  iterator.reset();
  DataSetIterator iter=new Word2VecDataSetIterator(vec,iterator,Arrays.asList("0","1"));
  HazelCastStateTracker tracker=new HazelCastStateTracker(2200);
  if (!tracker.isPretrain())   throw new IllegalStateException("Tracker should be on pretrain");
  Conf c=new Conf();
  c.setFinetuneEpochs(10000);
  c.setPretrainEpochs(10000);
  c.setFinetuneLearningRate(1e-1);
  c.setLayerSizes(new int[]{iter.inputColumns() / 4,iter.inputColumns() / 4,iter.inputColumns() / 3});
  c.setUseAdaGrad(true);
  c.setMomentum(0.3);
  c.setnOut(2);
  c.setSplit(10);
  c.setnIn(vec.getLayerSize() * vec.getWindow());
  c.setHiddenUnit(RBM.HiddenUnit.RECTIFIED);
  c.setVisibleUnit(RBM.VisibleUnit.GAUSSIAN);
  c.setMultiLayerClazz(DBN.class);
  c.setUseRegularization(false);
  c.setDeepLearningParams(new Object[]{1,1e-1,1000});
  ActorNetworkRunner runner=new ActorNetworkRunner("master",iter);
  runner.setModelSaver(new DefaultModelSaver(new File("word2vec-modelsaver.ser")));
  runner.setStateTracker(tracker);
  runner.setup(c);
  runner.train();
  iterator.reset();
  Viterbi viterbi=new Viterbi(new DoubleMatrix(new double[]{0,1}));
  iter.reset();
  while (iter.hasNext()) {
    DataSet next=iter.next();
    Pair<Double,DoubleMatrix> decoded=viterbi.decode(next.getSecond());
    log.info("Pair " + decoded.getSecond());
  }
}
