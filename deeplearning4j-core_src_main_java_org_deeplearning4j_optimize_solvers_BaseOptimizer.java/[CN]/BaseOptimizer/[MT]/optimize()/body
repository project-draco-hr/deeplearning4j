{
  model.validateInput();
  Pair<Gradient,Double> pair=gradientAndScore();
  score=model.score();
  setupSearchState(pair);
  INDArray gradient=(INDArray)searchState.get(GRADIENT_KEY);
  INDArray searchDirection, parameters;
  preProcessLine(gradient);
  for (int i=0; i < conf.getNumIterations(); i++) {
    try {
      gradient=(INDArray)searchState.get(GRADIENT_KEY);
      searchDirection=(INDArray)searchState.get(SEARCH_DIR);
      parameters=(INDArray)searchState.get(PARAMS_KEY);
      step=lineMaximizer.optimize(parameters,gradient,searchDirection);
    }
 catch (    InvalidStepException e) {
      log.warn("Invalid step...continuing another iteration: {}",e.getMessage());
    }
    oldScore=score;
    pair=gradientAndScore();
    setupSearchState(pair);
    score=pair.getSecond();
    for (    IterationListener listener : iterationListeners)     listener.iterationDone(model,i);
    for (    TerminationCondition condition : terminationConditions) {
      if (condition.terminate(score,oldScore,new Object[]{gradient})) {
        log.debug("Hit termination condition: score={}, oldScore={}, condition={}",score,oldScore,condition);
        return true;
      }
    }
    postStep();
    this.iteration++;
    for (    TerminationCondition condition : terminationConditions)     if (condition.terminate(score,oldScore,new Object[]{gradient}))     return true;
  }
  return true;
}
