{
  if (dimension >= shape.length)   throw new IllegalArgumentException("Unable to remove dimension  " + dimension + " was >= shape length");
  if (isScalar()) {
    if (dimension > 0)     throw new IllegalArgumentException("Dimension must be 0 for a scalar");
 else {
      DimensionSlice slice=this.vectorForDimensionAndOffset(0,0);
      op.operate(slice);
      if (modify && slice.getIndices() != null) {
        NDArray result=(NDArray)slice.getResult();
        for (int i=0; i < slice.getIndices().length; i++) {
          data[slice.getIndices()[i]]=(double)result.getScalar(i).element();
        }
      }
    }
  }
 else   if (isVector()) {
    if (dimension == 0) {
      DimensionSlice slice=this.vectorForDimensionAndOffset(0,0);
      op.operate(slice);
      if (modify && slice.getIndices() != null) {
        NDArray result=(NDArray)slice.getResult();
        for (int i=0; i < slice.getIndices().length; i++) {
          data[slice.getIndices()[i]]=(double)result.getScalar(i).element();
        }
      }
    }
 else     if (dimension == 1) {
      for (int i=0; i < length; i++) {
        DimensionSlice slice=vectorForDimensionAndOffset(dimension,i);
        op.operate(slice);
        if (modify && slice.getIndices() != null) {
          NDArray result=(NDArray)slice.getResult();
          for (int j=0; j < slice.getIndices().length; j++) {
            data[slice.getIndices()[j]]=(double)result.getScalar(j).element();
          }
        }
      }
    }
 else     throw new IllegalArgumentException("Illegal dimension for vector " + dimension);
  }
 else {
    int[] shape=ArrayUtil.removeIndex(this.shape,dimension);
    if (dimension == 0) {
      int numTimes=ArrayUtil.prod(shape);
      for (int offset=this.offset; offset < numTimes; offset++) {
        DimensionSlice vector=vectorForDimensionAndOffset(dimension,offset);
        op.operate(vector);
        if (modify && vector.getIndices() != null) {
          NDArray result=(NDArray)vector.getResult();
          for (int i=0; i < vector.getIndices().length; i++) {
            data[vector.getIndices()[i]]=(double)result.getScalar(i).element();
          }
        }
      }
    }
 else {
      double[] data2=new double[ArrayUtil.prod(shape)];
      int dataIter=0;
      int[] sliceIndices=endsForSlices();
      int currOffset=0;
      int numTimes=ArrayUtil.prod(shape);
      for (int offset=this.offset; offset < numTimes; offset++) {
        if (dataIter >= data2.length || currOffset >= sliceIndices.length)         break;
        DimensionSlice dimensionResult=vectorForDimensionAndOffsetPair(dimension,offset,sliceIndices[currOffset]);
        op.operate(dimensionResult);
        if (modify && dimensionResult.getIndices() != null) {
          NDArray result=(NDArray)dimensionResult.getResult();
          for (int i=0; i < dimensionResult.getIndices().length; i++) {
            data[dimensionResult.getIndices()[i]]=(double)result.getScalar(i).element();
          }
        }
        if (dimensionResult.isNextSlice()) {
          offset=sliceIndices[currOffset];
          numTimes+=sliceIndices[currOffset];
          currOffset++;
        }
      }
    }
  }
}
