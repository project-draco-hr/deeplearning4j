{
  if (dimension >= shape.length)   throw new IllegalArgumentException("Unable to remove dimension  " + dimension + " was >= shape length");
  if (isScalar()) {
    if (dimension > 0)     throw new IllegalArgumentException("Dimension must be 0 for a scalar");
 else {
      DimensionSlice slice=this.vectorForDimensionAndOffset(0,0);
      op.operate(slice);
      if (modify && slice.getIndices() != null) {
        NDArray result=(NDArray)slice.getResult();
        for (int i=0; i < slice.getIndices().length; i++) {
          data[slice.getIndices()[i]]=(double)result.getScalar(i).element();
        }
      }
    }
  }
 else   if (isVector()) {
    if (dimension == 0) {
      DimensionSlice slice=this.vectorForDimensionAndOffset(0,0);
      op.operate(slice);
      if (modify && slice.getIndices() != null) {
        NDArray result=(NDArray)slice.getResult();
        for (int i=0; i < slice.getIndices().length; i++) {
          data[slice.getIndices()[i]]=(double)result.getScalar(i).element();
        }
      }
    }
 else     if (dimension == 1) {
      for (int i=0; i < length; i++) {
        DimensionSlice slice=vectorForDimensionAndOffset(dimension,i);
        op.operate(slice);
        if (modify && slice.getIndices() != null) {
          NDArray result=(NDArray)slice.getResult();
          for (int j=0; j < slice.getIndices().length; j++) {
            data[slice.getIndices()[j]]=(double)result.getScalar(j).element();
          }
        }
      }
    }
 else     throw new IllegalArgumentException("Illegal dimension for vector " + dimension);
  }
 else {
    if (dimension == Integer.MAX_VALUE) {
      for (int i=0; i < slices(); i++) {
        INDArray slice=slice(i,dimension);
        if (slice.isVector())         op.operate(slice);
 else {
          slice.iterateOverDimension(dimension,op,modify);
        }
      }
    }
 else     if (shape.length == 2) {
      if (dimension == 0) {
      }
 else       if (dimension == 1) {
      }
    }
 else {
      for (int s=0; s < this.shape[dimension]; s++) {
        NDArray ret=slice(s,dimension);
        op.operate(ret);
      }
    }
  }
}
