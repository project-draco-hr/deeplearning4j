{
  double[] data=DoubleMatrix.linspace(1,10,10).data;
  INDArray n=new NDArray(data,new int[]{10});
  INDArray transposed=n.transpose();
  assertEquals(true,n.isRowVector());
  assertEquals(true,transposed.isColumnVector());
  DoubleMatrix d=new DoubleMatrix(n.rows(),n.columns());
  d.data=n.data();
  DoubleMatrix dTransposed=d.transpose();
  DoubleMatrix result2=d.mmul(dTransposed);
  INDArray innerProduct=n.mmul(transposed);
  INDArray scalar=NDArray.scalar(385);
  assertEquals(scalar,innerProduct);
  INDArray outerProduct=transposed.mmul(n);
  assertEquals(true,Shape.shapeEquals(new int[]{10,10},outerProduct.shape()));
  INDArray testMatrix=new NDArray(data,new int[]{5,2});
  INDArray row1=testMatrix.getRow(0).transpose();
  INDArray row2=testMatrix.getRow(1);
  DoubleMatrix row12=DoubleMatrix.linspace(1,2,2).reshape(2,1);
  DoubleMatrix row22=DoubleMatrix.linspace(3,4,2).reshape(1,2);
  DoubleMatrix rowResult=row12.mmul(row22);
  INDArray row122=NDArray.wrap(row12);
  INDArray row222=NDArray.wrap(row22);
  INDArray rowResult2=row122.mmul(row222);
  INDArray mmul=row1.mmul(row2);
  INDArray result=new NDArray(new double[]{3,6,4,8},new int[]{2,2});
  assertEquals(result,mmul);
  INDArray three=new NDArray(new double[]{3,4},new int[]{2});
  INDArray test=new NDArray(DoubleMatrix.linspace(1,30,30).data,new int[]{3,5,2});
  INDArray sliceRow=test.slice(0).getRow(1);
  assertEquals(three,sliceRow);
  INDArray twoSix=new NDArray(new double[]{2,6},new int[]{2,1});
  INDArray threeTwoSix=three.mmul(twoSix);
  INDArray sliceRowTwoSix=sliceRow.mmul(twoSix);
  assertEquals(threeTwoSix,sliceRowTwoSix);
  INDArray vectorVector=new NDArray(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,0,6,12,18,24,30,36,42,48,54,60,66,72,78,84,90,0,7,14,21,28,35,42,49,56,63,70,77,84,91,98,105,0,8,16,24,32,40,48,56,64,72,80,88,96,104,112,120,0,9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,0,11,22,33,44,55,66,77,88,99,110,121,132,143,154,165,0,12,24,36,48,60,72,84,96,108,120,132,144,156,168,180,0,13,26,39,52,65,78,91,104,117,130,143,156,169,182,195,0,14,28,42,56,70,84,98,112,126,140,154,168,182,196,210,0,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225},new int[]{16,16});
  INDArray n1=new NDArray(DoubleMatrix.linspace(0,15,16).data,new int[]{16});
  INDArray k1=n1.transpose();
  INDArray testVectorVector=k1.mmul(n1);
  assertEquals(vectorVector,testVectorVector);
}
