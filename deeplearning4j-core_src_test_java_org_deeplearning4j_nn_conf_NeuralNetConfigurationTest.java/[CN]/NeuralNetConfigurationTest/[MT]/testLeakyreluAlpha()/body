{
  int sizeX=4;
  int scaleX=10;
  System.out.println("Here is a leaky vector..");
  INDArray leakyVector=Nd4j.linspace(-1,1,sizeX);
  leakyVector=leakyVector.mul(scaleX);
  System.out.println(leakyVector);
  double myAlpha=0.5;
  System.out.println("======================");
  System.out.println("Exec and Return: Leaky Relu transformation with alpha = 0.5 ..");
  System.out.println("======================");
  INDArray outDef=Nd4j.getExecutioner().execAndReturn(new LeakyReLU(leakyVector.dup(),myAlpha));
  System.out.println(outDef);
  String confActivation="leakyrelu";
  Object[] confExtra={myAlpha};
  INDArray outMine=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(confActivation,leakyVector.dup(),confExtra));
  System.out.println("======================");
  System.out.println("Exec and Return: Leaky Relu transformation with a value via getOpFactory");
  System.out.println("======================");
  System.out.println(outMine);
}
