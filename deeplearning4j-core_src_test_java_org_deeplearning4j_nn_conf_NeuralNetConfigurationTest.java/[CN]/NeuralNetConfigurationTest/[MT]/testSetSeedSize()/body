{
  Nd4j.getRandom().setSeed(123);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().layer(new RBM()).nIn(trainingSet.numInputs()).nOut(trainingSet.numOutcomes()).weightInit(WeightInit.SIZE).iterations(3).activationFunction("tanh").visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).lossFunction(LossFunctions.LossFunction.RMSE_XENT).optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).build();
  Layer model=LayerFactories.getFactory(conf).create(conf);
  INDArray modelWeights=model.getParam(DefaultParamInitializer.WEIGHT_KEY);
  Layer model2=LayerFactories.getFactory(conf).create(conf);
  INDArray modelWeights2=model2.getParam(DefaultParamInitializer.WEIGHT_KEY);
  assertEquals(modelWeights,modelWeights2);
}
