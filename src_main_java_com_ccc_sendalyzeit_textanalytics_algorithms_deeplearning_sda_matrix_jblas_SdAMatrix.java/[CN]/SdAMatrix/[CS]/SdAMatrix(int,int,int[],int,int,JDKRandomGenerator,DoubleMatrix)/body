{
  int input_size;
  this.N=N;
  this.n_ins=n_ins;
  this.hidden_layer_sizes=hidden_layer_sizes;
  this.input=input;
  if (hidden_layer_sizes.length != n_layers)   throw new IllegalArgumentException("Te number of hidden layer sizes must be equivalent to the n_layers argument which is a value of " + n_layers);
  this.n_outs=n_outs;
  this.n_layers=n_layers;
  this.sigmoid_layers=new HiddenLayerMatrix[n_layers];
  this.dA_layers=new DenoisingAutoEncoderMatrix[n_layers];
  if (rng == null) {
    this.rng=new JDKRandomGenerator();
    this.rng.setSeed(1);
  }
 else   this.rng=rng;
  DoubleMatrix layer_input=input;
  for (int i=0; i < this.n_layers; i++) {
    if (i == 0)     input_size=this.n_ins;
 else     input_size=this.hidden_layer_sizes[i - 1];
    if (i == 0) {
      this.sigmoid_layers[i]=new HiddenLayerMatrix(this.N,input_size,this.hidden_layer_sizes[i],null,null,rng,layer_input);
    }
 else {
      layer_input=this.sigmoid_layers[i - 1].sample_h_given_v();
      this.sigmoid_layers[i]=new HiddenLayerMatrix(this.N,input_size,this.hidden_layer_sizes[i],null,null,rng,layer_input);
    }
    this.dA_layers[i]=new DenoisingAutoEncoderMatrix(this.N,input_size,this.hidden_layer_sizes[i],this.sigmoid_layers[i].W,this.sigmoid_layers[i].b,null,rng);
  }
  this.log_layer=new LogisticRegressionMatrix(this.N,this.hidden_layer_sizes[this.n_layers - 1],this.n_outs);
}
