{
  INDArray test=Nd4j.rand(new int[]{784,600}).transpose();
  PlotFilters render=new PlotFilters(test,new int[]{10,10},new int[]{0,0},new int[]{28,28});
  PlotFiltersIterationListener listener=new PlotFiltersIterationListener(render,Arrays.asList(DefaultParamInitializer.WEIGHT_KEY),0);
  listener.setOutputFile(new File("render.png"));
  MnistDataFetcher fetcher=new MnistDataFetcher(true);
  Nd4j.MAX_ELEMENTS_PER_SLICE=Integer.MAX_VALUE;
  Nd4j.MAX_SLICES_TO_PRINT=Integer.MAX_VALUE;
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.LINE_GRADIENT_DESCENT).iterations(10).learningRate(1e-1f).layer(new org.deeplearning4j.nn.conf.layers.RBM.Builder().nIn(784).nOut(600).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(1e-3,1e-1)).dropOut(0.5).lossFunction(LossFunctions.LossFunction.RMSE_XENT).build()).build();
  fetcher.fetch(10);
  DataSet d2=fetcher.next();
  INDArray input=d2.getFeatureMatrix();
  Collection<IterationListener> listeners=Arrays.asList(new ScoreIterationListener(1),listener);
  int numParams=LayerFactories.getFactory(conf).initializer().numParams(conf,true);
  INDArray params=Nd4j.create(1,numParams);
  Layer da=LayerFactories.getFactory(conf.getLayer()).create(conf,listeners,0,params);
  da.fit(input);
}
