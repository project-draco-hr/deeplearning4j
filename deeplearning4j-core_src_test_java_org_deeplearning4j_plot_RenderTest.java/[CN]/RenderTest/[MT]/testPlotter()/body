{
  PlotFiltersIterationListener listener=new PlotFiltersIterationListener(Arrays.asList(DefaultParamInitializer.WEIGHT_KEY));
  MnistDataFetcher fetcher=new MnistDataFetcher(true);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().momentum(0.9f).optimizationAlgo(OptimizationAlgorithm.ITERATION_GRADIENT_DESCENT).corruptionLevel(0.6).iterations(1).lossFunction(LossFunctions.LossFunction.RMSE_XENT).learningRate(1e-1f).nIn(784).nOut(600).layer(new org.deeplearning4j.nn.conf.layers.AutoEncoder()).build();
  fetcher.fetch(100);
  DataSet d2=fetcher.next();
  INDArray input=d2.getFeatureMatrix();
  Collection<IterationListener> listeners=Arrays.asList(new ScoreIterationListener(1),listener);
  AutoEncoder da=LayerFactories.getFactory(conf.getLayer()).create(conf,listeners,0);
  da.fit(input);
}
