{
  ObjectMapper mapper=getMapper();
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().momentum(0.9f).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(1000).constrainGradientToUnitNorm(true).applySparsity(true).sparsity(0.5).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).learningRate(1e-1f).nIn(4).nOut(3).layer(new org.deeplearning4j.nn.conf.layers.AutoEncoder.Builder().corruptionLevel(0.6).build()).build();
  DataSet d2=new IrisDataSetIterator(150,150).next();
  INDArray input=d2.getFeatureMatrix();
  AutoEncoder da=LayerFactories.getFactory(conf.getLayer()).create(conf,Arrays.<IterationListener>asList(new ScoreIterationListener(1),new HistogramIterationListener(1)),0);
  da.setInput(input);
  ModelAndGradient g=new ModelAndGradient(da);
  String json=mapper.writeValueAsString(g);
  ModelAndGradient read=mapper.readValue(json,ModelAndGradient.class);
  assertEquals(g,read);
}
