{
  try {
    Constructor<?> c=Dl4jReflection.getEmptyConstructor(getClass());
    c.setAccessible(true);
    NeuralNetwork ret=(NeuralNetwork)c.newInstance();
    ret.setMomentumAfter(momentumAfter);
    ret.setResetAdaGradIterations(resetAdaGradIterations);
    ret.setHbiasAdaGrad(hBiasAdaGrad);
    ret.setVBiasAdaGrad(vBiasAdaGrad);
    ret.sethBias(hBias.dup());
    ret.setvBias(vBias.dup());
    ret.setnHidden(getnHidden());
    ret.setnVisible(getnVisible());
    ret.setW(W.dup());
    ret.setL2(l2);
    ret.setMomentum(momentum);
    ret.setRenderEpochs(getRenderIterations());
    ret.setSparsity(sparsity);
    ret.setRng(getRng());
    ret.setDist(getDist());
    ret.setAdaGrad(wAdaGrad);
    ret.setLossFunction(lossFunction);
    ret.setConstrainGradientToUnitNorm(constrainGradientToUnitNorm);
    ret.setOptimizationAlgorithm(optimizationAlgo);
    return ret;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
