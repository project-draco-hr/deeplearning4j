{
  List<INDArray> listFeatures=new ArrayList<>(num);
  List<INDArray> listLabels=new ArrayList<>(num);
  int minLength=0;
  int maxLength=0;
  for (int i=0; i < num && hasNext(); i++) {
    List<List<Writable>> sequence=recordReader.sequenceRecord();
    INDArray[] fl=getFeaturesLabelsSingleReader(sequence);
    if (i == 0) {
      minLength=fl[0].size(0);
      maxLength=minLength;
    }
 else {
      minLength=Math.min(minLength,fl[0].size(0));
      maxLength=Math.max(maxLength,fl[0].size(0));
    }
    listFeatures.add(fl[0]);
    listLabels.add(fl[1]);
  }
  INDArray featuresOut=Nd4j.create(new int[]{listFeatures.size(),listFeatures.get(0).size(1),maxLength},'f');
  INDArray labelsOut=Nd4j.create(new int[]{listLabels.size(),listLabels.get(0).size(1),maxLength},'f');
  INDArray featuresMask=null;
  INDArray labelsMask=null;
  if (minLength == maxLength) {
    for (int i=0; i < listFeatures.size(); i++) {
      featuresOut.tensorAlongDimension(i,1,2).permutei(1,0).assign(listFeatures.get(i));
      labelsOut.tensorAlongDimension(i,1,2).permutei(1,0).assign(listLabels.get(i));
    }
  }
 else {
    featuresMask=Nd4j.ones(listFeatures.size(),maxLength);
    labelsMask=Nd4j.ones(listLabels.size(),maxLength);
    for (int i=0; i < listFeatures.size(); i++) {
      INDArray f=listFeatures.get(i);
      int tsLength=f.size(0);
      featuresOut.tensorAlongDimension(i,1,2).permutei(1,0).put(new INDArrayIndex[]{NDArrayIndex.interval(0,tsLength),NDArrayIndex.all()},f);
      labelsOut.tensorAlongDimension(i,1,2).permutei(1,0).put(new INDArrayIndex[]{NDArrayIndex.interval(0,tsLength),NDArrayIndex.all()},listLabels.get(i));
      for (int j=tsLength; j < maxLength; j++) {
        featuresMask.put(i,j,0.0);
        labelsMask.put(i,j,0.0);
      }
    }
  }
  cursor+=listFeatures.size();
  if (inputColumns == -1)   inputColumns=featuresOut.size(1);
  if (totalOutcomes == -1)   totalOutcomes=labelsOut.size(1);
  DataSet ds=new DataSet(featuresOut,labelsOut,featuresMask,labelsMask);
  if (preProcessor != null)   preProcessor.preProcess(ds);
  return ds;
}
