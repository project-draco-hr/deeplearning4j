{
  RandomGenerator gen=new MersenneTwister(123);
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().momentum(5e-1f).weightInit(WeightInit.DISTRIBUTION).dist(Distributions.uniform(gen,784,10)).withActivationType(NeuralNetConfiguration.ActivationType.SAMPLE).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).rng(gen).learningRate(1e-1f).nIn(784).nOut(10).build();
  StackedDenoisingAutoEncoder d=new StackedDenoisingAutoEncoder.Builder().configure(conf).hiddenLayerSizes(new int[]{500,250,200}).build();
  d.getOutputLayer().conf().setActivationFunction(Activations.softMaxRows());
  d.getOutputLayer().conf().setLossFunction(LossFunctions.LossFunction.MCXENT);
  MnistDataFetcher fetcher=new MnistDataFetcher(true);
  fetcher.fetch(3000);
  DataSet d2=fetcher.next();
  d.fit(d2);
  INDArray predict2=d.output(d2.getFeatureMatrix());
  Evaluation eval=new Evaluation();
  eval.eval(d2.getLabels(),predict2);
  log.info(eval.stats());
  int[] predict=d.predict(d2.getFeatureMatrix());
  log.info("Predict " + Arrays.toString(predict));
}
