{
  RandomGenerator gen=new MersenneTwister(123);
  DataSetIterator iter=new MultipleEpochsIterator(2,new MnistDataSetIterator(100,1000));
  DataSet d2=iter.next();
  List<NeuralNetConfiguration> conf=new NeuralNetConfiguration.Builder().momentum(5e-1f).weightInit(WeightInit.DISTRIBUTION).render(30).dist(Distributions.normal(gen,1e-2)).withActivationType(NeuralNetConfiguration.ActivationType.SAMPLE).iterations(100).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).rng(gen).learningRate(1e-1f).nIn(d2.numInputs()).nOut(d2.numOutcomes()).list(4).override(new NeuralNetConfiguration.ConfOverride(){
    @Override public void override(    int i,    NeuralNetConfiguration.Builder builder){
      if (i == 3)       builder.weightInit(WeightInit.SIZE);
    }
  }
).build();
  StackedDenoisingAutoEncoder d=new StackedDenoisingAutoEncoder.Builder().layerWiseConfiguration(conf).hiddenLayerSizes(new int[]{500,250,200}).build();
  NeuralNetConfiguration.setClassifier(d.getOutputLayer().conf());
  d.fit(d2);
  while (iter.hasNext()) {
    d2=iter.next();
    d.fit(d2);
  }
  INDArray predict2=d.output(d2.getFeatureMatrix());
  Evaluation eval=new Evaluation();
  eval.eval(d2.getLabels(),predict2);
  log.info(eval.stats());
  int[] predict=d.predict(d2.getFeatureMatrix());
  log.info("Predict " + Arrays.toString(predict));
}
