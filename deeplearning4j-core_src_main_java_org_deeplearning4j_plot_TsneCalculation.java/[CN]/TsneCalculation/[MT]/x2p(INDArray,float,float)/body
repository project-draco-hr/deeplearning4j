{
  int n=X.rows();
  INDArray sumX=Transforms.pow(X,2).sum(1);
  INDArray D=X.mul(-2).mmul(X.transpose()).addiRowVector(sumX).transpose().addiRowVector(sumX);
  INDArray P=Nd4j.zeros(n,n);
  INDArray beta=Nd4j.ones(n,1);
  float logU=(float)Math.log(perplexity);
  StopWatch watch=new StopWatch();
  for (int i=0; i < n; i++) {
    watch.start();
    if (i % 500 == 0)     System.out.println("Computing P-values for point " + i + " of "+ n+ "...");
    float betaMin=Float.NEGATIVE_INFINITY;
    float betaMax=Float.POSITIVE_INFINITY;
    INDArray di=D.getRow(i);
    Pair<Float,INDArray> hPair=hBeta(di,beta);
    float h=hPair.getFirst();
    float hDiff=h - logU;
    int tries=0;
    while (Math.abs(hDiff) > tol && tries < 50) {
      if (hDiff > 0) {
        betaMin=beta.get(i);
        if (Float.isInfinite(betaMax)) {
          beta.putScalar(i,beta.get(i) * 2);
        }
 else         beta.putScalar(i,(beta.get(i) + betaMin) / 2);
      }
 else {
        betaMax=beta.get(i);
        if (Float.isInfinite(betaMin)) {
          beta.putScalar(i,beta.get(i) / 2);
        }
 else         beta.putScalar(i,(beta.get(i) + betaMin) / 2);
      }
      hPair=hBeta(di,Nd4j.scalar(beta.get(i)));
      hDiff=hPair.getFirst() * logU;
      tries++;
    }
    P.putRow(i,hPair.getSecond());
    watch.stop();
    System.out.println("Row took " + watch.getTime());
    watch.reset();
  }
  return P;
}
