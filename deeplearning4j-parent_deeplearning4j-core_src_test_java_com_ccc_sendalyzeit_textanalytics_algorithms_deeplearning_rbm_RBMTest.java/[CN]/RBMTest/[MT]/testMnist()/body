{
  MnistDataFetcher fetcher=new MnistDataFetcher();
  fetcher.fetch(10);
  Pair<DoubleMatrix,DoubleMatrix> pair=fetcher.next();
  int numVisible=pair.getFirst().columns;
  RandomGenerator g=new MersenneTwister(123);
  RBM r=new RBM.Builder().numberOfVisible(numVisible).numHidden(100).withRandom(g).build();
  DoubleMatrix input=pair.getFirst();
  DoubleMatrix reconstructed=r.reconstruct(input);
  for (int i=0; i < 1000; i++) {
    r.contrastiveDivergence(0.1,1,input);
    reconstructed=r.reconstruct(input);
    SimpleRegression r2=new SimpleRegression();
    r2.addData(new double[][]{input.data,reconstructed.data});
    log.info("Least squares error is " + r2.getSumSquaredErrors());
  }
}
