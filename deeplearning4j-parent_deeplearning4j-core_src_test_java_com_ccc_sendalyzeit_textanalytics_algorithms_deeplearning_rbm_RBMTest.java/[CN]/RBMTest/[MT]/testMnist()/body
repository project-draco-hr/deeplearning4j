{
  MnistDataFetcher fetcher=new MnistDataFetcher();
  fetcher.fetch(100);
  DataSet pair=fetcher.next();
  pair.roundToTheNearest(100);
  int numVisible=pair.getFirst().columns;
  RandomGenerator g=new MersenneTwister(123);
  MnistDataSetIterator iter=new MnistDataSetIterator(100,600);
  RBM r=new RBM.Builder().numberOfVisible(numVisible).numHidden(100).withRandom(g).build();
  while (iter.hasNext()) {
    pair=iter.next();
    for (int i=0; i < 1000; i++) {
      r.contrastiveDivergence(0.1,1,pair.getFirst());
    }
    log.info("Entropy " + r.getReConstructionCrossEntropy());
  }
}
