{
  org.deeplearning4j.nn.conf.layers.GravesBidirectionalLSTM layerConf=(org.deeplearning4j.nn.conf.layers.GravesBidirectionalLSTM)conf.getLayer();
  double forgetGateInit=layerConf.getForgetGateBiasInit();
  Distribution dist=Distributions.createDistribution(layerConf.getDist());
  int nL=layerConf.getNOut();
  int nLast=layerConf.getNIn();
  conf.addVariable(INPUT_WEIGHT_KEY_FORWARDS);
  conf.addVariable(RECURRENT_WEIGHT_KEY_FORWARDS);
  conf.addVariable(BIAS_KEY_FORWARDS);
  conf.addVariable(INPUT_WEIGHT_KEY_BACKWARDS);
  conf.addVariable(RECURRENT_WEIGHT_KEY_BACKWARDS);
  conf.addVariable(BIAS_KEY_BACKWARDS);
  params.put(INPUT_WEIGHT_KEY_FORWARDS,WeightInitUtil.initWeights(nLast,4 * nL,layerConf.getWeightInit(),dist));
  params.put(RECURRENT_WEIGHT_KEY_FORWARDS,WeightInitUtil.initWeights(nL,4 * nL + 3,layerConf.getWeightInit(),dist));
  params.put(INPUT_WEIGHT_KEY_BACKWARDS,WeightInitUtil.initWeights(nLast,4 * nL,layerConf.getWeightInit(),dist));
  params.put(RECURRENT_WEIGHT_KEY_BACKWARDS,WeightInitUtil.initWeights(nL,4 * nL + 3,layerConf.getWeightInit(),dist));
  INDArray biasesForwards=Nd4j.zeros(1,4 * nL);
  biasesForwards.put(new INDArrayIndex[]{new NDArrayIndex(0),NDArrayIndex.interval(nL,2 * nL)},Nd4j.ones(1,nL).muli(forgetGateInit));
  INDArray biasesBackwards=Nd4j.zeros(1,4 * nL);
  biasesBackwards.put(new INDArrayIndex[]{new NDArrayIndex(0),NDArrayIndex.interval(nL,2 * nL)},Nd4j.ones(1,nL).muli(forgetGateInit));
  params.put(BIAS_KEY_FORWARDS,biasesForwards);
  params.put(BIAS_KEY_BACKWARDS,biasesBackwards);
  params.get(INPUT_WEIGHT_KEY_FORWARDS).data().persist();
  params.get(RECURRENT_WEIGHT_KEY_FORWARDS).data().persist();
  params.get(INPUT_WEIGHT_KEY_BACKWARDS).data().persist();
  params.get(RECURRENT_WEIGHT_KEY_BACKWARDS).data().persist();
  params.get(BIAS_KEY_FORWARDS).data().persist();
  params.get(BIAS_KEY_BACKWARDS).data().persist();
}
