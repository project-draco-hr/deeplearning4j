{
  ClassPathResource model=new ClassPathResource("/word2vec-address.bin");
  File f=model.getFile();
  Word2Vec vec=Word2VecLoader.loadModel(f);
  int nIn=vec.getWindow() * vec.getSyn0().columns;
  CRBM r=null;
  File dir=new File("src/test/resources/deeplearning");
  Iterator<File> files=FileUtils.iterateFiles(dir,null,true);
  List<DoubleMatrix> trainingExamples=new ArrayList<DoubleMatrix>();
  List<String> allLines=new ArrayList<String>();
  while (files.hasNext()) {
    File next=files.next();
    List<String> lines=FileUtils.readLines(next);
    for (    String line : lines) {
      line=new InputHomogenization(line).transform();
      allLines.add(line);
      List<Window> windows=Windows.windows(line);
      for (      Window window : windows) {
        DoubleMatrix input=new DoubleMatrix(WindowConverter.asExample(window,vec)).transpose();
        trainingExamples.add(input);
      }
    }
  }
  int numExamples=20000;
  DoubleMatrix input=new DoubleMatrix(numExamples,trainingExamples.get(0).columns);
  for (int i=0; i < numExamples; i++) {
    DoubleMatrix example=trainingExamples.get(i);
    input.putRow(i,example);
  }
  if (r == null) {
    r=new CRBM.Builder().numberOfVisible(input.columns).numHidden(500).withL2(0.1).withMomentum(0.9).withRandom(new MersenneTwister(123)).build();
  }
  log.info("Number of inputs " + nIn + " and number of columns "+ trainingExamples.get(0).columns);
  String example=allLines.get(0);
  List<Window> windows=Windows.windows(example);
  StringBuffer errors=new StringBuffer();
  for (int i=0; i < 300; i++) {
    r.contrastiveDivergence(0.01,1,input);
    double entropy=r.getReConstructionCrossEntropy();
    errors.append(i + "," + entropy+ "\n");
    log.info("cross entropy " + entropy);
  }
  FileUtils.writeStringToFile(new File("/home/agibsonccc/Desktop/errors.csv"),errors.toString());
  log.info("End " + r.getReConstructionCrossEntropy());
  for (int i=0; i < windows.size(); i++) {
    DoubleMatrix test=new DoubleMatrix(WindowConverter.asExample(windows.get(i),vec)).transpose();
    test=MatrixUtil.normalize(test);
    String testWords=windows.get(i).asTokens();
    DoubleMatrix reconstructed=MatrixUtil.normalize(r.reconstruct(test));
    log.info("Reconstruct " + testWords + " was "+ reconstructed+ " with example "+ test);
  }
}
