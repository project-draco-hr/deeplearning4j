{
  ClassPathResource model=new ClassPathResource("/word2vecmodel.bin");
  File f=model.getFile();
  Word2Vec vec=Word2VecLoader.loadModel(f);
  int nIn=vec.getWindow() * vec.getSyn0().columns;
  CRBM r=null;
  File dir=new File("src/test/resources/articles");
  Iterator<File> files=FileUtils.iterateFiles(dir,null,true);
  List<DoubleMatrix> trainingExamples=new ArrayList<DoubleMatrix>();
  while (files.hasNext()) {
    File next=files.next();
    List<String> lines=FileUtils.readLines(next);
    for (    String line : lines) {
      List<Window> windows=Windows.windows(line);
      for (      Window window : windows) {
        DoubleMatrix input=new DoubleMatrix(WindowConverter.asExample(window,vec)).transpose();
        trainingExamples.add(input);
      }
    }
    DoubleMatrix input=new DoubleMatrix(trainingExamples.size(),trainingExamples.get(0).columns);
    for (int i=0; i < trainingExamples.size(); i++) {
      DoubleMatrix example=trainingExamples.get(i);
      input.putRow(i,example);
    }
    if (r == null) {
      r=new CRBM.Builder().numberOfVisible(input.columns).numHidden(500).withL2(0.1).withMomentum(0.9).withRandom(new MersenneTwister(123)).build();
    }
    log.info("Number of inputs " + nIn + " and number of columns "+ trainingExamples.get(0).columns);
    for (int i=0; i < 10; i++)     r.trainTillConvergence(0.1,1,input);
  }
  log.info("Final cross entropy " + r.getReConstructionCrossEntropy());
}
