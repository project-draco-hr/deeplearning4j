{
  if (useCurrent) {
    useCurrent=false;
    if (preProcessor != null)     preProcessor.preProcess(last);
    return last;
  }
  int batchNumCount=0;
  byte[] byteFeature=new byte[numPixels];
  List<DataSet> dataSets=new ArrayList<>();
  INDArray label;
  Mat image=new Mat(height,width,CV_8UC(channels));
  ByteBuffer imageData=image.createBuffer();
  try {
    while ((inputStream.read(byteFeature)) != -1 && batchNumCount != num) {
      label=FeatureUtil.toOutcomeVector(byteFeature[0],numPossibleLabels);
      for (int i=0; i < height * width; i++) {
        imageData.put(3 * i,byteFeature[i + 1 + 2 * height * width]);
        imageData.put(3 * i + 1,byteFeature[i + 1 + height * width]);
        imageData.put(3 * i + 2,byteFeature[i + 1]);
      }
      dataSets.add(new DataSet(loader.asRowVector(image),label));
      batchNumCount++;
    }
    exampleCount+=batchSize;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  List<INDArray> inputs=new ArrayList<>();
  List<INDArray> labels=new ArrayList<>();
  for (  DataSet data : dataSets) {
    inputs.add(data.getFeatureMatrix());
    labels.add(data.getLabels());
  }
  if (inputs.isEmpty() || (maxNumBatches > -1 && batchNum >= maxNumBatches)) {
    notOvershot=false;
    return last;
  }
  DataSet ret=new DataSet(Nd4j.vstack(inputs.toArray(new INDArray[0])),Nd4j.vstack(labels.toArray(new INDArray[0])));
  last=ret;
  if (preProcessor != null)   preProcessor.preProcess(ret);
  if (loader.getLabels() != null)   ret.setLabelNames(loader.getLabels());
  return ret;
}
