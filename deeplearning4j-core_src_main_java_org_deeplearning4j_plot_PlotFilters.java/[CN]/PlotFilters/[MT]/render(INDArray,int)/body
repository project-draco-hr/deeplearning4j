{
  data.subi(data.mean(Integer.MAX_VALUE));
  data.divi(data.max(Integer.MAX_VALUE));
  int n=(int)Math.ceil(Math.sqrt(Shape.squeeze(data.shape())[0]));
  int[][] padding=new int[4][];
  double end=Math.pow(n,2) - Shape.squeeze(data.shape())[0];
  padding[0]=new int[]{0,(int)end};
  padding[1]=new int[]{0,padSize};
  padding[2]=new int[]{0,padSize};
  List<double[]> list=new ArrayList<>();
  data=Nd4j.pad(data,padding,Nd4j.PadMode.CONSTANT);
  int[] baseFilterShape=Ints.concat(new int[]{n,n},Arrays.copyOfRange(data.shape(),1,data.shape().length));
  data=data.reshape(baseFilterShape).permute(0,2,1,3);
  if (data.rank() == 4)   data=data.reshape(n * data.size(1),n * data.size(3));
  return data;
}
