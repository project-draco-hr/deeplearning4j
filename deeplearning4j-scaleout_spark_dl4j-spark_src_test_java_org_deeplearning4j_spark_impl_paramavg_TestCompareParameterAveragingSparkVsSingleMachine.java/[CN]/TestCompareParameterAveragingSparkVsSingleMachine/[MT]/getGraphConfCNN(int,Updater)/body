{
  Nd4j.getRandom().setSeed(seed);
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).learningRate(0.5).weightInit(WeightInit.XAVIER).updater(updater).iterations(1).seed(seed).graphBuilder().addInputs("in").addLayer("0",new ConvolutionLayer.Builder().nOut(3).kernelSize(2,2).stride(1,1).padding(0,0).activation("tanh").build(),"in").addLayer("1",new ConvolutionLayer.Builder().nOut(3).kernelSize(2,2).stride(1,1).padding(0,0).activation("tanh").build(),"0").addLayer("2",new OutputLayer.Builder().lossFunction(LossFunctions.LossFunction.MSE).nOut(10).build(),"1").setOutputs("2").setInputTypes(InputType.convolutional(10,10,3)).pretrain(false).backprop(true).build();
  return conf;
}
