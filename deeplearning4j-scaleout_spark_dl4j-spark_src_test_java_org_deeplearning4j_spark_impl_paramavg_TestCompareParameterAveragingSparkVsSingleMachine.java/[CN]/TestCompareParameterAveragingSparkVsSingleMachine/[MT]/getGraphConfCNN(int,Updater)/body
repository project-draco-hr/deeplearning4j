{
  Nd4j.getRandom().setSeed(seed);
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).learningRate(0.5).weightInit(WeightInit.XAVIER).updater(updater).iterations(1).seed(seed).graphBuilder().addInputs("in").addLayer("0",new LocalResponseNormalization.Builder().build(),"in").addLayer("1",new ConvolutionLayer.Builder().nOut(3).kernelSize(2,2).stride(1,1).padding(0,0).activation("tanh").build(),"0").addLayer("2",new BatchNormalization.Builder().build(),"1").addLayer("3",new OutputLayer.Builder().lossFunction(LossFunctions.LossFunction.MSE).nIn(10).nOut(10).build(),"2").setOutputs("3").pretrain(false).backprop(true).build();
  return conf;
}
