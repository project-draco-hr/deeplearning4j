{
  presetTables();
  Glove ret=new Glove();
  if (sentenceIterator != null) {
    SentenceTransformer transformer=new SentenceTransformer.Builder().iterator(sentenceIterator).tokenizerFactory(tokenFactory).build();
    this.iterator=new AbstractSequenceIterator.Builder<>(transformer).build();
  }
  ret.trainElementsVectors=true;
  ret.trainSequenceVectors=false;
  ret.useAdeGrad=true;
  this.useAdaGrad=true;
  ret.learningRate.set(this.learningRate);
  ret.resetModel=this.resetModel;
  ret.batchSize=this.batchSize;
  ret.iterator=this.iterator;
  ret.numEpochs=this.numEpochs;
  ret.numIterations=this.iterations;
  ret.layerSize=this.layerSize;
  ret.useUnknown=this.useUnknown;
  ret.unknownElement=this.unknownElement;
  this.configuration.setLearningRate(this.learningRate);
  this.configuration.setLayersSize(layerSize);
  this.configuration.setHugeModelExpected(hugeModelExpected);
  this.configuration.setWindow(window);
  this.configuration.setMinWordFrequency(minWordFrequency);
  this.configuration.setIterations(iterations);
  this.configuration.setSeed(seed);
  this.configuration.setBatchSize(batchSize);
  this.configuration.setLearningRateDecayWords(learningRateDecayWords);
  this.configuration.setMinLearningRate(minLearningRate);
  this.configuration.setSampling(this.sampling);
  this.configuration.setUseAdaGrad(useAdaGrad);
  this.configuration.setNegative(negative);
  this.configuration.setEpochs(this.numEpochs);
  ret.configuration=this.configuration;
  ret.lookupTable=this.lookupTable;
  ret.vocab=this.vocabCache;
  ret.modelUtils=this.modelUtils;
  ret.eventListeners=this.vectorsListeners;
  ret.elementsLearningAlgorithm=new GloVe.Builder<VocabWord>().learningRate(this.learningRate).shuffle(this.shuffle).symmetric(this.symmetric).xMax(this.xMax).alpha(this.alpha).maxMemory(maxmemory).build();
  return ret;
}
