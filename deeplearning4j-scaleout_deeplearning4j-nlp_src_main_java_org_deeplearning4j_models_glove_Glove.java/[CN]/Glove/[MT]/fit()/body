{
  if (cache == null)   cache=new InMemoryLookupCache();
  if (textVectorizer == null) {
    textVectorizer=new TfidfVectorizer.Builder().tokenize(tokenizerFactory).cache(cache).iterate(sentenceIterator).minWords(minWordFrequency).stopWords(stopWords).stem(stem).build();
    textVectorizer.fit();
  }
  sentenceIterator.reset();
  if (coOccurrences == null) {
    coOccurrences=new CoOccurrences.Builder().cache(cache).iterate(sentenceIterator).tokenizer(tokenizerFactory).windowSize(windowSize).build();
    coOccurrences.fit();
  }
  if (lookupTable == null)   lookupTable=new GloveWeightLookupTable.Builder().xMax(xMax).cache(cache).lr(learningRate).vectorLength(layerSize).build();
  if (lookupTable.getSyn0() == null)   lookupTable.resetWeights();
  final List<List<VocabWord>> miniBatches=new CopyOnWriteArrayList<>();
  for (  String s : coOccurrences.getCoOCurreneCounts().keySet()) {
    for (    String s1 : coOccurrences.getCoOCurreneCounts().getCounter(s).keySet()) {
      VocabWord vocabWord=cache.wordFor(s);
      VocabWord vocabWord1=cache.wordFor(s1);
      miniBatches.add(Arrays.asList(vocabWord,vocabWord1));
      if (miniBatches.size() >= batchSize) {
        jobQueue.add(new ArrayList<>(miniBatches));
        miniBatches.clear();
      }
    }
  }
  if (!miniBatches.isEmpty())   jobQueue.add(miniBatches);
  final AtomicInteger processed=new AtomicInteger(coOccurrences.getCoOCurreneCounts().size());
  try {
    Thread.sleep(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  Parallelization.runInParallel(Runtime.getRuntime().availableProcessors(),new Runnable(){
    @Override public void run(){
      while (processed.get() > 0) {
        List<List<VocabWord>> batch=jobQueue.poll();
        if (batch == null)         continue;
        for (        List<VocabWord> list : batch) {
          VocabWord w1=list.get(0);
          VocabWord w2=list.get(1);
          double weight=coOccurrences.getCoOCurreneCounts().getCount(w1.getWord(),w2.getWord());
          lookupTable.iterateSample(w1,w2,learningRate,weight);
          processed.decrementAndGet();
        }
      }
    }
  }
);
}
