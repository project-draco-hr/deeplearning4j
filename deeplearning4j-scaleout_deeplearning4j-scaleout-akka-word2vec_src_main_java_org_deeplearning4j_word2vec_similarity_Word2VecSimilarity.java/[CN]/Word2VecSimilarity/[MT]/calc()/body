{
  WordMetaData d1=new WordMetaData(vec,words1);
  WordMetaData d2=new WordMetaData(vec,words2);
  d1.calc();
  d2.calc();
  Set<String> vocab=SetUtils.union(d1.getWordCounts().keySet(),d2.getWordCounts().keySet());
  Set<String> remove=new HashSet<String>();
  for (  String word : vocab) {
    if (Util.matchesAnyStopWord(vec.getStopWords(),word))     remove.add(word);
  }
  vocab.removeAll(remove);
  Set<String> inter=SetUtils.intersection(d1.getWordCounts().keySet(),d2.getWordCounts().keySet());
  inter.removeAll(remove);
  List<String> wordList=new ArrayList<String>(vocab);
  FloatMatrix a1Matrix=new FloatMatrix(wordList.size(),vec.getLayerSize());
  FloatMatrix a2Matrix=new FloatMatrix(wordList.size(),vec.getLayerSize());
  for (int i=0; i < wordList.size(); i++) {
    if (d1.getWordCounts().getCount(wordList.get(i)) > 0) {
      a1Matrix.putRow(i,vec.getWordVectorMatrix(wordList.get(i)));
    }
 else     a1Matrix.putRow(i,FloatMatrix.zeros(vec.getLayerSize()));
    if (d2.getWordCounts().getCount(wordList.get(i)) > 0) {
      a2Matrix.putRow(i,vec.getWordVectorMatrix(wordList.get(i)));
    }
 else     a2Matrix.putRow(i,FloatMatrix.zeros(vec.getLayerSize()));
  }
  float wordSim=(float)inter.size() / (float)wordList.size();
  float finalScore=(float)MatrixUtil.cosineSim(a1Matrix,a2Matrix) * wordSim;
  distance=finalScore;
}
