{
  ClassPathResource resource=new ClassPathResource("/big/raw_sentences.txt");
  File file=resource.getFile();
  SentenceIterator iter=new BasicLineIterator(file);
  int numberOfLines=0;
  while (iter.hasNext()) {
    iter.nextSentence();
    numberOfLines++;
  }
  iter.reset();
  InMemoryLookupCache cache=new InMemoryLookupCache(false);
  TokenizerFactory t=new DefaultTokenizerFactory();
  t.setTokenPreProcessor(new CommonPreprocessor());
  ParagraphVectors vec=new ParagraphVectors.Builder().minWordFrequency(1).iterations(5).layerSize(100).windowSize(5).iterate(iter).vocabCache(cache).tokenizerFactory(t).build();
  vec.buildVocab();
  LabelsSource source=vec.getLabelsSource();
  log.info("Number of lines in corpus: " + numberOfLines);
  assertEquals(numberOfLines,source.getLabels().size());
  assertEquals(97162,source.getLabels().size());
  assertNotEquals(null,cache);
  assertEquals(97406,cache.numWords());
  assertEquals(244,cache.numWords() - source.getLabels().size());
}
