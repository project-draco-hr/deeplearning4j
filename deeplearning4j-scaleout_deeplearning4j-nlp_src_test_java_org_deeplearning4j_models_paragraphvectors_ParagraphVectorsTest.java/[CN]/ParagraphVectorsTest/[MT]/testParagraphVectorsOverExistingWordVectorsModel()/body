{
  ClassPathResource resource_sentences=new ClassPathResource("/big/raw_sentences.txt");
  ClassPathResource resource_mixed=new ClassPathResource("/paravec");
  SentenceIterator iter=new AggregatingSentenceIterator.Builder().addSentenceIterator(new BasicLineIterator(resource_sentences.getFile())).addSentenceIterator(new FileSentenceIterator(resource_mixed.getFile())).build();
  TokenizerFactory t=new DefaultTokenizerFactory();
  t.setTokenPreProcessor(new CommonPreprocessor());
  Word2Vec wordVectors=new Word2Vec.Builder().minWordFrequency(1).batchSize(250).iterations(1).epochs(2).learningRate(0.025).minLearningRate(0.001).iterate(iter).tokenizerFactory(t).build();
  wordVectors.fit();
  INDArray vector_day1=wordVectors.getWordVectorMatrix("day").dup();
  double similarityD=wordVectors.similarity("day","night");
  log.info("day/night similarity: " + similarityD);
  assertTrue(similarityD > 0.5d);
  FileLabelAwareIterator labelAwareIterator=new FileLabelAwareIterator.Builder().addSourceFolder(new ClassPathResource("/paravec/labeled").getFile()).build();
  FileLabelAwareIterator unlabeledIterator=new FileLabelAwareIterator.Builder().addSourceFolder(new ClassPathResource("/paravec/unlabeled").getFile()).build();
  ParagraphVectors paragraphVectors=new ParagraphVectors.Builder().iterate(labelAwareIterator).iterations(1).epochs(10).tokenizerFactory(t).trainWordVectors(false).useExistingWordVectors(wordVectors).build();
  paragraphVectors.fit();
  INDArray vector_day2=paragraphVectors.getWordVectorMatrix("day").dup();
  double crossDay=arraysSimilarity(vector_day1,vector_day2);
  log.info("Day1: " + vector_day1);
  log.info("Day2: " + vector_day2);
  log.info("Cross-Day similarity: " + crossDay);
  assertTrue(crossDay > 0.9d);
}
