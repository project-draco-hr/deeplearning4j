{
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().lossFunction(LossFunctions.LossFunction.MCXENT).optimizationAlgo(OptimizationAlgorithm.ITERATION_GRADIENT_DESCENT).activationFunction("softmax").iterations(500).weightInit(WeightInit.XAVIER).learningRate(1e-1).nIn(4).nOut(3).layer(new org.deeplearning4j.nn.conf.layers.OutputLayer()).build();
  OutputLayer l=LayerFactories.getFactory(conf.getLayer()).create(conf,Arrays.<IterationListener>asList(new ScoreIterationListener(1)),0);
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  DataSet next=iter.next();
  next.shuffle();
  SplitTestAndTrain trainTest=next.splitTestAndTrain(110);
  trainTest.getTrain().normalizeZeroMeanZeroUnitVariance();
  l.fit(trainTest.getTrain());
  DataSet test=trainTest.getTest();
  test.normalizeZeroMeanZeroUnitVariance();
  Evaluation eval=new Evaluation(3);
  INDArray output=l.output(test.getFeatureMatrix());
  eval.eval(test.getLabels(),output);
  System.out.println(eval.f1());
  System.out.println(eval.accuracy());
  assertTrue(eval.f1() > 0.8);
  assertTrue(eval.accuracy() > 0.8);
}
