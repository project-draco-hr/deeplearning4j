{
  int miniBatch=5;
  int nOut=3;
  int tsLength=6;
  INDArray labels=Nd4j.zeros(miniBatch,nOut,tsLength);
  INDArray predicted=Nd4j.zeros(miniBatch,nOut,tsLength);
  Nd4j.getRandom().setSeed(12345);
  Random r=new Random(12345);
  for (int i=0; i < miniBatch; i++) {
    for (int j=0; j < tsLength; j++) {
      INDArray rand=Nd4j.rand(1,nOut);
      rand.divi(rand.sumNumber());
      predicted.put(new INDArrayIndex[]{NDArrayIndex.point(i),NDArrayIndex.all(),NDArrayIndex.point(j)},rand);
      int idx=r.nextInt(nOut);
      labels.putScalar(new int[]{i,idx,j},1.0);
    }
  }
  INDArray labels2=Nd4j.zeros(miniBatch,nOut,tsLength + 2);
  labels2.put(new INDArrayIndex[]{NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(1,tsLength + 1)},labels);
  INDArray predicted2=Nd4j.zeros(miniBatch,nOut,tsLength + 2);
  predicted2.put(new INDArrayIndex[]{NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(1,tsLength + 1)},predicted);
  INDArray labelsMask=Nd4j.ones(miniBatch,tsLength + 2);
  for (int i=0; i < miniBatch; i++) {
    labelsMask.putScalar(new int[]{i,0},0.0);
    labelsMask.putScalar(new int[]{i,tsLength + 1},0.0);
  }
  Evaluation evaluation=new Evaluation();
  evaluation.evalTimeSeries(labels,predicted);
  Evaluation evaluation2=new Evaluation();
  evaluation2.evalTimeSeries(labels2,predicted2,labelsMask);
  System.out.println(evaluation.stats());
  System.out.println(evaluation2.stats());
  assertEquals(evaluation.accuracy(),evaluation2.accuracy(),1e-12);
  assertEquals(evaluation.f1(),evaluation2.f1(),1e-12);
  assertMapEquals(evaluation.falsePositives(),evaluation2.falsePositives());
  assertMapEquals(evaluation.falseNegatives(),evaluation2.falseNegatives());
  assertMapEquals(evaluation.truePositives(),evaluation2.truePositives());
  assertMapEquals(evaluation.trueNegatives(),evaluation2.trueNegatives());
  for (int i=0; i < nOut; i++)   assertEquals(evaluation.classCount(i),evaluation2.classCount(i));
}
