{
  Evaluation e=new Evaluation(null,3);
  INDArray i0=Nd4j.create(new double[]{1,0,0,0,0});
  INDArray i1=Nd4j.create(new double[]{0,1,0,0,0});
  INDArray p0_0=Nd4j.create(new double[]{0.8,0.05,0.05,0.05,0.05});
  INDArray p0_1=Nd4j.create(new double[]{0.4,0.45,0.05,0.05,0.05});
  INDArray p0_2=Nd4j.create(new double[]{0.1,0.45,0.35,0.05,0.05});
  INDArray p0_3=Nd4j.create(new double[]{0.1,0.40,0.30,0.15,0.05});
  INDArray p1_0=Nd4j.create(new double[]{0.05,0.80,0.05,0.05,0.05});
  INDArray p1_1=Nd4j.create(new double[]{0.45,0.40,0.05,0.05,0.05});
  INDArray p1_2=Nd4j.create(new double[]{0.35,0.10,0.45,0.05,0.05});
  INDArray p1_3=Nd4j.create(new double[]{0.40,0.10,0.30,0.15,0.05});
  e.eval(i0,p0_0);
  assertEquals(1.0,e.accuracy(),1e-6);
  assertEquals(1.0,e.topNAccuracy(),1e-6);
  assertEquals(1,e.getTopNCorrectCount());
  assertEquals(1,e.getTopNTotalCount());
  e.eval(i0,p0_1);
  assertEquals(0.5,e.accuracy(),1e-6);
  assertEquals(1.0,e.topNAccuracy(),1e-6);
  assertEquals(2,e.getTopNCorrectCount());
  assertEquals(2,e.getTopNTotalCount());
  e.eval(i0,p0_2);
  assertEquals(1.0 / 3,e.accuracy(),1e-6);
  assertEquals(1.0,e.topNAccuracy(),1e-6);
  assertEquals(3,e.getTopNCorrectCount());
  assertEquals(3,e.getTopNTotalCount());
  e.eval(i0,p0_3);
  assertEquals(0.25,e.accuracy(),1e-6);
  assertEquals(0.75,e.topNAccuracy(),1e-6);
  assertEquals(3,e.getTopNCorrectCount());
  assertEquals(4,e.getTopNTotalCount());
  e.eval(i1,p1_0);
  assertEquals(2.0 / 5,e.accuracy(),1e-6);
  assertEquals(4.0 / 5,e.topNAccuracy(),1e-6);
  e.eval(i1,p1_1);
  assertEquals(2.0 / 6,e.accuracy(),1e-6);
  assertEquals(5.0 / 6,e.topNAccuracy(),1e-6);
  e.eval(i1,p1_2);
  assertEquals(2.0 / 7,e.accuracy(),1e-6);
  assertEquals(6.0 / 7,e.topNAccuracy(),1e-6);
  e.eval(i1,p1_3);
  assertEquals(2.0 / 8,e.accuracy(),1e-6);
  assertEquals(6.0 / 8,e.topNAccuracy(),1e-6);
  assertEquals(6,e.getTopNCorrectCount());
  assertEquals(8,e.getTopNTotalCount());
  System.out.println(e.stats());
}
