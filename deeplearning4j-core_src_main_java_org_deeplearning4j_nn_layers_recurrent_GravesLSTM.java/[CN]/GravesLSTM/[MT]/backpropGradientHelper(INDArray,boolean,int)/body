{
  FwdPassReturn fwdPass;
  if (truncatedBPTT) {
    fwdPass=activateHelper(true,stateMap.get(STATE_KEY_PREV_ACTIVATION),stateMap.get(STATE_KEY_PREV_MEMCELL),true);
    tBpttStateMap.put(STATE_KEY_PREV_ACTIVATION,fwdPass.lastAct);
    tBpttStateMap.put(STATE_KEY_PREV_MEMCELL,fwdPass.lastMemCell);
  }
 else {
    fwdPass=activateHelper(true,null,null,true);
  }
  INDArray inputWeights=getParam(GravesLSTMParamInitializer.INPUT_WEIGHT_KEY);
  INDArray recurrentWeights=getParam(GravesLSTMParamInitializer.RECURRENT_WEIGHT_KEY);
  int hiddenLayerSize=recurrentWeights.size(0);
  int prevLayerSize=inputWeights.size(0);
  int miniBatchSize=epsilon.size(0);
  boolean is2dInput=epsilon.rank() < 3;
  int timeSeriesLength=(is2dInput ? 1 : epsilon.size(2));
  for (int i=0; i < fwdPass.paramsZeroOffset.length; i++)   fwdPass.paramsZeroOffset[i]=Shape.toOffsetZero(fwdPass.paramsZeroOffset[i].transpose());
  INDArray wiTranspose=fwdPass.paramsZeroOffset[0];
  INDArray wITranspose=fwdPass.paramsZeroOffset[1];
  INDArray wfTranspose=fwdPass.paramsZeroOffset[2];
  INDArray wFTranspose=fwdPass.paramsZeroOffset[3];
  INDArray wFFTranspose=fwdPass.paramsZeroOffset[4];
  INDArray woTranspose=fwdPass.paramsZeroOffset[5];
  INDArray wOTranspose=fwdPass.paramsZeroOffset[6];
  INDArray wOOTranspose=fwdPass.paramsZeroOffset[7];
  INDArray wgTranspose=fwdPass.paramsZeroOffset[8];
  INDArray wGTranspose=fwdPass.paramsZeroOffset[9];
  INDArray wGGTranspose=fwdPass.paramsZeroOffset[10];
  INDArray[] bGradients=new INDArray[4];
  INDArray[] iwGradients=new INDArray[4];
  INDArray[] rwGradients=new INDArray[7];
  for (int i=0; i < 4; i++) {
    bGradients[i]=Nd4j.zeros(1,hiddenLayerSize);
    iwGradients[i]=Nd4j.zeros(prevLayerSize,hiddenLayerSize);
    rwGradients[i]=Nd4j.zeros(hiddenLayerSize,hiddenLayerSize);
  }
  for (int i=0; i < 3; i++)   rwGradients[i + 4]=Nd4j.zeros(1,hiddenLayerSize);
  INDArray epsilonNext=Nd4j.zeros(miniBatchSize,prevLayerSize,timeSeriesLength);
  INDArray nablaCellStateNext=Nd4j.zeros(miniBatchSize,hiddenLayerSize);
  INDArray deltaiNext=null;
  INDArray deltafNext=Nd4j.zeros(miniBatchSize,hiddenLayerSize);
  INDArray deltaoNext=null;
  INDArray deltagNext=Nd4j.zeros(miniBatchSize,hiddenLayerSize);
  int endIdx=0;
  if (truncatedBPTT)   endIdx=Math.max(0,timeSeriesLength - tbpttBackwardLength);
  for (int t=timeSeriesLength - 1; t >= endIdx; t--) {
    INDArray prevMemCellState=(t == 0 ? Nd4j.zeros(miniBatchSize,hiddenLayerSize) : fwdPass.memCellState[t - 1]);
    INDArray prevHiddenUnitActivation=(t == 0 ? null : fwdPass.fwdPassOutputAsArrays[t - 1]);
    INDArray currMemCellState=fwdPass.memCellState[t];
    INDArray epsilonSlice=(is2dInput ? epsilon : epsilon.tensorAlongDimension(t,1,0));
    INDArray nablaOut=epsilonSlice;
    if (t != timeSeriesLength - 1) {
      nablaOut=nablaOut.dup();
      nablaOut.addi(deltaiNext.mmul(wITranspose)).addi(deltafNext.mmul(wFTranspose)).addi(deltaoNext.mmul(wOTranspose)).addi(deltagNext.mmul(wGTranspose));
    }
    INDArray sigmahOfS=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf.getLayer().getActivationFunction(),currMemCellState.dup()));
    INDArray zo=fwdPass.oz[t];
    INDArray sigmaoPrimeOfZo=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",zo).derivative());
    INDArray deltao=nablaOut.mul(sigmahOfS).muli(sigmaoPrimeOfZo);
    INDArray sigmahPrimeOfS=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf.getLayer().getActivationFunction(),currMemCellState.dup()).derivative());
    INDArray ao=fwdPass.oa[t];
    INDArray nextForgetGateAs=(t == timeSeriesLength - 1 ? Nd4j.zeros(miniBatchSize,hiddenLayerSize) : fwdPass.fa[t + 1]);
    INDArray nablaCellState=nablaOut.mul(ao).muli(sigmahPrimeOfS).addi(nextForgetGateAs.mul(nablaCellStateNext)).addi(deltafNext.mulRowVector(wFFTranspose)).addi(deltao.mulRowVector(wOOTranspose)).addi(deltagNext.mulRowVector(wGGTranspose));
    nablaCellStateNext=nablaCellState;
    INDArray zf=fwdPass.fz[t];
    INDArray deltaf=nablaCellState.mul(prevMemCellState).muli(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",zf).derivative()));
    INDArray zg=fwdPass.gz[t];
    INDArray ai=fwdPass.ia[t];
    INDArray deltag=nablaCellState.mul(ai).muli(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",zg).derivative()));
    INDArray zi=fwdPass.iz[t];
    INDArray ag=fwdPass.ga[t];
    INDArray deltai=nablaCellState.mul(ag).muli(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf.getLayer().getActivationFunction(),zi).derivative()));
    INDArray prevLayerActivationSliceTransposed=Shape.toOffsetZero(is2dInput ? input.transpose() : input.tensorAlongDimension(t,1,0).transpose());
    iwGradients[0].addi(prevLayerActivationSliceTransposed.mmul(deltai));
    iwGradients[1].addi(prevLayerActivationSliceTransposed.mmul(deltaf));
    iwGradients[2].addi(prevLayerActivationSliceTransposed.mmul(deltao));
    iwGradients[3].addi(prevLayerActivationSliceTransposed.mmul(deltag));
    if (t > 0) {
      INDArray prevActTranspose=Shape.toOffsetZero(prevHiddenUnitActivation.transpose());
      rwGradients[0].addi(prevActTranspose.mmul(deltai));
      rwGradients[1].addi(prevActTranspose.mmul(deltaf));
      rwGradients[2].addi(prevActTranspose.mmul(deltao));
      rwGradients[3].addi(prevActTranspose.mmul(deltag));
      INDArray dLdwFF=deltaf.mul(prevMemCellState).sum(0);
      rwGradients[4].addi(dLdwFF);
      INDArray dLdwGG=deltag.mul(prevMemCellState).sum(0);
      rwGradients[6].addi(dLdwGG);
    }
    INDArray dLdwOO=deltao.mul(currMemCellState).sum(0);
    rwGradients[5].addi(dLdwOO);
    bGradients[0].addi(deltai.sum(0));
    bGradients[1].addi(deltaf.sum(0));
    bGradients[2].addi(deltao.sum(0));
    bGradients[3].addi(deltag.sum(0));
    INDArray epsilonNextSlice=deltai.mmul(wiTranspose).addi(deltaf.mmul(wfTranspose)).addi(deltao.mmul(woTranspose)).addi(deltag.mmul(wgTranspose));
    epsilonNext.tensorAlongDimension(t,1,0).assign(epsilonNextSlice);
    deltaiNext=deltai;
    deltafNext=deltaf;
    deltaoNext=deltao;
    deltagNext=deltag;
  }
  INDArray iwGradientsOut=Nd4j.zeros(prevLayerSize,4 * hiddenLayerSize);
  INDArray rwGradientsOut=Nd4j.zeros(hiddenLayerSize,4 * hiddenLayerSize + 3);
  INDArray bGradientsOut=Nd4j.hstack(bGradients);
  iwGradientsOut.put(new INDArrayIndex[]{NDArrayIndex.all(),interval(0,hiddenLayerSize)},iwGradients[0]);
  iwGradientsOut.put(new INDArrayIndex[]{NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize)},iwGradients[1]);
  iwGradientsOut.put(new INDArrayIndex[]{NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize)},iwGradients[2]);
  iwGradientsOut.put(new INDArrayIndex[]{NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize)},iwGradients[3]);
  rwGradientsOut.put(new INDArrayIndex[]{NDArrayIndex.all(),interval(0,hiddenLayerSize)},rwGradients[0]);
  rwGradientsOut.put(new INDArrayIndex[]{NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize)},rwGradients[1]);
  rwGradientsOut.put(new INDArrayIndex[]{NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize)},rwGradients[2]);
  rwGradientsOut.put(new INDArrayIndex[]{NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize)},rwGradients[3]);
  rwGradientsOut.put(new INDArrayIndex[]{NDArrayIndex.all(),NDArrayIndex.point(4 * hiddenLayerSize)},rwGradients[4].transpose());
  rwGradientsOut.put(new INDArrayIndex[]{NDArrayIndex.all(),NDArrayIndex.point(4 * hiddenLayerSize + 1)},rwGradients[5].transpose());
  rwGradientsOut.put(new INDArrayIndex[]{NDArrayIndex.all(),NDArrayIndex.point(4 * hiddenLayerSize + 2)},rwGradients[6].transpose());
  Gradient retGradient=new DefaultGradient();
  retGradient.gradientForVariable().put(GravesLSTMParamInitializer.INPUT_WEIGHT_KEY,iwGradientsOut);
  retGradient.gradientForVariable().put(GravesLSTMParamInitializer.RECURRENT_WEIGHT_KEY,rwGradientsOut);
  retGradient.gradientForVariable().put(GravesLSTMParamInitializer.BIAS_KEY,bGradientsOut);
  return new Pair<>(retGradient,epsilonNext);
}
