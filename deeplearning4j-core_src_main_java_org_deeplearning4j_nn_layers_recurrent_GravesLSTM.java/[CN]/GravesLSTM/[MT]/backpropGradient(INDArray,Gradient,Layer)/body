{
  INDArray[] activations=activateHelper(true);
  INDArray outputActivations=activations[0];
  INDArray memCellActivations=activations[1];
  INDArray ifogZs=activations[2];
  INDArray ifogAs=activations[3];
  INDArray inputWeights=getParam(GravesLSTMParamInitializer.INPUT_WEIGHTS);
  INDArray recurrentWeights=getParam(GravesLSTMParamInitializer.RECURRENT_WEIGHTS);
  int hiddenLayerSize=recurrentWeights.size(0);
  int prevLayerSize=inputWeights.size(0);
  int miniBatchSize=epsilon.size(0);
  boolean is2dInput=epsilon.rank() < 3;
  int timeSeriesLength=(is2dInput ? 1 : epsilon.size(2));
  INDArray wi=inputWeights.get(NDArrayIndex.all(),interval(0,hiddenLayerSize));
  INDArray wI=recurrentWeights.get(NDArrayIndex.all(),interval(0,hiddenLayerSize));
  INDArray wf=inputWeights.get(NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize));
  INDArray wF=recurrentWeights.get(NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize));
  INDArray wFF=recurrentWeights.get(NDArrayIndex.all(),interval(4 * hiddenLayerSize,4 * hiddenLayerSize + 1));
  INDArray wo=inputWeights.get(NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize));
  INDArray wO=recurrentWeights.get(NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize));
  INDArray wOO=recurrentWeights.get(NDArrayIndex.all(),interval(4 * hiddenLayerSize + 1,4 * hiddenLayerSize + 2));
  INDArray wg=inputWeights.get(NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize));
  INDArray wG=recurrentWeights.get(NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize));
  INDArray wGG=recurrentWeights.get(NDArrayIndex.all(),interval(4 * hiddenLayerSize + 2,4 * hiddenLayerSize + 3));
  INDArray biasGradients=Nd4j.zeros(new int[]{miniBatchSize,4 * hiddenLayerSize,timeSeriesLength});
  INDArray inputWeightGradients=Nd4j.zeros(new int[]{prevLayerSize,4 * hiddenLayerSize,timeSeriesLength});
  INDArray recurrentWeightGradients=Nd4j.zeros(new int[]{hiddenLayerSize,4 * hiddenLayerSize + 3,timeSeriesLength});
  INDArray epsilonNext=Nd4j.zeros(miniBatchSize,prevLayerSize,timeSeriesLength);
  INDArray nablaCellStateNext=Nd4j.zeros(miniBatchSize,hiddenLayerSize);
  for (int t=timeSeriesLength - 1; t >= 0; t--) {
    INDArray prevMemCellActivations=(t == 0 ? Nd4j.zeros(miniBatchSize,hiddenLayerSize) : memCellActivations.slice(t - 1,2));
    INDArray prevHiddenUnitActivation=(t == 0 ? Nd4j.zeros(miniBatchSize,hiddenLayerSize) : outputActivations.slice(t - 1,2));
    INDArray currMemCellActivations=(is2dInput ? memCellActivations : memCellActivations.slice(t,2));
    INDArray deltaiNext=(t == timeSeriesLength - 1 ? Nd4j.zeros(miniBatchSize,hiddenLayerSize) : biasGradients.slice(t + 1,2).get(new NDArrayIndex[]{interval(0,miniBatchSize),interval(0,hiddenLayerSize)}));
    INDArray deltafNext=(t == timeSeriesLength - 1 ? Nd4j.zeros(miniBatchSize,hiddenLayerSize) : biasGradients.slice(t + 1,2).get(new NDArrayIndex[]{interval(0,miniBatchSize),interval(hiddenLayerSize,2 * hiddenLayerSize)}));
    INDArray deltaoNext=(t == timeSeriesLength - 1 ? Nd4j.zeros(miniBatchSize,hiddenLayerSize) : biasGradients.slice(t + 1,2).get(new NDArrayIndex[]{interval(0,miniBatchSize),interval(2 * hiddenLayerSize,3 * hiddenLayerSize)}));
    INDArray deltagNext=(t == timeSeriesLength - 1 ? Nd4j.zeros(miniBatchSize,hiddenLayerSize) : biasGradients.slice(t + 1,2).get(new NDArrayIndex[]{interval(0,miniBatchSize),interval(3 * hiddenLayerSize,4 * hiddenLayerSize)}));
    INDArray epsilonSlice=(is2dInput ? epsilon : epsilon.slice(t,2));
    INDArray nablaOut=epsilonSlice.dup().addi(deltaiNext.mmul(wI.transpose())).addi(deltafNext.mmul(wF.transpose())).addi(deltaoNext.mmul(wO.transpose())).addi(deltagNext.mmul(wG.transpose()));
    INDArray sigmahOfS=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf.getActivationFunction(),currMemCellActivations.dup()));
    INDArray zo;
    if (is2dInput)     zo=ifogZs.get(NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize));
 else     zo=ifogZs.slice(t,2).get(NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize));
    INDArray sigmaoPrimeOfZo=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",zo).derivative());
    INDArray deltao=nablaOut.mul(sigmahOfS).muli(sigmaoPrimeOfZo);
    INDArray sigmahPrimeOfS=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf.getActivationFunction(),currMemCellActivations.dup()).derivative());
    INDArray ao;
    if (is2dInput)     ao=ifogAs.get(NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize));
 else     ao=ifogAs.slice(t,2).get(NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize));
    INDArray nextForgetGateAs=(t == timeSeriesLength - 1 ? Nd4j.zeros(miniBatchSize,hiddenLayerSize) : ifogAs.slice(t + 1,2).get(NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize)));
    INDArray nablaCellState=nablaOut.mul(ao).muli(sigmahPrimeOfS).addi(nextForgetGateAs.mul(nablaCellStateNext)).addi(deltafNext.mmul(Nd4j.diag(wFF))).addi(deltaoNext.mmul(Nd4j.diag(wOO))).addi(deltagNext.mmul(Nd4j.diag(wGG)));
    nablaCellStateNext=nablaCellState;
    INDArray zf=(is2dInput ? ifogZs.get(NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize)) : ifogZs.slice(t,2).get(NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize)));
    INDArray deltaf=nablaCellState.mul(prevMemCellActivations).muli(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",zf).derivative()));
    INDArray zg=(is2dInput ? ifogZs.get(NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize)) : ifogZs.slice(t,2).get(NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize)));
    INDArray ai=(is2dInput ? ifogAs.get(NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize)) : ifogAs.slice(t,2).get(NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize)));
    INDArray deltag=nablaCellState.mul(ai).muli(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",zg).derivative()));
    INDArray zi=(is2dInput ? ifogZs.get(NDArrayIndex.all(),interval(0,hiddenLayerSize)) : ifogZs.slice(t,2).get(NDArrayIndex.all(),interval(0,hiddenLayerSize)));
    INDArray ag=(is2dInput ? ifogAs.get(NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize)) : ifogAs.slice(t,2).get(NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize)));
    INDArray deltai=nablaCellState.mul(ag).muli(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf.getActivationFunction(),zi).derivative()));
    INDArray prevLayerActivationSlice=(is2dInput ? input : input.slice(t,2));
    inputWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(0,hiddenLayerSize)},deltai.transpose().mmul(prevLayerActivationSlice).transpose());
    inputWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize)},deltaf.transpose().mmul(prevLayerActivationSlice).transpose());
    inputWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize)},deltao.transpose().mmul(prevLayerActivationSlice).transpose());
    inputWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize)},deltag.transpose().mmul(prevLayerActivationSlice).transpose());
    if (t > 0) {
      recurrentWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(0,hiddenLayerSize)},deltai.transpose().mmul(prevHiddenUnitActivation).transpose());
      recurrentWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize)},deltaf.transpose().mmul(prevHiddenUnitActivation).transpose());
      recurrentWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize)},deltao.transpose().mmul(prevHiddenUnitActivation).transpose());
      recurrentWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize)},deltag.transpose().mmul(prevHiddenUnitActivation).transpose());
      INDArray dLdwFF=deltaf.mul(prevMemCellActivations).sum(0).transpose();
      recurrentWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),new NDArrayIndex(4 * hiddenLayerSize)},dLdwFF);
      INDArray dLdwGG=deltag.mul(prevMemCellActivations).sum(0).transpose();
      recurrentWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),new NDArrayIndex(4 * hiddenLayerSize + 2)},dLdwGG);
    }
    INDArray dLdwOO=deltao.mul(currMemCellActivations).sum(0).transpose();
    recurrentWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),new NDArrayIndex(4 * hiddenLayerSize + 1)},dLdwOO);
    INDArray bGradSlice=(is2dInput ? biasGradients : biasGradients.slice(t,2));
    bGradSlice.put(new NDArrayIndex[]{NDArrayIndex.all(),interval(0,hiddenLayerSize)},deltai);
    bGradSlice.put(new NDArrayIndex[]{NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize)},deltaf);
    bGradSlice.put(new NDArrayIndex[]{NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize)},deltao);
    bGradSlice.put(new NDArrayIndex[]{NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize)},deltag);
    INDArray epsilonNextSlice=wi.mmul(deltai.transpose()).transpose().addi(wf.mmul(deltaf.transpose()).transpose()).addi(wo.mmul(deltao.transpose()).transpose()).addi(wg.mmul(deltag.transpose()).transpose());
    epsilonNext.slice(t,2).assign(epsilonNextSlice);
  }
  Gradient retGradient=new DefaultGradient();
  retGradient.gradientForVariable().put(GravesLSTMParamInitializer.INPUT_WEIGHTS,inputWeightGradients.sum(2));
  retGradient.gradientForVariable().put(GravesLSTMParamInitializer.RECURRENT_WEIGHTS,recurrentWeightGradients.sum(2));
  retGradient.gradientForVariable().put(GravesLSTMParamInitializer.BIAS,biasGradients.sum(2).sum(0));
  return new Pair<>(retGradient,epsilonNext);
}
