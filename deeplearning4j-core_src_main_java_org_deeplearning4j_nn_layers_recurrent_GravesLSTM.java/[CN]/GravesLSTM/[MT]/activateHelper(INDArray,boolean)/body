{
  INDArray recurrentWeights=getParam(GravesLSTMParamInitializer.RECURRENT_WEIGHTS);
  INDArray inputWeights=getParam(GravesLSTMParamInitializer.INPUT_WEIGHTS);
  INDArray biases=getParam(GravesLSTMParamInitializer.BIAS);
  int[] dataShape=input.shape();
  boolean is2dInput=dataShape.length < 3;
  int timeSeriesLength=(is2dInput ? 1 : dataShape[2]);
  int hiddenLayerSize=recurrentWeights.rows();
  int miniBatchSize=dataShape[0];
  int nIn=inputWeights.shape()[0];
  if (conf.isUseDropConnect() && training) {
    if (conf.getDropOut() > 0) {
      inputWeights=Dropout.applyDropConnect(this,GravesLSTMParamInitializer.RECURRENT_WEIGHTS);
    }
  }
  INDArray wi=inputWeights.get(interval(0,nIn),interval(0,hiddenLayerSize));
  INDArray wI=recurrentWeights.get(interval(0,hiddenLayerSize),interval(0,hiddenLayerSize));
  INDArray bi=biases.get(interval(0,hiddenLayerSize));
  INDArray wf=inputWeights.get(interval(0,nIn),interval(hiddenLayerSize,2 * hiddenLayerSize));
  INDArray wF=recurrentWeights.get(interval(0,hiddenLayerSize),interval(hiddenLayerSize,2 * hiddenLayerSize));
  INDArray wFF=recurrentWeights.get(interval(0,hiddenLayerSize),interval(4 * hiddenLayerSize,4 * hiddenLayerSize + 1));
  INDArray bf=biases.get(interval(hiddenLayerSize,2 * hiddenLayerSize));
  INDArray wo=inputWeights.get(interval(0,nIn),interval(2 * hiddenLayerSize,3 * hiddenLayerSize));
  INDArray wO=recurrentWeights.get(interval(0,hiddenLayerSize),interval(2 * hiddenLayerSize,3 * hiddenLayerSize));
  INDArray wOO=recurrentWeights.get(interval(0,hiddenLayerSize),interval(4 * hiddenLayerSize + 1,4 * hiddenLayerSize + 2));
  INDArray bo=biases.get(interval(2 * hiddenLayerSize,3 * hiddenLayerSize));
  INDArray wg=inputWeights.get(interval(0,nIn),interval(3 * hiddenLayerSize,4 * hiddenLayerSize));
  INDArray wG=recurrentWeights.get(interval(0,hiddenLayerSize),interval(3 * hiddenLayerSize,4 * hiddenLayerSize));
  INDArray wGG=recurrentWeights.get(interval(0,hiddenLayerSize),interval(4 * hiddenLayerSize + 2,4 * hiddenLayerSize + 3));
  INDArray bg=biases.get(interval(3 * hiddenLayerSize,4 * hiddenLayerSize));
  INDArray outputActivations=Nd4j.zeros(new int[]{miniBatchSize,hiddenLayerSize,timeSeriesLength});
  INDArray ifogZ=Nd4j.zeros(new int[]{miniBatchSize,4 * hiddenLayerSize,timeSeriesLength});
  INDArray ifogA=Nd4j.zeros(new int[]{miniBatchSize,4 * hiddenLayerSize,timeSeriesLength});
  INDArray memCellActivations=Nd4j.zeros(new int[]{miniBatchSize,hiddenLayerSize,timeSeriesLength});
  for (int t=0; t < timeSeriesLength; t++) {
    INDArray miniBatchData=(is2dInput ? input : input.slice(t,2));
    INDArray prevOutputActivations=(t == 0 ? Nd4j.zeros(new int[]{miniBatchSize,hiddenLayerSize}) : outputActivations.slice(t - 1,2));
    INDArray prevMemCellActivations=(t == 0 ? Nd4j.zeros(new int[]{miniBatchSize,hiddenLayerSize}) : memCellActivations.slice(t - 1,2));
    INDArray inputActivations=miniBatchData.mmul(wi).addi(prevOutputActivations.mmul(wI)).addiRowVector(bi);
    NDArrayIndex[] iIndexes=(miniBatchSize == 1 ? new NDArrayIndex[]{interval(0,hiddenLayerSize)} : new NDArrayIndex[]{NDArrayIndex.all(),interval(0,hiddenLayerSize)});
    ifogZ.slice(t,2).put(iIndexes,inputActivations);
    ifogA.slice(t,2).put(iIndexes,Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf.getActivationFunction(),inputActivations)));
    INDArray forgetGateActivations=miniBatchData.mmul(wf).addi(prevOutputActivations.mmul(wF)).addi(prevMemCellActivations.mmul(Nd4j.diag(wFF))).addiRowVector(bf);
    NDArrayIndex[] fIndexes=(miniBatchSize == 1 ? new NDArrayIndex[]{interval(hiddenLayerSize,2 * hiddenLayerSize)} : new NDArrayIndex[]{NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize)});
    ifogZ.slice(t,2).put(fIndexes,forgetGateActivations);
    ifogA.slice(t,2).put(fIndexes,Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",forgetGateActivations)));
    INDArray inputModGateActivations=miniBatchData.mmul(wg).addi(prevOutputActivations.mmul(wG)).addi(prevMemCellActivations.mmul(Nd4j.diag(wGG))).addiRowVector(bg);
    NDArrayIndex[] gIndexes=(miniBatchSize == 1 ? new NDArrayIndex[]{interval(3 * hiddenLayerSize,4 * hiddenLayerSize)} : new NDArrayIndex[]{NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize)});
    ifogZ.slice(t,2).put(gIndexes,inputModGateActivations);
    ifogA.slice(t,2).put(gIndexes,Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",inputModGateActivations)));
    INDArray currentMemoryCellActivations=forgetGateActivations.mul(prevMemCellActivations).addi(inputModGateActivations.mul(inputActivations));
    currentMemoryCellActivations=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf.getActivationFunction(),currentMemoryCellActivations));
    INDArray outputGateActivations=miniBatchData.mmul(wo).addi(prevOutputActivations.mmul(wO)).addi(currentMemoryCellActivations.mmul(Nd4j.diag(wOO))).addiRowVector(bo);
    NDArrayIndex[] oIndexes=(miniBatchSize == 1 ? new NDArrayIndex[]{interval(2 * hiddenLayerSize,3 * hiddenLayerSize)} : new NDArrayIndex[]{NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize)});
    ifogZ.slice(t,2).put(oIndexes,outputGateActivations);
    ifogA.slice(t,2).put(oIndexes,Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",outputGateActivations)));
    INDArray currHiddenUnitActivations=outputGateActivations.mul(currentMemoryCellActivations);
    outputActivations.slice(t,2).assign(currHiddenUnitActivations);
    memCellActivations.slice(t,2).assign(currentMemoryCellActivations);
  }
  if (is2dInput) {
    int[] shape=outputActivations.shape();
    outputActivations=outputActivations.reshape(shape[0],shape[1]);
  }
  return new INDArray[]{outputActivations,memCellActivations,ifogZ,ifogA};
}
