{
  INDArray recurrentWeights=getParam(GravesLSTMParamInitializer.RECURRENT_WEIGHTS);
  INDArray nextWeights=nextLayer.getParam(DefaultParamInitializer.WEIGHT_KEY);
  INDArray nextDelta=nextGradient.getGradientFor(DefaultParamInitializer.BIAS_KEY);
  int hiddenLayerSize=recurrentWeights.rows();
  int prevLayerSize=getParam(GravesLSTMParamInitializer.INPUT_WEIGHTS).shape()[0];
  int miniBatchSize=nextDelta.size(0);
  boolean is2dInput=nextDelta.rank() < 3;
  int timeSeriesLength=(is2dInput ? 1 : nextDelta.size(2));
  INDArray wI=recurrentWeights.get(interval(0,hiddenLayerSize),interval(0,hiddenLayerSize));
  INDArray wF=recurrentWeights.get(interval(0,hiddenLayerSize),interval(hiddenLayerSize,2 * hiddenLayerSize));
  INDArray wFF=recurrentWeights.get(interval(0,hiddenLayerSize),interval(4 * hiddenLayerSize,4 * hiddenLayerSize + 1));
  INDArray wO=recurrentWeights.get(interval(0,hiddenLayerSize),interval(2 * hiddenLayerSize,3 * hiddenLayerSize));
  INDArray wOO=recurrentWeights.get(interval(0,hiddenLayerSize),interval(4 * hiddenLayerSize + 1,4 * hiddenLayerSize + 2));
  INDArray wG=recurrentWeights.get(interval(0,hiddenLayerSize),interval(3 * hiddenLayerSize,4 * hiddenLayerSize));
  INDArray wGG=recurrentWeights.get(interval(0,hiddenLayerSize),interval(4 * hiddenLayerSize + 2,4 * hiddenLayerSize + 3));
  INDArray biasGradients=Nd4j.zeros(new int[]{miniBatchSize,4 * hiddenLayerSize,timeSeriesLength});
  INDArray inputWeightGradients=Nd4j.zeros(new int[]{prevLayerSize,4 * hiddenLayerSize,timeSeriesLength});
  INDArray recurrentWeightGradients=Nd4j.zeros(new int[]{hiddenLayerSize,4 * hiddenLayerSize + 3,timeSeriesLength});
  for (int t=timeSeriesLength - 1; t >= 0; t--) {
    INDArray prevMemCellActivations=(t == 0 ? Nd4j.zeros(hiddenLayerSize,hiddenLayerSize) : memCellActivations.slice(t - 1,2));
    INDArray prevHiddenUnitActivation=(t == 0 ? Nd4j.zeros(hiddenLayerSize,hiddenLayerSize) : outputActivations.slice(t - 1,2));
    INDArray nextLayerDeltaSlice=nextDelta;
    if (!is2dInput) {
      nextLayerDeltaSlice=nextDelta.slice(t,2);
    }
    INDArray deltaiNext=(t == timeSeriesLength - 1 ? Nd4j.zeros(miniBatchSize,hiddenLayerSize) : biasGradients.slice(t + 1,2).get(new NDArrayIndex[]{interval(0,miniBatchSize),interval(0,hiddenLayerSize)}));
    INDArray deltafNext=(t == timeSeriesLength - 1 ? Nd4j.zeros(miniBatchSize,hiddenLayerSize) : biasGradients.slice(t + 1,2).get(new NDArrayIndex[]{interval(0,miniBatchSize),interval(hiddenLayerSize,2 * hiddenLayerSize)}));
    INDArray deltaoNext=(t == timeSeriesLength - 1 ? Nd4j.zeros(miniBatchSize,hiddenLayerSize) : biasGradients.slice(t + 1,2).get(new NDArrayIndex[]{interval(0,miniBatchSize),interval(2 * hiddenLayerSize,3 * hiddenLayerSize)}));
    INDArray deltagNext=(t == timeSeriesLength - 1 ? Nd4j.zeros(miniBatchSize,hiddenLayerSize) : biasGradients.slice(t + 1,2).get(new NDArrayIndex[]{interval(0,miniBatchSize),interval(3 * hiddenLayerSize,4 * hiddenLayerSize)}));
    INDArray nablaOut=nextLayerDeltaSlice.mmul(nextWeights.transpose()).addi(deltaiNext.mmul(wI.transpose())).addi(deltafNext.mmul(wF.transpose())).addi(deltaoNext.mmul(wO.transpose())).addi(deltagNext.mmul(wG.transpose()));
    INDArray sigmahOfS=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf.getActivationFunction(),prevMemCellActivations.dup()));
    INDArray zo=ifogZs.slice(t,2).get(NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize));
    INDArray sigmaoPrimeOfZo=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",zo).derivative());
    INDArray deltao=nablaOut.mul(sigmahOfS).muli(sigmaoPrimeOfZo);
    INDArray sigmahPrimeOfS=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf.getActivationFunction(),prevMemCellActivations.dup()));
    INDArray nextForgetGateAs=(t == timeSeriesLength - 1 ? Nd4j.zeros(miniBatchSize,hiddenLayerSize) : ifogAs.slice(t,2).get(NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize)));
    INDArray nablaCellState=nablaOut.mul(prevHiddenUnitActivation).muli(sigmahPrimeOfS).addi(nextForgetGateAs.mul(prevMemCellActivations)).addi(deltafNext.mmul(Nd4j.diag(wFF))).addi(deltaoNext.mmul(Nd4j.diag(wOO))).addi(deltagNext.mmul(Nd4j.diag(wGG)));
    INDArray zf=ifogZs.slice(t,0).get(NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize));
    INDArray deltaf=nablaCellState.mul(prevMemCellActivations).muli(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",zf).derivative()));
    INDArray zg=ifogZs.slice(t,0).get(NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize));
    INDArray ai=ifogAs.slice(t,0).get(NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize));
    INDArray deltag=nablaCellState.mul(ai).muli(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("tanh",zg).derivative()));
    INDArray zi=ifogZs.slice(t,0).get(NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize));
    INDArray ag=ifogAs.slice(t,0).get(NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize));
    INDArray deltai=nablaCellState.mul(ag).muli(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("tanh",zi).derivative()));
    INDArray prevLayerActivationSlice=activation.slice(t,2);
    inputWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(0,hiddenLayerSize)},deltai.transpose().mmul(prevLayerActivationSlice).transpose());
    inputWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize)},deltaf.transpose().mmul(prevLayerActivationSlice).transpose());
    inputWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize)},deltao.transpose().mmul(prevLayerActivationSlice).transpose());
    inputWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize)},deltag.transpose().mmul(prevLayerActivationSlice).transpose());
    if (t > 0) {
      recurrentWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(0,hiddenLayerSize)},deltai.transpose().mmul(prevHiddenUnitActivation).transpose());
      recurrentWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize)},deltaf.transpose().mmul(prevHiddenUnitActivation).transpose());
      recurrentWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize)},deltao.transpose().mmul(prevHiddenUnitActivation).transpose());
      recurrentWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize)},deltag.transpose().mmul(prevHiddenUnitActivation).transpose());
      INDArray dLdwFF=deltaf.mul(prevMemCellActivations);
      recurrentWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),new NDArrayIndex(4 * hiddenLayerSize)},dLdwFF);
      INDArray dLdwGG=deltag.mul(prevMemCellActivations);
      recurrentWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),new NDArrayIndex(4 * hiddenLayerSize + 2)},dLdwGG);
    }
    INDArray dLdwOO=deltao.transpose().mul(memCellActivations.slice(t,2)).transpose();
    recurrentWeightGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),new NDArrayIndex(4 * hiddenLayerSize + 1)},dLdwOO);
    if (miniBatchSize == 1) {
      biasGradients.slice(t,2).put(new NDArrayIndex[]{interval(0,hiddenLayerSize)},deltai);
      biasGradients.slice(t,2).put(new NDArrayIndex[]{interval(hiddenLayerSize,2 * hiddenLayerSize)},deltaf);
      biasGradients.slice(t,2).put(new NDArrayIndex[]{interval(2 * hiddenLayerSize,3 * hiddenLayerSize)},deltao);
      biasGradients.slice(t,2).put(new NDArrayIndex[]{interval(3 * hiddenLayerSize,4 * hiddenLayerSize)},deltag);
    }
 else {
      biasGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(0,hiddenLayerSize)},deltai);
      biasGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize)},deltaf);
      biasGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize)},deltao);
      biasGradients.slice(t,2).put(new NDArrayIndex[]{NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize)},deltag);
    }
  }
  Gradient gradient=new DefaultGradient();
  gradient.gradientForVariable().put(GravesLSTMParamInitializer.INPUT_WEIGHTS,inputWeightGradients.sum(2));
  gradient.gradientForVariable().put(GravesLSTMParamInitializer.RECURRENT_WEIGHTS,recurrentWeightGradients.sum(2));
  gradient.gradientForVariable().put(GravesLSTMParamInitializer.BIAS,biasGradients.sum(2));
  return gradient;
}
