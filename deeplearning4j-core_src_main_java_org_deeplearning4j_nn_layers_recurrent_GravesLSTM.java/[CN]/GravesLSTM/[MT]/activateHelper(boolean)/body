{
  INDArray recurrentWeights=getParam(GravesLSTMParamInitializer.RECURRENT_WEIGHT_KEY);
  INDArray inputWeights=getParam(GravesLSTMParamInitializer.INPUT_WEIGHT_KEY);
  INDArray biases=getParam(GravesLSTMParamInitializer.BIAS_KEY);
  boolean is2dInput=input.rank() < 3;
  int timeSeriesLength=(is2dInput ? 1 : input.size(2));
  int hiddenLayerSize=recurrentWeights.size(0);
  int miniBatchSize=input.size(0);
  int nIn=inputWeights.size(0);
  if (conf.isUseDropConnect() && training) {
    if (conf.getDropOut() > 0) {
      inputWeights=Dropout.applyDropConnect(this,GravesLSTMParamInitializer.INPUT_WEIGHT_KEY);
    }
  }
  INDArray wi=inputWeights.get(NDArrayIndex.all(),interval(0,hiddenLayerSize));
  INDArray wI=recurrentWeights.get(NDArrayIndex.all(),interval(0,hiddenLayerSize));
  INDArray bi=biases.get(new NDArrayIndex(0),interval(0,hiddenLayerSize));
  INDArray wf=inputWeights.get(NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize));
  INDArray wF=recurrentWeights.get(NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize));
  INDArray wFF=recurrentWeights.get(NDArrayIndex.all(),interval(4 * hiddenLayerSize,4 * hiddenLayerSize + 1));
  INDArray bf=biases.get(new NDArrayIndex(0),interval(hiddenLayerSize,2 * hiddenLayerSize));
  INDArray wo=inputWeights.get(NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize));
  INDArray wO=recurrentWeights.get(NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize));
  INDArray wOO=recurrentWeights.get(NDArrayIndex.all(),interval(4 * hiddenLayerSize + 1,4 * hiddenLayerSize + 2));
  INDArray bo=biases.get(new NDArrayIndex(0),interval(2 * hiddenLayerSize,3 * hiddenLayerSize));
  INDArray wg=inputWeights.get(NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize));
  INDArray wG=recurrentWeights.get(NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize));
  INDArray wGG=recurrentWeights.get(NDArrayIndex.all(),interval(4 * hiddenLayerSize + 2,4 * hiddenLayerSize + 3));
  INDArray bg=biases.get(new NDArrayIndex(0),interval(3 * hiddenLayerSize,4 * hiddenLayerSize));
  INDArray outputActivations=Nd4j.zeros(new int[]{miniBatchSize,hiddenLayerSize,timeSeriesLength});
  INDArray ifogZ=Nd4j.zeros(new int[]{miniBatchSize,4 * hiddenLayerSize,timeSeriesLength});
  INDArray ifogA=Nd4j.zeros(new int[]{miniBatchSize,4 * hiddenLayerSize,timeSeriesLength});
  INDArray memCellActivations=Nd4j.zeros(new int[]{miniBatchSize,hiddenLayerSize,timeSeriesLength});
  for (int t=0; t < timeSeriesLength; t++) {
    INDArray miniBatchData=(is2dInput ? input : input.tensorAlongDimension(t,1,0));
    INDArray prevOutputActivations=(t == 0 ? Nd4j.zeros(new int[]{miniBatchSize,hiddenLayerSize}) : outputActivations.tensorAlongDimension(t - 1,1,0));
    INDArray prevMemCellActivations=(t == 0 ? Nd4j.zeros(new int[]{miniBatchSize,hiddenLayerSize}) : memCellActivations.tensorAlongDimension(t - 1,1,0));
    INDArray inputActivations=miniBatchData.mmul(wi).addi(prevOutputActivations.mmul(wI)).addiRowVector(bi);
    INDArrayIndex[] iIndexes=new INDArrayIndex[]{NDArrayIndex.all(),interval(0,hiddenLayerSize)};
    ifogZ.tensorAlongDimension(t,1,0).put(iIndexes,inputActivations);
    ifogA.tensorAlongDimension(t,1,0).put(iIndexes,Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf.getActivationFunction(),inputActivations)));
    INDArray forgetGateActivations=miniBatchData.mmul(wf).addi(prevOutputActivations.mmul(wF)).addi(prevMemCellActivations.mmul(Nd4j.diag(wFF))).addiRowVector(bf);
    INDArrayIndex[] fIndexes=new INDArrayIndex[]{NDArrayIndex.all(),interval(hiddenLayerSize,2 * hiddenLayerSize)};
    ifogZ.tensorAlongDimension(t,1,0).put(fIndexes,forgetGateActivations);
    ifogA.tensorAlongDimension(t,1,0).put(fIndexes,Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",forgetGateActivations)));
    INDArray inputModGateActivations=miniBatchData.mmul(wg).addi(prevOutputActivations.mmul(wG)).addi(prevMemCellActivations.mmul(Nd4j.diag(wGG))).addiRowVector(bg);
    INDArrayIndex[] gIndexes=new INDArrayIndex[]{NDArrayIndex.all(),interval(3 * hiddenLayerSize,4 * hiddenLayerSize)};
    ifogZ.tensorAlongDimension(t,1,0).put(gIndexes,inputModGateActivations);
    ifogA.tensorAlongDimension(t,1,0).put(gIndexes,Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",inputModGateActivations)));
    INDArray currentMemoryCellActivations=forgetGateActivations.mul(prevMemCellActivations).addi(inputModGateActivations.mul(inputActivations));
    currentMemoryCellActivations=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf.getActivationFunction(),currentMemoryCellActivations));
    INDArray outputGateActivations=miniBatchData.mmul(wo).addi(prevOutputActivations.mmul(wO)).addi(currentMemoryCellActivations.mmul(Nd4j.diag(wOO))).addiRowVector(bo);
    INDArrayIndex[] oIndexes=new INDArrayIndex[]{NDArrayIndex.all(),interval(2 * hiddenLayerSize,3 * hiddenLayerSize)};
    ifogZ.tensorAlongDimension(t,1,0).put(oIndexes,outputGateActivations);
    ifogA.tensorAlongDimension(t,1,0).put(oIndexes,Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("sigmoid",outputGateActivations)));
    INDArray currHiddenUnitActivations=outputGateActivations.mul(currentMemoryCellActivations);
    outputActivations.tensorAlongDimension(t,1,0).assign(currHiddenUnitActivations);
    memCellActivations.tensorAlongDimension(t,1,0).assign(currentMemoryCellActivations);
  }
  return new INDArray[]{outputActivations,memCellActivations,ifogZ,ifogA};
}
