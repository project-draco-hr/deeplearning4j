{
  ModelInfo modelInfo=new ModelInfo();
  if (model instanceof ComputationGraph) {
    ComputationGraph graph=(ComputationGraph)model;
    List<String> inputs=graph.getConfiguration().getNetworkInputs();
    int x=0;
    for (    String input : inputs) {
      LayerInfo info=new LayerInfo();
      info.setId(0);
      info.setName(input);
      info.setY(0);
      info.setX(x);
      info.setLayerType("INPUT");
      info.setDescription(new Description());
      info.getDescription().setMainLine("Input layer");
      modelInfo.addLayer(info);
      x++;
    }
    GraphVertex[] vertices=graph.getVertices();
    List<String> needle=new ArrayList<>();
    for (int y=1; y < vertices.length; y++) {
      if (needle.isEmpty())       needle.addAll(inputs);
      List<LayerInfo> layersForGridY=flattenToY(modelInfo,vertices,needle,y);
      needle.clear();
      for (      LayerInfo layerInfo : layersForGridY) {
        needle.add(layerInfo.getName());
      }
      if (needle.isEmpty())       break;
    }
  }
 else   if (model instanceof MultiLayerNetwork) {
    MultiLayerNetwork network=(MultiLayerNetwork)model;
    int y=1;
    final int x=0;
    for (    Layer layer : network.getLayers()) {
      LayerInfo layerInfo=getLayerInfo(layer,x,y,y);
      layerInfo.addConnection(x,y + 1);
      modelInfo.addLayer(layerInfo);
      y++;
    }
    LayerInfo layerInfo=modelInfo.getLayerInfoByCoords(x,y - 1);
    layerInfo.dropConnections();
  }
 else   throw new IllegalStateException("Model [" + model.getClass().getCanonicalName() + "] doesn't looks like supported one.");
  return modelInfo;
}
