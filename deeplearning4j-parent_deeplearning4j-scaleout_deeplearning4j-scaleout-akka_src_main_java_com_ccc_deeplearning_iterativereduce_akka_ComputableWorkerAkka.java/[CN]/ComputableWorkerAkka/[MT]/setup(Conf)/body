{
  hiddenLayerSizes=conf.getIntsWithSeparator(LAYER_SIZES,",");
  numOuts=conf.getInt(OUT);
  numIns=conf.getInt(N_IN);
  numHiddenNeurons=conf.getIntsWithSeparator(LAYER_SIZES,",").length;
  seed=conf.getLong(SEED);
  if (conf.containsKey(USE_REGULARIZATION))   this.useRegularization=conf.getBoolean(USE_REGULARIZATION);
  if (conf.containsKey(MOMENTUM))   momentum=conf.getDouble(MOMENTUM);
  if (conf.containsKey(ACTIVATION))   this.activation=conf.getFunction(ACTIVATION);
  RandomGenerator rng=new MersenneTwister(conf.getLong(SEED));
  network=new BaseMultiLayerNetwork.Builder<>().numberOfInputs(numIns).numberOfOutPuts(numOuts).withActivation(activation).hiddenLayerSizes(hiddenLayerSizes).withRng(rng).useRegularization(useRegularization).withMomentum(momentum).withClazz(conf.getClazz(CLASS)).build();
  learningRate=conf.getDouble(LEARNING_RATE);
  preTrainEpochs=conf.getInt(PRE_TRAIN_EPOCHS);
  fineTuneEpochs=conf.getInt(FINE_TUNE_EPOCHS);
  corruptionLevel=conf.getDouble(CORRUPTION_LEVEL);
  extraParams=conf.loadParams(PARAMS);
}
