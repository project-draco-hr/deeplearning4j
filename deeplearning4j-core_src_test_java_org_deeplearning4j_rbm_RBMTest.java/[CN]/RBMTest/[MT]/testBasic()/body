{
  double[] data=new double[]{1,1,1,0,0,0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0};
  INDArray d=NDArrays.create(data,new int[]{7,6});
  RandomGenerator g=new MersenneTwister(123);
  RBM r=new RBM.Builder().numberOfVisible(d.columns()).numHidden(4).withRandom(g).build();
  r.trainTillConvergence(d,0.01,new Object[]{1,0.01,1000});
  INDArray v=new NDArray(new double[]{1,1,0,0,0,0,0,0,0,1,1,0},new int[]{2,6});
  log.info("Reconstruction " + r.reconstruct(v).toString());
  NeuralNetwork r2=r.clone();
  assertEquals(r2.getnVisible(),r.getnVisible());
  assertEquals(r2.getnHidden(),r.getnHidden());
  assertEquals(r2.getW(),r.getW());
  assertEquals(r2.gethBias(),r.gethBias());
  assertEquals(r2.getvBias(),r.getvBias());
  r2.trainTillConvergence(d,0.01,new Object[]{1,0.01,1000});
  log.info("Cross entropy " + r.getReConstructionCrossEntropy());
}
