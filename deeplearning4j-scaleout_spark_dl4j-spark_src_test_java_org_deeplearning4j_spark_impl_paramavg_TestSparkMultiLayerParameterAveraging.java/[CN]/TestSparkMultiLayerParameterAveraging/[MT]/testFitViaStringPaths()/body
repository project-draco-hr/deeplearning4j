{
  Path tempDir=Files.createTempDirectory("DL4J-testFitViaStringPaths");
  File tempDirF=tempDir.toFile();
  tempDirF.delete();
  int dataSetObjSize=5;
  int batchSizePerExecutor=25;
  DataSetIterator iter=new MnistDataSetIterator(dataSetObjSize,1000,false);
  int i=0;
  while (iter.hasNext()) {
    File nextFile=new File(tempDirF,i + ".bin");
    DataSet ds=iter.next();
    ds.save(nextFile);
  }
  System.out.println("Saved to: " + tempDirF.getAbsolutePath());
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().updater(Updater.RMSPROP).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(1).list().layer(0,new org.deeplearning4j.nn.conf.layers.DenseLayer.Builder().nIn(28 * 28).nOut(50).activation("tanh").build()).layer(1,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(50).nOut(10).activation("softmax").build()).pretrain(false).backprop(true).build();
  SparkDl4jMultiLayer sparkNet=new SparkDl4jMultiLayer(sc,conf,new ParameterAveragingTrainingMaster.Builder(numExecutors(),dataSetObjSize).batchSizePerWorker(batchSizePerExecutor).averagingFrequency(1).repartionData(Repartition.Always).build());
  sparkNet.setCollectTrainingStats(true);
  Configuration config=new Configuration();
  FileSystem hdfs=FileSystem.get(tempDir.toUri(),config);
  RemoteIterator<LocatedFileStatus> fileIter=hdfs.listFiles(new org.apache.hadoop.fs.Path(tempDir.toString()),false);
  while (fileIter.hasNext()) {
    System.out.println(fileIter.next().getPath());
  }
}
