{
  int dataSetObjSize=5;
  int batchSizePerExecutor=25;
  List<DataSet> list=new ArrayList<>();
  DataSetIterator iter=new MnistDataSetIterator(dataSetObjSize,1000,false);
  while (iter.hasNext()) {
    list.add(iter.next());
  }
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().updater(Updater.RMSPROP).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(1).list().layer(0,new org.deeplearning4j.nn.conf.layers.DenseLayer.Builder().nIn(28 * 28).nOut(50).activation("tanh").build()).layer(1,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(50).nOut(10).activation("softmax").build()).pretrain(false).backprop(true).build();
  SparkDl4jMultiLayer sparkNet=new SparkDl4jMultiLayer(sc,conf,new ParameterAveragingTrainingMaster.Builder(numExecutors(),dataSetObjSize).batchSizePerWorker(batchSizePerExecutor).averagingFrequency(1).repartionData(Repartition.Always).build());
  sparkNet.setCollectTrainingStats(true);
  JavaRDD<DataSet> rdd=sc.parallelize(list);
  sparkNet.fit(rdd);
  SparkTrainingStats stats=sparkNet.getSparkTrainingStats();
  List<EventStats> mapPartitionStats=stats.getValue("ParameterAveragingMasterMapPartitionsTimesMs");
  int numSplits=list.size() * dataSetObjSize / (numExecutors() * batchSizePerExecutor);
  assertEquals(numSplits,mapPartitionStats.size());
  List<EventStats> workerFitStats=stats.getValue("ParameterAveragingWorkerFitTimesMs");
  for (  EventStats e : workerFitStats) {
    ExampleCountEventStats eces=(ExampleCountEventStats)e;
    System.out.println(eces.getTotalExampleCount());
  }
  for (  EventStats e : workerFitStats) {
    ExampleCountEventStats eces=(ExampleCountEventStats)e;
    assertEquals(batchSizePerExecutor,eces.getTotalExampleCount());
  }
}
