{
  Path tempDir=Files.createTempDirectory("DL4J-testFitViaStringPathsCG");
  Path tempDir2=Files.createTempDirectory("DL4J-testFitViaStringPathsCG-MDS");
  File tempDirF=tempDir.toFile();
  File tempDirF2=tempDir2.toFile();
  tempDirF.deleteOnExit();
  tempDirF2.deleteOnExit();
  int dataSetObjSize=5;
  int batchSizePerExecutor=25;
  DataSetIterator iter=new MnistDataSetIterator(dataSetObjSize,1000,false);
  int i=0;
  while (iter.hasNext()) {
    File nextFile=new File(tempDirF,i + ".bin");
    File nextFile2=new File(tempDirF2,i + ".bin");
    DataSet ds=iter.next();
    MultiDataSet mds=new MultiDataSet(ds.getFeatures(),ds.getLabels());
    ds.save(nextFile);
    mds.save(nextFile2);
    i++;
  }
  System.out.println("Saved to: " + tempDirF.getAbsolutePath());
  System.out.println("Saved to: " + tempDirF2.getAbsolutePath());
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().updater(Updater.RMSPROP).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(1).graphBuilder().addInputs("in").addLayer("0",new org.deeplearning4j.nn.conf.layers.DenseLayer.Builder().nIn(28 * 28).nOut(50).activation("tanh").build(),"in").addLayer("1",new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(50).nOut(10).activation("softmax").build(),"0").setOutputs("1").pretrain(false).backprop(true).build();
  SparkComputationGraph sparkNet=new SparkComputationGraph(sc,conf,new ParameterAveragingTrainingMaster.Builder(numExecutors(),dataSetObjSize).workerPrefetchNumBatches(5).workerPrefetchNumBatches(0).batchSizePerWorker(batchSizePerExecutor).averagingFrequency(1).repartionData(Repartition.Always).build());
  sparkNet.setCollectTrainingStats(true);
  Configuration config=new Configuration();
  FileSystem hdfs=FileSystem.get(tempDir.toUri(),config);
  RemoteIterator<LocatedFileStatus> fileIter=hdfs.listFiles(new org.apache.hadoop.fs.Path(tempDir.toString()),false);
  List<String> paths=new ArrayList<>();
  while (fileIter.hasNext()) {
    String path=fileIter.next().getPath().toString();
    paths.add(path);
  }
  INDArray paramsBefore=sparkNet.getNetwork().params().dup();
  JavaRDD<String> pathRdd=sc.parallelize(paths);
  sparkNet.fitPaths(pathRdd);
  INDArray paramsAfter=sparkNet.getNetwork().params().dup();
  assertNotEquals(paramsBefore,paramsAfter);
  SparkTrainingStats stats=sparkNet.getSparkTrainingStats();
  System.out.println(stats.statsAsString());
  config=new Configuration();
  hdfs=FileSystem.get(tempDir2.toUri(),config);
  fileIter=hdfs.listFiles(new org.apache.hadoop.fs.Path(tempDir2.toString()),false);
  paths=new ArrayList<>();
  while (fileIter.hasNext()) {
    String path=fileIter.next().getPath().toString();
    paths.add(path);
  }
  paramsBefore=sparkNet.getNetwork().params().dup();
  pathRdd=sc.parallelize(paths);
  sparkNet.fitPathsMultiDataSet(pathRdd);
  paramsAfter=sparkNet.getNetwork().params().dup();
  assertNotEquals(paramsBefore,paramsAfter);
  stats=sparkNet.getSparkTrainingStats();
  System.out.println(stats.statsAsString());
}
