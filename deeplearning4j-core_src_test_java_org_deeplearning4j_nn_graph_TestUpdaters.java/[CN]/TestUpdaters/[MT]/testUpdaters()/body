{
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(Updater.NESTEROVS).momentum(0.9).graphBuilder().addInputs("input").addLayer("l0_cnn",new ConvolutionLayer.Builder(new int[]{3,3},new int[]{1,1},new int[]{1,1}).nOut(100).build(),"input").addLayer("l1_max",new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX,new int[]{2,2},new int[]{2,2},new int[]{1,1}).build(),"l0_cnn").addLayer("l2_cnn",new ConvolutionLayer.Builder(new int[]{3,3},new int[]{2,2},new int[]{1,1}).nOut(200).build(),"l1_max").addLayer("l3_max",new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX,new int[]{3,3},new int[]{2,2},new int[]{1,1}).build(),"l2_cnn").addLayer("l4_fc",new DenseLayer.Builder().nOut(1024).build(),"l3_max").addLayer("l5_out",new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nOut(10).activation("softmax").build(),"l4_fc").setOutputs("l5_out").backprop(true).pretrain(false).setInputTypes(InputType.convolutional(40,40,1)).build();
  Map<String,GraphVertex> map=conf.getVertices();
  LayerVertex l0_cnn=(LayerVertex)map.get("l0_cnn");
  LayerVertex l2_cnn=(LayerVertex)map.get("l2_cnn");
  LayerVertex l4_fc=(LayerVertex)map.get("l4_fc");
  LayerVertex l5_out=(LayerVertex)map.get("l5_out");
  assertEquals(1,((FeedForwardLayer)l0_cnn.getLayerConf().getLayer()).getNIn());
  assertEquals(100,((FeedForwardLayer)l2_cnn.getLayerConf().getLayer()).getNIn());
  assertEquals(6 * 6 * 200,((FeedForwardLayer)l4_fc.getLayerConf().getLayer()).getNIn());
  assertEquals(1024,((FeedForwardLayer)l5_out.getLayerConf().getLayer()).getNIn());
  ComputationGraph g=new ComputationGraph(conf);
  g.init();
  g.initGradientsView();
  ComputationGraphUpdater updater=g.getUpdater();
  Field layerUpdatersField=updater.getClass().getDeclaredField("layerUpdaters");
  layerUpdatersField.setAccessible(true);
  org.deeplearning4j.nn.api.Updater[] layerUpdaters=(org.deeplearning4j.nn.api.Updater[])layerUpdatersField.get(updater);
  Field layerUpdatersMapField=updater.getClass().getDeclaredField("layerUpdatersMap");
  layerUpdatersMapField.setAccessible(true);
  Map<String,Integer> layerUpdatersMap=(Map<String,Integer>)layerUpdatersMapField.get(updater);
  org.deeplearning4j.nn.api.Layer[] layers=g.getLayers();
  for (  org.deeplearning4j.nn.api.Layer l : layers) {
    String layerName=l.conf().getLayer().getLayerName();
    int nParams=l.numParams();
    Map<String,INDArray> paramTable=l.paramTable();
    Map<String,Integer> parameterSizeCounts=new LinkedHashMap<>();
    for (    Map.Entry<String,INDArray> e : paramTable.entrySet()) {
      parameterSizeCounts.put(e.getKey(),e.getValue().length());
    }
    int updaterIdx=layerUpdatersMap.get(layerName);
    org.deeplearning4j.nn.api.Updater u=layerUpdaters[updaterIdx];
    NesterovsUpdater nu=(NesterovsUpdater)u;
    Field updaterForVariableField=BaseUpdater.class.getDeclaredField("updaterForVariable");
    updaterForVariableField.setAccessible(true);
    Map<String,GradientUpdater> updaterForVariable=(Map<String,GradientUpdater>)updaterForVariableField.get(nu);
    Map<String,Integer> updaterStateSizeCounts=new HashMap<>();
    for (    Map.Entry<String,GradientUpdater> entry : updaterForVariable.entrySet()) {
      GradientUpdater gu=entry.getValue();
      Nesterovs nesterovs=(Nesterovs)gu;
      INDArray v=nesterovs.getV();
      int length=(v == null ? -1 : v.length());
      updaterStateSizeCounts.put(entry.getKey(),length);
    }
    if (l.numParams() == 0) {
      assertEquals(0,updaterForVariable.size());
    }
    System.out.println(layerName + "\t" + nParams+ "\t"+ parameterSizeCounts+ "\t Updater size: "+ updaterStateSizeCounts);
    for (    String s : parameterSizeCounts.keySet()) {
      int paramSize=parameterSizeCounts.get(s);
      int updaterSize=updaterStateSizeCounts.get(s);
      assertEquals(layerName + "/" + s,paramSize,updaterSize);
    }
  }
  INDArray in=Nd4j.create(2,1,40,40);
  INDArray l=Nd4j.create(2,10);
  DataSet ds=new DataSet(in,l);
  g.fit(ds);
}
