{
  INDArray weights=getParam(ConvolutionParamInitializer.WEIGHT_KEY);
  INDArray bias=getParam(ConvolutionParamInitializer.BIAS_KEY);
  if (conf.isUseDropConnect() && training) {
    if (conf.getLayer().getDropOut() > 0) {
      weights=Dropout.applyDropConnect(this,ConvolutionParamInitializer.WEIGHT_KEY);
    }
  }
  int miniBatch=input.size(0);
  int inH=input.size(2);
  int inW=input.size(3);
  int outDepth=weights.size(0);
  int inDepth=weights.size(1);
  int kH=weights.size(2);
  int kW=weights.size(3);
  int[] kernel=layerConf().getKernelSize();
  int[] strides=layerConf().getStride();
  int[] pad=layerConf().getPadding();
  int outH=Convolution.outSize(inH,kernel[0],strides[0],pad[0],false);
  int outW=Convolution.outSize(inW,kernel[1],strides[1],pad[1],false);
  INDArray col=Nd4j.create(new int[]{miniBatch,outH,outW,inDepth,kH,kW},'c');
  INDArray col2=col.permute(0,3,4,5,1,2);
  Convolution.im2col(input,kH,kW,strides[0],strides[1],pad[0],pad[1],false,col2);
  INDArray reshapedCol=Shape.newShapeNoCopy(col,new int[]{miniBatch * outH * outW,inDepth * kH * kW},false);
  if (reshapedCol == null)   throw new RuntimeException("Could not reshape without copy");
  if (weights.ordering() != 'c')   throw new RuntimeException("Weights not c order");
  INDArray permutedW=weights.permute(3,2,1,0);
  if (permutedW.ordering() != 'f')   throw new RuntimeException("Not 'f' order after reshaping");
  INDArray reshapedW=Shape.newShapeNoCopy(permutedW,new int[]{kW * kH * inDepth,outDepth},true);
  if (reshapedW == null) {
    throw new RuntimeException("Could not reshape weights");
  }
  if (reshapedW.ordering() != 'f')   throw new RuntimeException("Not 'f' order after reshaping");
  INDArray z=Nd4j.gemm(reshapedCol,reshapedW,false,false);
  if (z.ordering() != 'f')   throw new RuntimeException();
  if (z.rows() != miniBatch * outH * outW)   throw new RuntimeException();
  if (z.columns() != outDepth)   throw new RuntimeException();
  z=Shape.newShapeNoCopy(z,new int[]{outW,outH,miniBatch,outDepth},true);
  if (z == null)   throw new RuntimeException();
  INDArray temp=z.dup('f');
  INDArray temp2=temp.permute(2,3,1,0);
  for (int i=0; i < temp2.size(0); i++) {
    for (int j=0; j < temp2.size(1); j++) {
      System.out.println("mb=" + i + ", depth="+ j);
      System.out.println(temp2.get(NDArrayIndex.point(i),NDArrayIndex.point(j),NDArrayIndex.all(),NDArrayIndex.all()));
    }
  }
  BroadcastOp op=new BroadcastAddOp(z,bias,z,3);
  Nd4j.getExecutioner().exec(op);
  INDArray out=z.permute(2,3,1,0);
  out=out.dup('c');
  return out;
}
