{
  int featureMaps=ConvolutionUtils.numFeatureMap(conf);
  INDArray ret=Nd4j.create(conf.getFilterSize());
  INDArray bias=getParam(ConvolutionParamInitializer.CONVOLUTION_BIAS);
  INDArray filters=getParam(ConvolutionParamInitializer.CONVOLUTION_WEIGHTS);
  for (int i=0; i < featureMaps; i++) {
    INDArray featureMap=Nd4j.create(ArrayUtil.replace(conf.getFilterSize(),1,1));
    for (int j=0; j < featureMap.slices(); j++) {
      featureMap.addi(Nd4j.getConvolution().convn(input.slice(j),filters.slice(i).slice(j),Convolution.Type.VALID));
    }
    featureMap.addi(bias.slice(i));
    ret.putSlice(i,Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(conf.getActivationFunction(),featureMap)));
  }
  return ret;
}
