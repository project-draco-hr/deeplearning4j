{
  if (conf.getDropOut() > 0.0 && !conf.isUseDropConnect() && training) {
    input=Dropout.applyDropout(input,conf.getDropOut(),dropoutMask);
  }
  INDArray kernelWeights=getParam(ConvolutionParamInitializer.WEIGHT_KEY);
  INDArray bias=getParam(ConvolutionParamInitializer.BIAS_KEY);
  if (conf.getDropOut() > 0 && conf.isUseDropConnect()) {
    kernelWeights=kernelWeights.mul(Nd4j.getDistributions().createBinomial(1,conf.getDropOut()).sample(kernelWeights.shape()));
  }
  INDArray featureMaps=createFeatureMaps();
  INDArray activation=calculateActivation(featureMaps,kernelWeights,bias);
  return Nd4j.rollAxis(activation,3,1);
}
