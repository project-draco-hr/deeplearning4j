{
  if (conf.getDropOut() > 0.0 && !conf.isUseDropConnect() && training) {
    input=Dropout.applyDropout(input,conf.getDropOut(),dropoutMask);
  }
  int numFeatureMaps=conf.getNOut();
  int inputChannels=conf.getNIn();
  INDArray ret=Nd4j.create(Ints.concat(new int[]{input.slices(),numFeatureMaps},conf.getKernelSize()));
  INDArray bias=getParam(ConvolutionParamInitializer.CONVOLUTION_BIAS);
  INDArray kernelWeights=getParam(ConvolutionParamInitializer.CONVOLUTION_WEIGHTS);
  kernelWeights=kernelWeights.reshape(Ints.concat(kernelWeights.shape(),new int[]{1,1}));
  if (conf.getDropOut() > 0 && conf.isUseDropConnect()) {
    kernelWeights=kernelWeights.mul(Nd4j.getDistributions().createBinomial(1,conf.getDropOut()).sample(kernelWeights.shape()));
  }
  INDArray convolved=Convolution.im2col(input,conf.getKernelSize(),conf.getStride(),conf.getPadding());
  INDArray activation=Nd4j.tensorMmul(convolved,kernelWeights,new int[][]{{1,2,3},{1,2,3}});
  activation=activation.reshape(activation.shape()[0],activation.shape()[1],activation.shape()[2],activation.shape()[3]);
  bias=bias.broadcast(activation.shape());
  activation.addi(bias.broadcast(activation.shape()));
  return Nd4j.rollAxis(activation,3,1);
}
