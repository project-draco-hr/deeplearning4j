{
  this.conf=conf;
  this.batchActor=batchActor;
  try {
    this.stateTracker=stateTracker;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  stateTracker.runPreTrainIterations(conf.getInt(NUM_PASSES,1));
  mediator.tell(new DistributedPubSubMediator.Subscribe(MasterActor.MASTER,getSelf()),getSelf());
  mediator.tell(new DistributedPubSubMediator.Subscribe(MasterActor.FINISH,getSelf()),getSelf());
  forceNextPhase=context().system().scheduler().schedule(Duration.create(10,TimeUnit.SECONDS),Duration.create(10,TimeUnit.SECONDS),new Runnable(){
    @Override public void run(){
      if (stateTracker.isDone())       return;
      try {
        List<Job> currentJobs=stateTracker.currentJobs();
        log.info("Status check on next iteration");
        Collection<String> updates=stateTracker.workerUpdates();
        if (currentJobs.size() == 1 && oneDown != null) {
          long curr=TimeUnit.MILLISECONDS.toMinutes(System.currentTimeMillis() - oneDown.get());
          if (curr >= 5) {
            stateTracker.currentJobs().clear();
            oneDown=null;
            log.info("Clearing out stale jobs");
          }
        }
 else         if (currentJobs.size() == 1) {
          log.info("Marking start of stale jobs");
          oneDown=new AtomicLong(System.currentTimeMillis());
        }
        if (updates.size() >= stateTracker.workers().size() || currentJobs.isEmpty())         nextBatch();
 else         log.info("Still waiting on next batch, so far we have updates of size: " + updates.size() + " out of "+ stateTracker.workers().size());
        log.info("Current jobs left " + currentJobs);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
,context().dispatcher());
  this.clearStateWorkers=context().system().scheduler().schedule(Duration.create(1,TimeUnit.MINUTES),Duration.create(1,TimeUnit.MINUTES),new Runnable(){
    @Override public void run(){
      if (stateTracker.isDone())       return;
      try {
        long now=System.currentTimeMillis();
        Map<String,Long> heartbeats=MasterActor.this.stateTracker.getHeartBeats();
        for (        String key : heartbeats.keySet()) {
          long lastChecked=heartbeats.get(key);
          long diff=now - lastChecked;
          long seconds=TimeUnit.MILLISECONDS.toSeconds(diff);
          if (seconds >= 120) {
            log.info("Removing stale worker " + key);
            MasterActor.this.stateTracker.removeWorker(key);
          }
        }
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
,context().dispatcher());
}
