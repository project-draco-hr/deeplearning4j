{
  log.info("Starting workers");
  ActorSystem system=context().system();
  RoundRobinPool pool=new RoundRobinPool(Runtime.getRuntime().availableProcessors());
  String performerFactoryClazz=conf.get(WorkerPerformerFactory.WORKER_PERFORMER);
  try {
    Class<? extends WorkerPerformerFactory> clazz=(Class<? extends WorkerPerformerFactory>)Class.forName(performerFactoryClazz);
    WorkerPerformerFactory factory=clazz.newInstance();
    WorkerPerformer performer=factory.create(conf);
    waitForWorkers=conf.getBoolean(WAIT_FOR_WORKERS,true);
    secondsPoll=conf.getInt(POLL_FOR_WORK,10);
    Props p=pool.props(WorkerActor.propsFor(conf,stateTracker,performer));
    p=ClusterSingletonManager.defaultProps(p,"master",PoisonPill.getInstance(),"master");
    system.actorOf(p,"worker");
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
