{
  Map<String,Map> newGrad=new LinkedHashMap<>();
  try {
    if (meanMagHistoryParams.size() == 0) {
      int maxLayerIdx=-1;
      for (      String s : grad.keySet()) {
        maxLayerIdx=Math.max(maxLayerIdx,indexFromString(s));
      }
      if (maxLayerIdx == -1)       maxLayerIdx=0;
      for (int i=0; i <= maxLayerIdx; i++) {
        meanMagHistoryParams.add(new LinkedHashMap<String,List<Double>>());
        meanMagHistoryUpdates.add(new LinkedHashMap<String,List<Double>>());
      }
    }
    for (    Map.Entry<String,INDArray> entry : grad.entrySet()) {
      String param=entry.getKey();
      String newName;
      if (Character.isDigit(param.charAt(0)))       newName="param_" + param;
 else       newName=param;
      HistogramBin histogram=new HistogramBin.Builder(entry.getValue().dup()).setBinCount(20).setRounding(6).build();
      newGrad.put(newName,histogram.getData());
      int idx=indexFromString(newName);
      if (idx >= meanMagHistoryUpdates.size()) {
        meanMagHistoryUpdates.add(new LinkedHashMap<String,List<Double>>());
        idx=indexFromString(newName);
      }
      Map<String,List<Double>> map=meanMagHistoryUpdates.get(idx);
      List<Double> list=map.get(newName);
      if (list == null) {
        list=new ArrayList<>();
        map.put(newName,list);
      }
      double meanMag=entry.getValue().norm1Number().doubleValue() / entry.getValue().length();
      list.add(meanMag);
    }
  }
 catch (  Exception e) {
    log.debug("Skipping gradients update");
  }
  Map<String,Map> newParams=new LinkedHashMap<>();
  for (  Map.Entry<String,INDArray> entry : params.entrySet()) {
    String param=entry.getKey();
    String newName;
    if (Character.isDigit(param.charAt(0)))     newName="param_" + param;
 else     newName=param;
    HistogramBin histogram=new HistogramBin.Builder(entry.getValue().dup()).setBinCount(20).setRounding(6).build();
    newParams.put(newName,histogram.getData());
    int idx=indexFromString(newName);
    if (idx >= meanMagHistoryParams.size()) {
      meanMagHistoryParams.add(new LinkedHashMap<String,List<Double>>());
      idx=indexFromString(newName);
    }
    Map<String,List<Double>> map=meanMagHistoryParams.get(idx);
    List<Double> list=map.get(newName);
    if (list == null) {
      list=new ArrayList<>();
      map.put(newName,list);
    }
    double meanMag=entry.getValue().norm1Number().doubleValue() / entry.getValue().length();
    list.add(meanMag);
  }
  scoreHistory.add(score);
  CompactModelAndGradient g=new CompactModelAndGradient();
  g.setGradients(newGrad);
  g.setParameters(newParams);
  g.setScore(score);
  g.setScores(scoreHistory);
  g.setPath(subPath);
  g.setUpdateMagnitudes(meanMagHistoryUpdates);
  g.setParamMagnitudes(meanMagHistoryParams);
  g.setLayerNames(layerNames);
  g.setLastUpdateTime(System.currentTimeMillis());
  WebReporter.getInstance().queueReport(target,Entity.entity(g,MediaType.APPLICATION_JSON));
  if (openBrowser && firstIteration) {
    StringBuilder builder=new StringBuilder(connectionInfo.getFullAddress());
    builder.append(subPath).append("?sid=").append(connectionInfo.getSessionId());
    UiUtils.tryOpenBrowser(builder.toString(),log);
    firstIteration=false;
  }
}
