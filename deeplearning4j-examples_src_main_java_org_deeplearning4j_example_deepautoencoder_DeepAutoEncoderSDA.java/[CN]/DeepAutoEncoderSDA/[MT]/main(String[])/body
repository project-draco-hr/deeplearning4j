{
  DataSetIterator iter=new MnistDataSetIterator(10,10,false);
  int codeLayer=3;
  Map<Integer,Double> layerLearningRates=new HashMap<>();
  layerLearningRates.put(codeLayer,1e-3);
  RandomGenerator rng=new MersenneTwister(123);
  StackedDenoisingAutoEncoder dbn=new StackedDenoisingAutoEncoder.Builder().learningRateForLayer(layerLearningRates).hiddenLayerSizes(new int[]{1000,500,250,30}).withRng(rng).activateForLayer(Collections.singletonMap(3,Activations.rectifiedLinear())).numberOfInputs(784).sampleFromHiddenActivations(true).lineSearchBackProp(true).useRegularization(true).withL2(2e-4).withOutputActivationFunction(Activations.linear()).numberOfOutPuts(784).withMomentum(0.5).withOutputLossFunction(OutputLayer.LossFunction.SQUARED_LOSS).build();
  while (iter.hasNext()) {
    DataSet next=iter.next();
    dbn.pretrain(next.getFirst(),new Object[]{0.3,1e-1,100});
  }
  iter.reset();
  while (iter.hasNext()) {
    DataSet next=iter.next();
    dbn.finetune(next.getFirst(),1e-1,1000);
  }
  iter.reset();
  while (iter.hasNext()) {
    DataSet data=iter.next();
    MultiLayerNetworkReconstructionRender r=new MultiLayerNetworkReconstructionRender(data.iterator(10),dbn,4);
    r.draw();
  }
  DeepAutoEncoder encoder=new DeepAutoEncoder(dbn);
  encoder.setRoundCodeLayerInput(true);
  encoder.setSampleFromHiddenActivations(true);
  encoder.setVisibleUnit(RBM.VisibleUnit.BINARY);
  encoder.setHiddenUnit(RBM.HiddenUnit.GAUSSIAN);
  encoder.setCodeLayerActivationFunction(Activations.linear());
  encoder.setOutputLayerActivation(Activations.sigmoid());
  encoder.setOutputLayerLossFunction(OutputLayer.LossFunction.RMSE_XENT);
  log.info("Arch " + RBMUtil.architecture(encoder));
  iter.reset();
  while (iter.hasNext()) {
    DataSet data=iter.next();
    log.info("Fine tune " + data.labelDistribution());
    encoder.finetune(data.getFirst(),1e-3,10);
    DeepAutoEncoderDataSetReconstructionRender r=new DeepAutoEncoderDataSetReconstructionRender(data.iterator(data.numExamples()),encoder,28,28);
    r.setPicDraw(MatrixTransformations.multiplyScalar(255));
    r.draw();
  }
}
