{
  DataSetIterator iter=new MultipleEpochsIterator(50,new ReconstructionDataSetIterator(new MnistDataSetIterator(100,100,false)));
  int codeLayer=3;
  Map<Integer,Double> layerLearningRates=new HashMap<>();
  layerLearningRates.put(codeLayer,1e-1);
  RandomGenerator rng=new MersenneTwister(123);
  StackedDenoisingAutoEncoder dbn=new StackedDenoisingAutoEncoder.Builder().learningRateForLayer(layerLearningRates).constrainGradientToUnitNorm(true).hiddenLayerSizes(new int[]{1000,500,250,30}).withRng(rng).activateForLayer(Collections.singletonMap(3,Activations.sigmoid())).numberOfInputs(784).sampleFromHiddenActivations(false).lineSearchBackProp(false).useRegularization(true).forceEpochs().withL2(2e-5).resetAdaGradIterations(10).withOutputActivationFunction(Activations.sigmoid()).numberOfOutPuts(784).withOutputLossFunction(OutputLayer.LossFunction.SQUARED_LOSS).build();
  dbn.pretrain(iter,new Object[]{0.3,1e-1,10});
  DeepAutoEncoder a=new DeepAutoEncoder.Builder().withEncoder(dbn).build();
  a.finetune(iter,1e-2,10);
  iter.reset();
  while (iter.hasNext()) {
    DataSet data=iter.next();
    DeepAutoEncoderDataSetReconstructionRender r=new DeepAutoEncoderDataSetReconstructionRender(data.iterator(data.numExamples()),a,28,28);
    r.setPicDraw(MatrixTransformations.multiplyScalar(255));
    r.draw();
  }
}
