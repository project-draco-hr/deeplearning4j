{
  String paramName;
  INDArray paramVal, gradient2;
  GradientUpdater updater;
  preApply(layer,gradient,iteration);
  for (  Map.Entry<String,INDArray> gradientPair : gradient.gradientForVariable().entrySet()) {
    paramName=gradientPair.getKey();
    paramVal=gradientPair.getValue();
    LearningRatePolicy decay=layer.conf().getLearningRatePolicy();
    if (decay != LearningRatePolicy.None || layer.conf().getLayer().getUpdater() == org.deeplearning4j.nn.conf.Updater.NESTEROVS)     applyLrDecayPolicy(decay,layer,iteration,paramName);
    updater=init(paramName,paramVal,layer);
    gradient2=updater.getGradient(paramVal,iteration);
    postApply(layer,gradient2,paramName,miniBatchSize);
    gradient.setGradientFor(paramName,gradient2);
  }
}
