{
  DoubleMatrix d=DoubleMatrix.linspace(1,8,8);
  ComplexNDArray d2=ComplexNDArray.wrap(new ComplexDoubleMatrix(d));
  ComplexDoubleMatrix fft=FFT.fft(d2);
  assertEquals(8,fft.length);
  ComplexDoubleMatrix test=new ComplexDoubleMatrix(new double[]{36,0,-4,9.65685425,-4,4,-4,1.65685425,-4,0,-4,-1.65685425,-4,-4,-4,-9.65685425}).reshape(1,8);
  assertEquals(fft.rows,test.rows);
  assertEquals(fft.columns,test.columns);
  assertEquals(fft,test);
  ComplexNDArray three=new ComplexNDArray(new NDArray(new double[]{3,4},new int[]{2}));
  ComplexNDArray threeAnswer=new ComplexNDArray(new double[]{7,0,-1,0},new int[]{2});
  ComplexNDArray fftedThree=FFT.fft(three);
  assertEquals(threeAnswer,fftedThree);
  ComplexNDArray anotherTest=new ComplexNDArray(new NDArray(new double[]{3,7,11,15,19},new int[]{5}));
  ComplexNDArray assertion=new ComplexNDArray(new double[]{55,0,-10,13.7638192,-10,3.24919696,-10,-3.24919696,-10,-13.7638192},new int[]{5});
  assertEquals(FFT.fft(anotherTest),assertion);
  ComplexNDArray one=ComplexNDArray.scalar(1);
  ComplexNDArray fftedOne=FFT.fft(d2,1);
  assertEquals(one,fftedOne);
}
