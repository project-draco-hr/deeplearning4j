{
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).list(4).layer(0,new DenseLayer.Builder().nIn(9).nOut(10).build()).layer(1,new RBM.Builder().nIn(10).nOut(11).build()).layer(2,new AutoEncoder.Builder(0.5).nIn(11).nOut(12).build()).layer(3,new OutputLayer.Builder(LossFunction.MSE).nIn(12).nOut(12).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  INDArray initParams=net.params().dup();
  Map<String,INDArray> initParams2=net.paramTable();
  net.setParams(net.params());
  INDArray initParamsAfter=net.params();
  Map<String,INDArray> initParams2After=net.paramTable();
  for (  String s : initParams2.keySet()) {
    assertTrue("Params differ: " + s,initParams2.get(s).equals(initParams2After.get(s)));
  }
  assertTrue(initParams.equals(initParamsAfter));
  INDArray randomParams=Nd4j.rand(initParams.shape());
  net.setParams(randomParams.dup());
  assertTrue(net.params().equals(randomParams));
}
