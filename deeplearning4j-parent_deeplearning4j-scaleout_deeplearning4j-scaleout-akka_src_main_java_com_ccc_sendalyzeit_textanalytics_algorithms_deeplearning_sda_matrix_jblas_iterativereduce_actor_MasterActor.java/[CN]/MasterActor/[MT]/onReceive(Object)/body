{
  if (message instanceof EpochDoneListener) {
    listener=(EpochDoneListener)message;
    log.info("Set listener");
  }
 else   if (message instanceof UpdateableMatrix) {
    UpdateableMatrix up=(UpdateableMatrix)message;
    updates.add(up);
    if (updates.size() == workers.size()) {
      masterMatrix=this.compute(updates,updates);
      if (listener != null)       listener.epochComplete(masterMatrix);
      updates.clear();
    }
  }
 else   if (message instanceof UpdateMessage) {
    for (    ActorRef worker : workers) {
      worker.tell(message,getSelf());
    }
  }
 else   if (message instanceof List || message instanceof Pair) {
    if (message instanceof List) {
      List<Pair<DoubleMatrix,DoubleMatrix>> list=(List<Pair<DoubleMatrix,DoubleMatrix>>)message;
      int split=conf.getInt(SPLIT);
      List<List<Pair<DoubleMatrix,DoubleMatrix>>> splitList=Lists.partition(list,split);
      for (int i=0; i < splitList.size(); i++) {
        workers.get(i).tell(splitList.get(i),getSelf());
      }
    }
 else     if (message instanceof Pair) {
      Pair<DoubleMatrix,DoubleMatrix> pair=(Pair<DoubleMatrix,DoubleMatrix>)message;
      List<DoubleMatrix> inputs=pair.getFirst().rowsAsList();
      List<DoubleMatrix> labels=pair.getSecond().rowsAsList();
      List<Pair<DoubleMatrix,DoubleMatrix>> pairs=new ArrayList<>();
      for (int i=0; i < inputs.size(); i++) {
        pairs.add(new Pair<>(inputs.get(i),labels.get(i)));
      }
      int split=conf.getInt(SPLIT);
      List<List<Pair<DoubleMatrix,DoubleMatrix>>> splitList=Lists.partition(pairs,split);
      if (splitList.size() >= workers.size()) {
        log.info("Adding workers to accomadate split and load...");
        while (workers.size() < splitList.size()) {
          Conf c=conf.copy();
          c.put(FINE_TUNE_EPOCHS,1);
          c.put(PRE_TRAIN_EPOCHS,1);
          workers.add(context().actorOf(Props.create(new WorkerActor.WorkerActorFactory(c))));
        }
      }
      for (int i=0; i < splitList.size(); i++) {
        workers.get(i).tell(splitList.get(i),getSelf());
      }
    }
  }
 else   unhandled(message);
}
