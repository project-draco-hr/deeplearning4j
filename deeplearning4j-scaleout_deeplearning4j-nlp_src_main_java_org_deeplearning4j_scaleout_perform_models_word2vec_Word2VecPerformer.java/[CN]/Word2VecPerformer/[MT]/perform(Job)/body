{
  if (job.getWork() instanceof Word2VecWork) {
    double numWordsSoFar=stateTracker.count(NUM_WORDS_SO_FAR);
    Word2VecWork work=(Word2VecWork)job.getWork();
    List<List<VocabWord>> sentences=work.getSentences();
    double alpha2=Math.max(minAlpha,alpha * (1 - (1.0 * numWordsSoFar / (double)totalWords)));
    int totalNewWords=0;
    for (    List<VocabWord> sentence : sentences) {
      trainSentence(sentence,work,alpha2);
      totalNewWords+=sentence.size();
    }
    double newWords=totalNewWords + numWordsSoFar;
    double diff=Math.abs(newWords - lastChecked);
    if (diff >= 10000) {
      lastChecked=(int)newWords;
      log.info("Words so far " + newWords + " out of "+ totalWords);
    }
    job.setResult((Serializable)Arrays.asList(work.addDeltas()));
    stateTracker.increment(NUM_WORDS_SO_FAR,totalNewWords);
  }
 else   if (job.getWork() instanceof Collection) {
    double numWordsSoFar=stateTracker.count(NUM_WORDS_SO_FAR);
    Collection<Word2VecWork> coll=(Collection<Word2VecWork>)job.getWork();
    double alpha2=Math.max(minAlpha,alpha * (1 - (1.0 * numWordsSoFar / (double)totalWords)));
    int totalNewWords=0;
    List<Word2VecResult> deltas=new ArrayList<>();
    for (    Word2VecWork work : coll) {
      List<List<VocabWord>> sentences=work.getSentences();
      for (      List<VocabWord> sentence : sentences) {
        trainSentence(sentence,work,alpha2);
        totalNewWords+=sentence.size();
        deltas.add(work.addDeltas());
      }
    }
    double newWords=totalNewWords + numWordsSoFar;
    double diff=Math.abs(newWords - lastChecked);
    if (diff >= 10000) {
      lastChecked=(int)newWords;
      log.info("Words so far " + newWords + " out of "+ totalWords);
    }
    job.setResult((Serializable)deltas);
    stateTracker.increment(NUM_WORDS_SO_FAR,totalNewWords);
  }
}
