{
  INDArray h1Mean=propUp(v);
  INDArray h1Sample;
switch (layerConf().getHiddenUnit()) {
case RECTIFIED:
{
      INDArray sigH1Mean=sigmoid(h1Mean);
      INDArray sqrtSigH1Mean=sqrt(sigH1Mean);
      INDArray sample=Nd4j.getDistributions().createNormal(h1Mean,1).sample(h1Mean.shape());
      sample.muli(sqrtSigH1Mean);
      h1Sample=h1Mean.add(sample);
      h1Sample=max(h1Sample,0.0);
      break;
    }
case GAUSSIAN:
{
    h1Sample=h1Mean.add(Nd4j.randn(h1Mean.rows(),h1Mean.columns(),rng));
    break;
  }
case SOFTMAX:
{
  h1Sample=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("softmax",h1Mean),0);
  break;
}
case BINARY:
{
h1Sample=Nd4j.getDistributions().createBinomial(1,h1Mean).sample(h1Mean.shape());
break;
}
default :
throw new IllegalStateException("Hidden unit type must either be rectified linear or binary");
}
return new Pair<>(h1Mean,h1Sample);
}
