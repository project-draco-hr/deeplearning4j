{
  INDArray v1Mean=propDown(h);
  INDArray v1Sample;
switch (conf.getVisibleUnit()) {
case GAUSSIAN:
{
      v1Sample=v1Mean.add(Nd4j.randn(v1Mean.rows(),v1Mean.columns(),rng));
      break;
    }
case LINEAR:
{
    v1Sample=Nd4j.getDistributions().createNormal(v1Mean,1).sample(v1Mean.shape());
    break;
  }
case SOFTMAX:
{
  v1Sample=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("softmax",v1Mean),0);
  break;
}
case BINARY:
{
v1Sample=Nd4j.getDistributions().createBinomial(1,v1Mean).sample(v1Mean.shape());
break;
}
default :
{
throw new IllegalStateException("Visible type must be one of Binary, Gaussian, SoftMax or Linear");
}
}
return new Pair<>(v1Mean,v1Sample);
}
