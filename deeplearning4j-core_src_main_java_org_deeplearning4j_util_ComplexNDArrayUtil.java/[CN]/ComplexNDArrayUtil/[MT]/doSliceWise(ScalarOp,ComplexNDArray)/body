{
  arr=arr.reshape(new int[]{1,arr.length});
  if (op == ScalarOp.NORM_1) {
    return new ComplexDouble(NDArrayBlas.asum(arr));
  }
 else   if (op == ScalarOp.NORM_2) {
    return new ComplexDouble(NDArrayBlas.nrm2(arr));
  }
 else   if (op == ScalarOp.NORM_MAX) {
    int i=NDArrayBlas.iamax(arr);
    return arr.unSafeGet(i);
  }
  ComplexDouble s=new ComplexDouble(0.0);
  for (int i=0; i < arr.length; i++) {
    ComplexDouble curr=arr.unSafeGet(i);
switch (op) {
case SUM:
      s.addi(curr);
    break;
case MEAN:
  s.addi(arr.unSafeGet(i));
break;
case MAX:
if (arr.unSafeGet(i).abs() > s.abs()) s.set(arr.get(i).real(),arr.get(i).imag());
break;
case MIN:
if (arr.unSafeGet(i).abs() < s.abs()) s.set(arr.get(i).real(),arr.get(i).imag());
case PROD:
s.muli(curr);
break;
}
}
if (op == ScalarOp.MEAN) s.divi(arr.length);
return s;
}
