{
  if (nd.size(dimension) > n) {
    int[] targetShape=ArrayUtil.copy(nd.shape());
    targetShape[dimension]=n;
    int numRequired=ArrayUtil.prod(targetShape);
    if (nd.isVector()) {
      ComplexNDArray ret=new ComplexNDArray(targetShape);
      int count=0;
      for (int i=0; i < nd.length; i+=nd.stride()[dimension]) {
        ret.put(count++,nd.get(i));
      }
      return ret;
    }
 else     if (nd.isMatrix()) {
      List<ComplexDouble> list=new ArrayList<>();
      if (dimension == 0) {
        for (int i=0; i < nd.rows(); i++) {
          ComplexNDArray row=nd.getRow(i);
          for (int j=0; j < row.length; j++) {
            if (list.size() == numRequired)             return new ComplexNDArray(list.toArray(new ComplexDouble[0]),targetShape);
            list.add(row.get(j));
          }
        }
      }
 else       if (dimension == 1) {
        for (int i=0; i < nd.columns(); i++) {
          ComplexNDArray row=nd.getColumn(i);
          for (int j=0; j < row.length; j++) {
            if (list.size() == numRequired)             return new ComplexNDArray(list.toArray(new ComplexDouble[0]),targetShape);
            list.add(row.get(j));
          }
        }
      }
 else       throw new IllegalArgumentException("Illegal dimension for matrix " + dimension);
      return new ComplexNDArray(list.toArray(new ComplexDouble[0]),targetShape);
    }
    List<ComplexNDArray> slices=new ArrayList<>();
    for (int i=0; i < n; i++) {
      ComplexNDArray slice=nd.slice(i);
      slices.add(slice);
    }
    return new ComplexNDArray(slices,targetShape);
  }
  return nd;
}
