{
  this.sentenceIterator=sentenceIterator;
  this.vec=vec2;
  stateTracker.addUpdateListener(new NewUpdateListener(){
    @Override public void onUpdate(    Serializable update){
      Collection<Word2VecResult> work=(Collection<Word2VecResult>)update;
      InMemoryLookupTable l=(InMemoryLookupTable)vec.getLookupTable();
      VocabCache cache=vec.getCache();
      for (      Word2VecResult work1 : work) {
        for (        String s : work1.getSyn0Change().keySet()) {
          l.getSyn0().getRow(cache.indexOf(s)).addi(work1.getSyn0Change().get(s));
          l.getSyn1().getRow(cache.indexOf(s)).addi(work1.getSyn1Change().get(s));
          if (l.getSyn1Neg() != null)           l.getSyn1Neg().getRow(cache.indexOf(s)).addi(work1.getNegativeChange().get(s));
        }
      }
    }
  }
);
}
