{
  log.info("Training network");
  tracker.lockWorker(id);
  BaseMultiLayerNetwork network=this.getNetwork();
  while (network == null) {
    try {
      network=tracker.getCurrent().get();
      this.network=network;
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  DataSet d=null;
  Job j=null;
  int numLooped=0;
  while (j == null && numLooped < 10) {
    j=tracker.jobFor(id);
    if (j != null) {
      log.info("Found job for worker " + id);
      if (j.getWork() instanceof List) {
        List<DataSet> l=(List<DataSet>)j.getWork();
        d=DataSet.merge(l);
      }
 else       d=(DataSet)j.getWork();
      combinedInput=d.getFirst();
      outcomes=d.getSecond();
    }
 else     log.info("Job appears to be null...waiting");
    numLooped++;
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
  if (j == null)   return null;
  if (d == null) {
    throw new IllegalStateException("No job found for worker " + id);
  }
  if (tracker.isPretrain()) {
    log.info("Worker " + id + " pretraining");
    network.pretrain(d.getFirst(),extraParams);
  }
 else {
    network.setInput(d.getFirst());
    log.info("Worker " + id + " finetuning");
    network.finetune(d.getSecond(),learningRate,fineTuneEpochs);
  }
  try {
    if (j != null)     tracker.clearJob(j);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  tracker.unlockWorker(id);
  return new UpdateableImpl(network);
}
