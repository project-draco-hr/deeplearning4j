{
  log.info("Training network");
  BaseMultiLayerNetwork network=this.getNetwork();
  isWorking=true;
  while (network == null) {
    try {
      network=tracker.getCurrent().get();
      this.network=network;
      log.info("Network is currently null");
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  DataSet d=null;
  if (currentJob != null) {
    log.info("Found job for worker " + id);
    if (currentJob.getWork() instanceof List) {
      List<DataSet> l=(List<DataSet>)currentJob.getWork();
      d=DataSet.merge(l);
    }
 else     d=(DataSet)currentJob.getWork();
  }
 else   log.warn("No job found for " + id + " despite compute being called");
  if (currentJob == null)   return null;
  if (d == null) {
    throw new IllegalStateException("No job found for worker " + id);
  }
  if (tracker.isPretrain()) {
    log.info("Worker " + id + " pretraining");
    if (isNormalizeZeroMeanAndUnitVariance)     d.normalizeZeroMeanZeroUnitVariance();
    if (scale)     d.scale();
    network.pretrain(d.getFirst(),extraParams);
  }
 else {
    if (isNormalizeZeroMeanAndUnitVariance)     d.normalizeZeroMeanZeroUnitVariance();
    if (scale)     d.scale();
    network.setInput(d.getFirst());
    log.info("Worker " + id + " finetune");
    network.feedForward(d.getFirst());
    network.finetune(d.getSecond(),learningRate,fineTuneEpochs);
  }
  try {
    if (currentJob != null) {
      tracker.clearJob(currentJob);
      log.info("Clearing job for worker " + id);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  isWorking=false;
  return new UpdateableImpl(network);
}
