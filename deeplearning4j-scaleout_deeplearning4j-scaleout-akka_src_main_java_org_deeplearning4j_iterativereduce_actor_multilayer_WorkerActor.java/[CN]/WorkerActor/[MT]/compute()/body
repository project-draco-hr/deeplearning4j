{
  log.info("Training network");
  while (getCurrent() == null)   return null;
  BaseMultiLayerNetwork network=this.getNetwork();
  while (network == null) {
    try {
      network=tracker.getCurrent().get();
      this.network=network;
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  DataSet d=null;
  try {
    for (    Job j : tracker.currentJobs()) {
      if (j.getWorkerId().equals(id)) {
        if (j.getWork() instanceof List) {
          @SuppressWarnings("unchecked") List<DataSet> l=(List<DataSet>)j.getWork();
          d=DataSet.merge(l);
        }
 else         d=(DataSet)j.getWork();
        combinedInput=d.getFirst();
        outcomes=d.getSecond();
        break;
      }
    }
  }
 catch (  Exception e) {
    throw new IllegalStateException("No job found for worker " + id,e);
  }
  if (d == null) {
    throw new IllegalStateException("No job found for worker " + id);
  }
  if (tracker.isPretrain()) {
    log.info("Worker " + id + " pretraining");
    network.pretrain(d.getFirst(),extraParams);
  }
 else {
    network.setInput(d.getFirst());
    log.info("Worker " + id + " finetuning");
    network.finetune(d.getSecond(),learningRate,fineTuneEpochs);
  }
  finishedWork();
  return new UpdateableImpl(network);
}
