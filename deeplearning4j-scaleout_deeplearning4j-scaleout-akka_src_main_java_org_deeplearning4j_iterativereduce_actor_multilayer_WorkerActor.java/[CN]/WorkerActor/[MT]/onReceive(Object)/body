{
  if (message instanceof DistributedPubSubMediator.SubscribeAck || message instanceof DistributedPubSubMediator.UnsubscribeAck) {
    DistributedPubSubMediator.SubscribeAck ack=(DistributedPubSubMediator.SubscribeAck)message;
    mediator.tell(new DistributedPubSubMediator.Publish(ClusterListener.TOPICS,message),getSelf());
    log.info("Subscribed to " + ack.toString());
  }
 else   if (message instanceof Job) {
    Job j=(Job)message;
    if (getCurrent() != null) {
      log.info("Job sent when already had job");
      mediator.tell(new DistributedPubSubMediator.Publish(MasterActor.MASTER,new AlreadyWorking(id)),getSelf());
    }
 else {
      log.info("Confirmation from " + j.getWorkerId() + " on work");
      setCurrent(j);
      List<DataSet> input=(List<DataSet>)j.getWork();
      confirmWorking();
      updateTraining(input);
    }
  }
 else   if (message instanceof BaseMultiLayerNetwork) {
    setNetwork((BaseMultiLayerNetwork)message);
    log.info("Set network");
  }
 else   if (message instanceof Ack) {
    log.info("Ack from master on worker " + id);
  }
 else   if (message instanceof GiveMeMyJob) {
    GiveMeMyJob g=(GiveMeMyJob)message;
    if (g.getJob() == null) {
      this.blockTillJobAvailable();
    }
 else     current.set(g.getJob());
    log.info("Got job again for id " + id);
  }
 else   if (message instanceof NeedsStatus) {
    log.info("Sending status update to master");
    if (getCurrent() == null) {
      log.info("Null job sending job done to worker");
      Job j=new Job(id,null,false);
      j.setDone(true);
      mediator.tell(new DistributedPubSubMediator.Publish(MasterActor.MASTER,j),getSelf());
    }
 else     mediator.tell(new DistributedPubSubMediator.Publish(MasterActor.MASTER,getCurrent()),getSelf());
  }
 else   if (message instanceof Updateable) {
    final UpdateableImpl m=(UpdateableImpl)message;
    Future<Void> f=Futures.future(new Callable<Void>(){
      @Override public Void call() throws Exception {
        if (m.get() == null) {
          log.info("Network is null, this worker has recently joined the cluster or the network was lost. Asking master for a copy of the current network");
          while (getNetwork() == null) {
            mediator.tell(new DistributedPubSubMediator.Publish(MasterActor.MASTER,new NeedsModelMessage(id)),getSelf());
            try {
              Thread.sleep(15000);
            }
 catch (            InterruptedException e) {
              Thread.currentThread().interrupt();
            }
          }
        }
 else {
          setWorkerUpdateable(m.clone());
          log.info("Updated worker network");
          if (m.get() == null) {
            log.warn("Unable to initialize network; network was null");
            throw new IllegalArgumentException("Network was null");
          }
          setNetwork(m.get().clone());
        }
        return null;
      }
    }
,context().dispatcher());
    ActorRefUtils.throwExceptionIfExists(f,context().dispatcher());
  }
 else   unhandled(message);
}
