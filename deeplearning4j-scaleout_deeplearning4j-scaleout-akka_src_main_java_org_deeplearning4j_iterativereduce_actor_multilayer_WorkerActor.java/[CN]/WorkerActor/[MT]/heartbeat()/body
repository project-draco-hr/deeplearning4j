{
  heartbeat=context().system().scheduler().schedule(Duration.apply(30,TimeUnit.SECONDS),Duration.apply(30,TimeUnit.SECONDS),new Runnable(){
    @Override public void run(){
      tracker.addWorker(id);
      if (tracker.needsReplicate(id)) {
        try {
          log.info("Updating worker " + id);
          if (tracker.getCurrent() == null || tracker.getCurrent().get() == null) {
            return;
          }
          setE(tracker.getCurrent());
          setNetwork(tracker.getCurrent().get());
          tracker.doneReplicating(id);
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
      try {
        checkJobAvailable();
        if (currentJob != null && !isWorking.get()) {
          log.info("Confirmation from " + currentJob.getWorkerId() + " on work");
          List<DataSet> input=(List<DataSet>)currentJob.getWork();
          processDataSet(input);
        }
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
,context().dispatcher());
}
