{
  system=ActorSystem.create(systemName);
  system.actorOf(Props.create(SimpleClusterListener.class),"clusterListener");
  mediator=DistributedPubSubExtension.get(system).mediator();
  epochs=conf.getPretrainEpochs();
  if (type.equals("master")) {
    if (iter == null)     throw new IllegalStateException("Unable to initialize no dataset to train");
    log.info("Starting master");
    masterAddress=startBackend(null,"master",conf,iter);
    try {
      Thread.sleep(30000);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    mediator.tell(new DistributedPubSubMediator.Publish(MasterActor.MASTER,this),mediator);
    log.info("Starting model saver");
    ActorRef ref=system.actorOf(Props.create(ModelSavingActor.class,",model-saver"));
    Cluster.get(system).join(masterAddress);
    log.info("Setup master with epochs " + epochs);
  }
 else {
    Conf c=conf.copy();
    ActorRef worker=startWorker(masterAddress,c);
    try {
      Thread.sleep(30000);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    Cluster.get(system).join(masterAddress);
    log.info("Setup worker nodes");
  }
  conf.setMasterUrl(getMasterAddress().toString());
  scala.concurrent.Future<Void> f=Futures.future(new Callable<Void>(){
    @Override public Void call() throws Exception {
      log.info("Registering with zookeeper; if the logging stops here, ensure zookeeper is started");
      ZooKeeperConfigurationRegister reg=new ZooKeeperConfigurationRegister(conf,"master","localhost",2181);
      reg.register();
      reg.close();
      return null;
    }
  }
,system.dispatcher());
  f.onComplete(new OnComplete<Void>(){
    @Override public void onComplete(    Throwable arg0,    Void arg1) throws Throwable {
      if (arg0 != null)       throw arg0;
      log.info("Registered conf with zookeeper");
    }
  }
,system.dispatcher());
}
