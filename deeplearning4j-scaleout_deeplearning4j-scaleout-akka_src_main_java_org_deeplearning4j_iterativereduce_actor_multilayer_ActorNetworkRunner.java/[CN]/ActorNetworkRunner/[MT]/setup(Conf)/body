{
  system=ActorSystem.create(systemName);
  mediator=DistributedPubSubExtension.get(system).mediator();
  epochs=conf.getPretrainEpochs();
  if (type.equals("master")) {
    if (iter == null)     throw new IllegalStateException("Unable to initialize no dataset to train");
    log.info("Starting master");
    masterAddress=startBackend(null,"master",conf,iter);
    try {
      Thread.sleep(60000);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    mediator.tell(new DistributedPubSubMediator.Publish(MasterActor.MASTER,this),mediator);
    log.info("Starting model saver");
    system.actorOf(Props.create(ModelSavingActor.class,",model-saver"));
    Cluster.get(system).join(masterAddress);
    conf.setMasterUrl(getMasterAddress().toString());
    conf.setMasterAbsPath(ActorRefUtils.absPath(masterActor,system));
    log.info("Stored master path of " + conf.getMasterAbsPath());
    Future<Void> f=Futures.future(new Callable<Void>(){
      @Override public Void call() throws Exception {
        log.info("Registering with zookeeper; if the logging stops here, ensure zookeeper is started");
        if (!PortTaken.portTaken(2181)) {
          log.info("No zookeeper found; starting an embedded zookeeper");
          startEmbeddedZooKeeper();
        }
        ZooKeeperConfigurationRegister reg=new ZooKeeperConfigurationRegister(conf,"master","localhost",2181);
        reg.register();
        reg.close();
        return null;
      }
    }
,system.dispatcher());
    f.onComplete(new OnComplete<Void>(){
      @Override public void onComplete(      Throwable arg0,      Void arg1) throws Throwable {
        if (arg0 != null)         throw arg0;
        log.info("Registered conf with zookeeper");
      }
    }
,system.dispatcher());
    log.info("Setup master with epochs " + epochs);
  }
 else {
    Config conf2=ConfigFactory.parseString(String.format("akka.cluster.seed-nodes = [%s]",conf.getMasterUrl())).withFallback(ConfigFactory.load());
    log.info("Starting workers");
    ActorSystem system=ActorSystem.create(systemName,conf2);
    system.actorOf(Props.create(ClusterListener.class));
    Set<ActorSelection> initialContacts=new HashSet<ActorSelection>();
    initialContacts.add(system.actorSelection(masterAddress + "/user/receptionist"));
    ActorRef clusterClient=system.actorOf(ClusterClient.defaultProps(initialContacts),"clusterClient");
    Props p=WorkerActor.propsFor(clusterClient,conf);
    system.actorOf(p,"worker");
    try {
      Thread.sleep(30000);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    Cluster.get(system).join(masterAddress);
    log.info("Setup worker nodes");
  }
}
