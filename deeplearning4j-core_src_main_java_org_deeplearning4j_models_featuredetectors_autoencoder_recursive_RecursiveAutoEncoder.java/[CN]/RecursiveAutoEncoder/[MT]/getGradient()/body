{
  Gradient gradient=new DefaultGradient();
  INDArray currInput=null;
  INDArray visibleLoss=null, hiddenLoss=null, cLoss=null, bLoss=null;
  for (int i=0; i < input.rows(); i++) {
    INDArray combined=currInput == null ? Nd4j.concat(0,input.slice(i),input.slice(i + 1)) : Nd4j.concat(0,input.slice(i),currInput);
    if (i == 0)     i++;
    INDArray encoded=transform(combined);
    currInput=decode(encoded);
    INDArray currVisibleLoss=currInput.sub(combined);
    if (visibleLoss == null)     visibleLoss=currVisibleLoss;
 else     visibleLoss.addi(currVisibleLoss);
    INDArray currHiddenLoss=visibleLoss.mmul(getParam(RecursiveParamInitializer.W)).muli(encoded).muli(encoded.rsub(1));
    if (hiddenLoss == null)     hiddenLoss=currHiddenLoss;
 else     hiddenLoss.addi(currHiddenLoss);
    INDArray currCLoss=currVisibleLoss.mean(0);
    INDArray currBLoss=currHiddenLoss.mean(0);
    if (cLoss == null)     cLoss=currCLoss;
 else     cLoss.addi(currCLoss);
    if (bLoss == null)     bLoss=currBLoss;
 else     bLoss.addi(currBLoss);
  }
  return gradient;
}
