{
  FourDTensor tensor=new FourDTensor(input,inputSize[0],inputSize[1],input.rows / inputSize[0],input.rows / input.length);
  FourDTensor curr=tensor;
  List<DoubleMatrix> activations=new ArrayList<>();
  for (int i=0; i < getnLayers(); i++) {
    ConvolutionalRBM r=(ConvolutionalRBM)getLayers()[i];
    DownSamplingLayer d=(DownSamplingLayer)getSigmoidLayers()[i];
    for (int j=0; j < r.getNumFilters()[0]; j++) {
      int nInY=curr.rows();
      int nInX=curr.columns();
      int nInFm=curr.slices();
      int nObs=curr.getNumTensor();
      FourDTensor featureMap=FourDTensor.zeros(r.getFmSize()[0],r.getFmSize()[1],1,nObs);
      for (int k=0; j < r.getNumFilters()[0]; j++) {
        featureMap.addi(Convolution.conv2d(featureMap.getTensor(i),r.getW().getSliceOfTensor(j,i),Convolution.Type.VALID));
      }
      featureMap.addi(r.gethBias().get(i));
      r.getFeatureMap().setSlice(j,d.activate(featureMap));
      d.getFeatureMap().setTensor(j,downSample(r.getFeatureMap().getTensor(j),MatrixUtil.toMatrix(r.getStride())));
    }
    activations.add(d.getFeatureMap());
  }
  activations.add(output(activations.get(activations.size() - 1)));
  return activations;
}
