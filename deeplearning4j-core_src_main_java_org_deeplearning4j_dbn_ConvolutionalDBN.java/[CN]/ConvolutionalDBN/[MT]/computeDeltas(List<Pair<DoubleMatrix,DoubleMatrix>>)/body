{
  ActivationFunction a=getSigmoidLayers()[0].getActivationFunction();
  ActivationFunction softMaxDerivative=Activations.softmax();
  List<DoubleMatrix> activations=feedForward();
  DoubleMatrix error=labels.sub(activations.get(activations.size() - 1)).neg().mul(softMaxDerivative.applyDerivative(activations.get(activations.size() - 1)));
  DoubleMatrix es=logLayer.getW().mmul(error);
  DownSamplingLayer d=(DownSamplingLayer)getSigmoidLayers()[getSigmoidLayers().length - 1];
  DoubleMatrix shape=d.getFeatureMap().shape();
  ConvolutionalRBM rbm=(ConvolutionalRBM)getLayers()[getnLayers() - 1];
  DoubleMatrix[] errorSignals=new DoubleMatrix[getnLayers()];
  FourDTensor layerErrorSignal=FourDTensor.zeros((int)shape.get(0),(int)shape.get(1),(int)shape.get(2),(int)shape.get(3));
  errorSignals[errorSignals.length - 1]=es;
  int nMap=(int)shape.get(0) * (int)shape.get(1);
  for (int i=0; i < rbm.getNumFilters()[0]; i++) {
    DoubleMatrix subSlice=es.get(RangeUtils.interval(i * nMap,(i + 1) * nMap),RangeUtils.interval(0,es.columns));
    Tensor reshaped=MatrixUtil.reshape(subSlice,(int)shape.get(0),(int)shape.get(1),(int)shape.get(3));
    layerErrorSignal.setTensor(i,reshaped);
  }
  for (int i=getnLayers() - 2; i >= 0; i--) {
    DownSamplingLayer layer=(DownSamplingLayer)getSigmoidLayers()[i];
    DoubleMatrix shape2=d.getFeatureMap().shape();
    ConvolutionalRBM r2=(ConvolutionalRBM)getLayers()[i];
    DownSamplingLayer forwardDownSamplingLayer=(DownSamplingLayer)getSigmoidLayers()[i + 1];
    ConvolutionalRBM forwardRBM=(ConvolutionalRBM)getLayers()[i + 1];
    FourDTensor propErrorSignal=FourDTensor.zeros((int)shape2.get(0),(int)shape2.get(1),(int)shape2.get(2),(int)shape2.get(3));
    for (int k=0; k < layer.getNumFeatureMaps(); k++) {
      DoubleMatrix rotFilter=rot(forwardRBM.getW().getSliceOfTensor(i,k));
    }
  }
}
