{
  int[] nRows={1,5,20};
  int[] nCols={1,5,20};
  int[] nDepth={1,3};
  int[] nMiniBatchSize={1,5};
  for (  int rows : nRows) {
    for (    int cols : nCols) {
      for (      int d : nDepth) {
        CnnToFeedForwardPreProcessor convProcessor=new CnnToFeedForwardPreProcessor(rows,cols,d);
        for (        int miniBatch : nMiniBatchSize) {
          int[] convActShape=new int[]{miniBatch,d,rows,cols};
          INDArray rand=Nd4j.rand(convActShape);
          INDArray convInput_c=Nd4j.create(convActShape,'c');
          INDArray convInput_f=Nd4j.create(convActShape,'f');
          convInput_c.assign(rand);
          convInput_f.assign(rand);
          assertEquals(convInput_c,convInput_f);
          INDArray ffAct_c=convProcessor.preProcess(convInput_c,-1);
          INDArray ffAct_f=convProcessor.preProcess(convInput_f,-1);
          int[] ffActShape={miniBatch,d * rows * cols};
          assertArrayEquals(ffActShape,ffAct_c.shape());
          assertArrayEquals(ffActShape,ffAct_f.shape());
          assertEquals(ffAct_c,ffAct_f);
          for (int ex=0; ex < miniBatch; ex++) {
            for (int r=0; r < rows; r++) {
              for (int c=0; c < cols; c++) {
                for (int depth=0; depth < d; depth++) {
                  int vectorPosition=depth * (rows * cols) + r * cols + c;
                  double vecValue=ffAct_c.getDouble(ex,vectorPosition);
                  double convValue=convInput_c.getDouble(ex,depth,r,c);
                  assertEquals(convValue,vecValue,0.0);
                }
              }
            }
          }
          INDArray epsilon2_c=Nd4j.create(ffActShape,'c');
          INDArray epsilon2_f=Nd4j.create(ffActShape,'f');
          epsilon2_c.assign(ffAct_c);
          epsilon2_f.assign(ffAct_c);
          INDArray epsilon4_c=convProcessor.backprop(epsilon2_c,-1);
          INDArray epsilon4_f=convProcessor.backprop(epsilon2_f,-1);
          assertEquals(convInput_c,epsilon4_c);
          assertEquals(convInput_c,epsilon4_f);
        }
      }
    }
  }
}
