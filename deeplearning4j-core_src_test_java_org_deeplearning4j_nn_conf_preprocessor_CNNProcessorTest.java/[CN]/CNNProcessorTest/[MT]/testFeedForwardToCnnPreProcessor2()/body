{
  int[] nRows={1,5,20};
  int[] nCols={1,5,20};
  int[] nDepth={1,3};
  int[] nMiniBatchSize={1,5};
  for (  int rows : nRows) {
    for (    int cols : nCols) {
      for (      int d : nDepth) {
        FeedForwardToCnnPreProcessor convProcessor=new FeedForwardToCnnPreProcessor(rows,cols,d);
        for (        int miniBatch : nMiniBatchSize) {
          int[] ffShape=new int[]{miniBatch,rows * cols * d};
          INDArray rand=Nd4j.rand(ffShape);
          INDArray ffInput_c=Nd4j.create(ffShape,'c');
          INDArray ffInput_f=Nd4j.create(ffShape,'f');
          ffInput_c.assign(rand);
          ffInput_f.assign(rand);
          assertEquals(ffInput_c,ffInput_f);
          INDArray convAct_c=convProcessor.preProcess(ffInput_c,-1);
          INDArray convAct_f=convProcessor.preProcess(ffInput_f,-1);
          int[] convShape={miniBatch,d,rows,cols};
          assertArrayEquals(convShape,convAct_c.shape());
          assertArrayEquals(convShape,convAct_f.shape());
          assertEquals(convAct_c,convAct_f);
          for (int ex=0; ex < miniBatch; ex++) {
            for (int r=0; r < rows; r++) {
              for (int c=0; c < cols; c++) {
                for (int depth=0; depth < d; depth++) {
                  int origPosition=depth * (rows * cols) + r * cols + c;
                  double vecValue=ffInput_c.getDouble(ex,origPosition);
                  double convValue=convAct_c.getDouble(ex,depth,r,c);
                  assertEquals(vecValue,convValue,0.0);
                }
              }
            }
          }
          INDArray epsilon4_c=Nd4j.create(convShape,'c');
          INDArray epsilon4_f=Nd4j.create(convShape,'f');
          epsilon4_c.assign(convAct_c);
          epsilon4_f.assign(convAct_f);
          INDArray epsilon2_c=convProcessor.backprop(epsilon4_c,-1);
          INDArray epsilon2_f=convProcessor.backprop(epsilon4_f,-1);
          assertEquals(ffInput_c,epsilon2_c);
          assertEquals(ffInput_c,epsilon2_f);
        }
      }
    }
  }
}
