{
  double test, stepMin, step, step2, oldStep, tmpStep;
  double rhs1, rhs2, a, b, disc, score, oldScore, score2;
  minObjectiveFunction=(stepFunction instanceof NegativeDefaultStepFunction || stepFunction instanceof NegativeGradientStepFunction);
  double sum=searchDirection.norm2(Integer.MAX_VALUE).getDouble(0);
  double slope=-1f * Nd4j.getBlasWrapper().dot(searchDirection,gradients);
  log.debug("slope = {}",slope);
  INDArray maxOldParams=abs(parameters);
  Nd4j.getExecutioner().exec(new ScalarSetValue(maxOldParams,1));
  INDArray testMatrix=abs(gradients).divi(maxOldParams);
  test=testMatrix.max(Integer.MAX_VALUE).getDouble(0);
  step=1.0;
  stepMin=relTolx / test;
  oldStep=0.0;
  step2=0.0;
  score=score2=oldScore=layer.score();
  double scoreAtStart=score2;
  if (log.isTraceEnabled()) {
    log.trace("ENTERING BACKTRACK\n");
    log.trace("Entering BackTrackLineSearch, value = " + oldScore + ",\ndirection.oneNorm:"+ searchDirection.dup().norm1(Integer.MAX_VALUE)+ "  direction.infNorm:"+ FastMath.max(Float.NEGATIVE_INFINITY,abs(searchDirection.dup()).max(Integer.MAX_VALUE).getDouble(0)));
  }
  if (sum > stepMax) {
    log.warn("Attempted step too big. scaling: sum= {}, stepMax= {}",sum,stepMax);
    searchDirection.muli(stepMax / sum);
  }
  if (slope >= 0.0)   throw new InvalidStepException("Slope " + slope + " is >= 0.0. Expect slope < 0.0");
  INDArray candidateParameters=null;
  for (int iteration=0; iteration < maxIterations; iteration++) {
    if (log.isTraceEnabled()) {
      log.trace("BackTrack loop iteration {} : step={}, oldStep={}",iteration,step,oldStep);
      log.trace("before step, x.1norm: {} \nstep: {} \noldStep: {}",parameters.norm1(Integer.MAX_VALUE),step,oldStep);
    }
    if (step == oldStep)     throw new IllegalArgumentException("Current step == oldStep");
    if (candidateParameters == null)     candidateParameters=parameters.dup();
 else     candidateParameters.assign(parameters);
    stepFunction.step(candidateParameters,searchDirection,step);
    oldStep=step;
    if (log.isTraceEnabled()) {
      double norm1=candidateParameters.norm1(Integer.MAX_VALUE).getDouble(0);
      log.trace("after step, x.1norm: " + norm1);
    }
    if ((step < stepMin) || Nd4j.getExecutioner().execAndReturn(new Eps(parameters,candidateParameters,candidateParameters.dup(),candidateParameters.length())).sum(Integer.MAX_VALUE).getDouble(0) == candidateParameters.length()) {
      score=setScoreFor(parameters);
      log.trace("EXITING BACKTRACK: Jump too small (stepMin = {}). Exiting and using original params. Value = {}",stepMin,score);
      return 0.0;
    }
    score=setScoreFor(candidateParameters);
    log.debug("Model score after step = {}",score);
    if (minObjectiveFunction && score <= oldScore + ALF * step * slope) {
      log.debug("Sufficient decrease (Wolfe cond.), exiting backtrack on iter {}: score={}, oldScore={}",iteration,score,oldScore);
      if (score > oldScore)       throw new IllegalStateException("Function did not decrease: score = " + score + " > "+ oldScore+ " = oldScore");
      return step;
    }
    if (!minObjectiveFunction && score >= oldScore + ALF * step * slope) {
      log.debug("Sufficient increase (Wolfe cond.), exiting backtrack on iter {}: score={}, oldScore={}",iteration,score,oldScore);
      if (score < oldScore)       throw new IllegalStateException("Function did not increase: score = " + score + " < "+ oldScore+ " = oldScore");
      return step;
    }
 else     if (Double.isInfinite(score) || Double.isInfinite(score2) || Double.isNaN(score)|| Double.isNaN(score2)) {
      log.warn("Value is infinite after jump. oldStep={}. score={}, score2={}. Scaling back step size...",oldStep,score,score2);
      tmpStep=.2 * step;
      if (step < stepMin || Double.isNaN(score2) || Double.isInfinite(score2)) {
        score=setScoreFor(parameters);
        log.warn("EXITING BACKTRACK: Jump too small. Exiting and using previous parameters. Value={}",score);
        return 0.0;
      }
    }
 else     if (minObjectiveFunction) {
      if (step == 1.0)       tmpStep=-slope / (2.0 * (score - oldScore - slope));
 else {
        rhs1=score - oldScore - step * slope;
        rhs2=score2 - oldScore - step2 * slope;
        if (step == step2)         throw new IllegalStateException("FAILURE: dividing by step-step2 which equals 0. step=" + step);
        double stepSquared=step * step;
        double step2Squared=step2 * step2;
        a=(rhs1 / stepSquared - rhs2 / step2Squared) / (step - step2);
        b=(-step2 * rhs1 / stepSquared + step * rhs2 / step2Squared) / (step - step2);
        if (a == 0.0)         tmpStep=-slope / (2.0 * b);
 else {
          disc=b * b - 3.0 * a * slope;
          if (disc < 0.0) {
            tmpStep=0.5 * step;
          }
 else           if (b <= 0.0)           tmpStep=(-b + FastMath.sqrt(disc)) / (3.0 * a);
 else           tmpStep=-slope / (b + FastMath.sqrt(disc));
        }
        if (tmpStep > 0.5 * step)         tmpStep=0.5 * step;
      }
    }
 else {
      if (step == 1.0)       tmpStep=-slope / (2.0 * (oldScore - score - slope));
 else {
        rhs1=oldScore - score - step * slope;
        rhs2=oldScore - score2 - step2 * slope;
        if (step == step2)         throw new IllegalStateException("FAILURE: dividing by step-step2 which equals 0. step=" + step);
        double stepSquared=step * step;
        double step2Squared=step2 * step2;
        a=(rhs1 / stepSquared - rhs2 / step2Squared) / (step - step2);
        b=(-step2 * rhs1 / stepSquared + step * rhs2 / step2Squared) / (step - step2);
        if (a == 0.0)         tmpStep=-slope / (2.0 * b);
 else {
          disc=b * b - 3.0 * a * slope;
          if (disc < 0.0) {
            tmpStep=0.5 * step;
          }
 else           if (b <= 0.0)           tmpStep=(-b + FastMath.sqrt(disc)) / (3.0 * a);
 else           tmpStep=-slope / (b + FastMath.sqrt(disc));
        }
        if (tmpStep > 0.5 * step)         tmpStep=0.5 * step;
      }
    }
    step2=step;
    score2=score;
    log.debug("tmpStep: {}",tmpStep);
    step=Math.max(tmpStep,.1f * step);
  }
  if (minObjectiveFunction && score < scoreAtStart) {
    log.debug("Exited line search after maxIterations termination condition; best step={}, score={}, scoreAtStart={}",step,score,scoreAtStart);
    return step;
  }
 else   if (!minObjectiveFunction && score > scoreAtStart) {
    log.debug("Exited line search after maxIterations termination condition; best step={}, score={}, scoreAtStart={}",step,score,scoreAtStart);
    return step;
  }
 else {
    log.debug("Exited line search after maxIterations termination condition; score did not improve (scoreAtStart={}). Resetting parameters",scoreAtStart);
    setScoreFor(parameters);
    return 0.0;
  }
}
