{
  int nSplits;
  if (examplesPerFit == Integer.MAX_VALUE || examplesPerFit >= totalExamples)   nSplits=1;
 else {
    if (totalExamples % examplesPerFit == 0) {
      nSplits=(totalExamples / examplesPerFit);
    }
 else {
      nSplits=(totalExamples / examplesPerFit) + 1;
    }
  }
  if (nSplits == 1) {
    fitDataSet(rdd);
  }
 else {
    double[] splitWeights=new double[nSplits];
    for (int i=0; i < nSplits; i++)     splitWeights[i]=1.0 / nSplits;
    JavaRDD<DataSet>[] subsets=rdd.randomSplit(splitWeights);
    for (int i=0; i < subsets.length; i++) {
      log.info("Initiating distributed training of subset {} of {}",(i + 1),subsets.length);
      JavaRDD<DataSet> next=subsets[i].repartition(numPartitions);
      fitDataSet(next);
    }
  }
  return network;
}
