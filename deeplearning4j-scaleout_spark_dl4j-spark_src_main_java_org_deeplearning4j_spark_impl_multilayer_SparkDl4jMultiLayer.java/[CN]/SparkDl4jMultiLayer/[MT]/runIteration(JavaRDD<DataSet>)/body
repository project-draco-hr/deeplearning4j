{
  MultiLayerNetwork network=new MultiLayerNetwork(conf);
  network.init();
  final INDArray params=network.params();
  this.params=sc.broadcast(params);
  log.info("Broadcasting initial parameters of length " + params.length());
  int paramsLength=network.numParams();
  if (params.length() != paramsLength)   throw new IllegalStateException("Number of params " + paramsLength + " was not equal to "+ params.length());
  JavaRDD<INDArray> results=rdd.sample(true,0.4).mapPartitions(new IterativeReduceFlatMap(conf.toJson(),this.params)).cache();
  log.info("Ran iterative reduce...averaging results now.");
  Adder a=new Adder(params.length());
  results.foreach(a);
  INDArray newParams=a.getAccumulator().value();
  log.info("Accumulated parameters");
  newParams.divi(rdd.partitions().size());
  log.info("Divided by partitions");
  network.setParameters(newParams);
  log.info("Set parameters");
  this.network=network;
}
